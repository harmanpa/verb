// Generated by Haxe 4.1.4
package verb.eval;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Tess extends haxe.lang.HxObject
{
	public Tess(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Tess()
	{
		//line 21 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		verb.eval.Tess.__hx_ctor_verb_eval_Tess(this);
	}
	
	
	protected static void __hx_ctor_verb_eval_Tess(verb.eval.Tess __hx_this)
	{
	}
	
	
	public static haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> rationalCurveRegularSample(verb.core.NurbsCurveData curve, int numSamples, boolean includeU)
	{
		//line 36 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		try 
		{
			//line 36 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			double tmp = ((org.apache.commons.math3.linear.ArrayRealVector) (curve.knots) ).getEntry(((int) (0) ));
			//line 36 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			org.apache.commons.math3.linear.ArrayRealVector this1 = curve.knots;
			//line 36 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			return verb.eval.Tess.rationalCurveRegularSampleRange(curve, tmp, this1.getEntry(((int) (( this1.getDimension() - 1 )) )), numSamples, includeU);
		}
		catch (java.lang.Throwable typedException)
		{
			//line 35 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> rationalCurveRegularSampleRange(verb.core.NurbsCurveData curve, double start, double end, int numSamples, boolean includeU)
	{
		//line 56 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		if (( numSamples < 1 )) 
		{
			//line 57 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			numSamples = 2;
		}
		
		//line 60 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> p = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{});
		//line 61 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		double span = ( (( end - start )) / (( numSamples - 1 )) );
		//line 62 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		double u = ((double) (0) );
		//line 64 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		{
			//line 64 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			int _g = 0;
			//line 64 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			int _g1 = numSamples;
			//line 64 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			while (( _g < _g1 ))
			{
				//line 64 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				int i = _g++;
				//line 66 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				u = ( start + ( span * i ) );
				//line 68 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				if (includeU) 
				{
					//line 69 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					org.apache.commons.math3.linear.ArrayRealVector uVec = verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (u) )}));
					//line 70 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					p.push(verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.RealVector) (((org.apache.commons.math3.linear.ArrayRealVector) (uVec) ).append(((org.apache.commons.math3.linear.ArrayRealVector) (verb.eval.Eval.rationalCurvePoint(curve, u)) ))) ))));
				}
				else
				{
					//line 72 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					p.push(verb.eval.Eval.rationalCurvePoint(curve, u));
				}
				
			}
			
		}
		
		//line 77 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		return p;
	}
	
	
	public static haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> rationalCurveAdaptiveSample(verb.core.NurbsCurveData curve, java.lang.Object tol, java.lang.Object includeU)
	{
		//line 93 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		try 
		{
			//line 93 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			boolean includeU1 = ( (haxe.lang.Runtime.eq(includeU, null)) ? (false) : (haxe.lang.Runtime.toBool(((java.lang.Boolean) (includeU) ))) );
			//line 93 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			double tol1 = ( (haxe.lang.Runtime.eq(tol, null)) ? (1e-6) : (((double) (haxe.lang.Runtime.toDouble(tol)) )) );
			//line 96 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			if (( curve.degree == 1 )) 
			{
				//line 97 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				if ( ! (includeU1) ) 
				{
					//line 98 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> _this = curve.controlPoints;
					//line 98 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					haxe.lang.Function f = ((haxe.lang.Function) (new haxe.lang.Closure(verb.eval.Eval.class, "dehomogenize")) );
					//line 98 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> ret = ((haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (_this.length) ))) )) );
					//line 98 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					{
						//line 98 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						int _g = 0;
						//line 98 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						int _g1 = _this.length;
						//line 98 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						while (( _g < _g1 ))
						{
							//line 98 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							int i = _g++;
							//line 98 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							ret.__set(i, ((org.apache.commons.math3.linear.ArrayRealVector) (f.__hx_invoke1_o(0.0, _this.__get(i))) ));
						}
						
					}
					
					//line 98 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					return ret;
				}
				else
				{
					//line 101 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> _g2 = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{});
					//line 101 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					{
						//line 101 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						int _g3 = 0;
						//line 101 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						int _g4 = curve.controlPoints.length;
						//line 101 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						while (( _g3 < _g4 ))
						{
							//line 101 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							int i1 = _g3++;
							//line 102 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							haxe.root.Array<java.lang.Object> tmp = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (curve.knots) ).getEntry(((int) (( i1 + 1 )) ))) )});
							//line 102 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							org.apache.commons.math3.linear.ArrayRealVector this1 = verb.eval.Eval.dehomogenize(curve.controlPoints.__get(i1));
							//line 102 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							haxe.root.Array<java.lang.Object> out = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
							//line 102 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							{
								//line 102 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
								int _g5 = 0;
								//line 102 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
								int _g6 = this1.getDimension();
								//line 102 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
								while (( _g5 < _g6 ))
								{
									//line 102 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
									int i2 = _g5++;
									//line 102 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
									out.push(this1.getEntry(((int) (i2) )));
								}
								
							}
							
							//line 102 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							_g2.push(verb.core._Data.Vector_Impl_.fromArray(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (tmp.concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (out) )) ))) )) )));
						}
						
					}
					
					//line 101 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					return _g2;
				}
				
			}
			
			//line 106 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			double tmp1 = ((org.apache.commons.math3.linear.ArrayRealVector) (curve.knots) ).getEntry(((int) (0) ));
			//line 106 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			org.apache.commons.math3.linear.ArrayRealVector this2 = curve.knots;
			//line 106 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			return verb.eval.Tess.rationalCurveAdaptiveSampleRange(curve, tmp1, this2.getEntry(((int) (( this2.getDimension() - 1 )) )), tol1, includeU1);
		}
		catch (java.lang.Throwable typedException)
		{
			//line 93 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> rationalCurveAdaptiveSampleRange(verb.core.NurbsCurveData curve, double start, double end, double tol, boolean includeU)
	{
		//line 122 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		try 
		{
			//line 125 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			org.apache.commons.math3.linear.ArrayRealVector p1 = verb.eval.Eval.rationalCurvePoint(curve, start);
			//line 125 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			org.apache.commons.math3.linear.ArrayRealVector p3 = verb.eval.Eval.rationalCurvePoint(curve, end);
			//line 125 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			double t = ( 0.5 + ( 0.2 * java.lang.Math.random() ) );
			//line 125 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			double mid = ( start + ( (( end - start )) * t ) );
			//line 125 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			org.apache.commons.math3.linear.ArrayRealVector p2 = verb.eval.Eval.rationalCurvePoint(curve, mid);
			//line 132 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			org.apache.commons.math3.linear.ArrayRealVector diff = verb.core.Vec.sub(p1, p3);
			//line 133 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			org.apache.commons.math3.linear.ArrayRealVector diff2 = verb.core.Vec.sub(p1, p2);
			//line 136 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			if (( ( ( verb.core.Vec.dot(diff, diff) < tol ) && ( verb.core.Vec.dot(diff2, diff2) > tol ) ) ||  ! (verb.core.Trig.threePointsAreFlat(p1, p2, p3, tol))  )) 
			{
				//line 139 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				double exact_mid = ( start + ( (( end - start )) * 0.5 ) );
				//line 142 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> left_pts = verb.eval.Tess.rationalCurveAdaptiveSampleRange(curve, start, exact_mid, tol, includeU);
				//line 142 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> right_pts = verb.eval.Tess.rationalCurveAdaptiveSampleRange(curve, exact_mid, end, tol, includeU);
				//line 146 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				return left_pts.slice(0, -1).concat(right_pts);
			}
			else
			{
				//line 149 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				if (includeU) 
				{
					//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					haxe.root.Array<java.lang.Object> out = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
					//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					{
						//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						int _g = 0;
						//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						int _g1 = ((org.apache.commons.math3.linear.ArrayRealVector) (p1) ).getDimension();
						//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						while (( _g < _g1 ))
						{
							//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							int i = _g++;
							//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							out.push(((org.apache.commons.math3.linear.ArrayRealVector) (p1) ).getEntry(((int) (i) )));
						}
						
					}
					
					//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					org.apache.commons.math3.linear.ArrayRealVector tmp = verb.core._Data.Vector_Impl_.fromArray(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (start) )}).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (out) )) ))) )) ));
					//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					haxe.root.Array<java.lang.Object> out1 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
					//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					{
						//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						int _g2 = 0;
						//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						int _g3 = ((org.apache.commons.math3.linear.ArrayRealVector) (p3) ).getDimension();
						//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						while (( _g2 < _g3 ))
						{
							//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							int i1 = _g2++;
							//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							out1.push(((org.apache.commons.math3.linear.ArrayRealVector) (p3) ).getEntry(((int) (i1) )));
						}
						
					}
					
					//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					return new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{tmp, verb.core._Data.Vector_Impl_.fromArray(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (end) )}).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (out1) )) ))) )) ))});
				}
				else
				{
					//line 152 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					return new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{p1, p3});
				}
				
			}
			
		}
		catch (java.lang.Throwable typedException)
		{
			//line 122 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static verb.core.MeshData rationalSurfaceNaive(verb.core.NurbsSurfaceData surface, int divs_u, int divs_v)
	{
		//line 169 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		try 
		{
			//line 171 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			if (( divs_u < 1 )) 
			{
				//line 171 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				divs_u = 1;
			}
			
			//line 172 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			if (( divs_v < 1 )) 
			{
				//line 172 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				divs_v = 1;
			}
			
			//line 174 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			int degreeU = surface.degreeU;
			//line 174 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			int degreeV = surface.degreeV;
			//line 174 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> controlPoints = surface.controlPoints;
			//line 174 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			org.apache.commons.math3.linear.ArrayRealVector knotsU = surface.knotsU;
			//line 174 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			org.apache.commons.math3.linear.ArrayRealVector knotsV = surface.knotsV;
			//line 180 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			double u_span = ( ((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).getEntry(((int) (( ((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).getDimension() - 1 )) )) - ((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).getEntry(((int) (0) )) );
			//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			double v_span = ( ((org.apache.commons.math3.linear.ArrayRealVector) (knotsV) ).getEntry(((int) (( ((org.apache.commons.math3.linear.ArrayRealVector) (knotsV) ).getDimension() - 1 )) )) - ((org.apache.commons.math3.linear.ArrayRealVector) (knotsV) ).getEntry(((int) (0) )) );
			//line 183 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			double span_u = ( u_span / divs_u );
			//line 183 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			double span_v = ( v_span / divs_v );
			//line 186 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> points = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{});
			//line 187 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> uvs = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{});
			//line 188 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> normals = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{});
			//line 190 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			{
				//line 190 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				int _g = 0;
				//line 190 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				int _g1 = ( divs_u + 1 );
				//line 190 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				while (( _g < _g1 ))
				{
					//line 190 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					int i = _g++;
					//line 191 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					{
						//line 191 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						int _g2 = 0;
						//line 191 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						int _g3 = ( divs_v + 1 );
						//line 191 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						while (( _g2 < _g3 ))
						{
							//line 191 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							int j = _g2++;
							//line 193 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							double pt_u = ( i * span_u );
							//line 193 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							double pt_v = ( j * span_v );
							//line 196 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							uvs.push(verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (pt_u) ), ((java.lang.Object) (pt_v) )})));
							//line 198 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> derivs = verb.eval.Eval.rationalSurfaceDerivatives(surface, pt_u, pt_v, 1);
							//line 199 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							org.apache.commons.math3.linear.ArrayRealVector pt = derivs.__get(0).__get(0);
							//line 201 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							points.push(pt);
							//line 203 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							org.apache.commons.math3.linear.ArrayRealVector normal = verb.core.Vec.normalized(verb.core.Vec.cross(derivs.__get(1).__get(0), derivs.__get(0).__get(1)));
							//line 204 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							normals.push(normal);
						}
						
					}
					
				}
				
			}
			
			//line 208 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			haxe.root.Array<haxe.root.Array<java.lang.Object>> faces = new haxe.root.Array<haxe.root.Array<java.lang.Object>>(new haxe.root.Array[]{});
			//line 210 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			{
				//line 210 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				int _g4 = 0;
				//line 210 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				int _g5 = divs_u;
				//line 210 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				while (( _g4 < _g5 ))
				{
					//line 210 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					int i1 = _g4++;
					//line 211 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					{
						//line 211 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						int _g6 = 0;
						//line 211 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						int _g7 = divs_v;
						//line 211 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						while (( _g6 < _g7 ))
						{
							//line 211 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							int j1 = _g6++;
							//line 212 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							int a_i = ( ( i1 * (( divs_v + 1 )) ) + j1 );
							//line 212 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							int b_i = ( ( (( i1 + 1 )) * (( divs_v + 1 )) ) + j1 );
							//line 212 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							int c_i = ( b_i + 1 );
							//line 212 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							int d_i = ( a_i + 1 );
							//line 212 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							haxe.root.Array<java.lang.Object> abc = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{a_i, b_i, c_i});
							//line 212 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							haxe.root.Array<java.lang.Object> acd = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{a_i, c_i, d_i});
							//line 219 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							faces.push(abc);
							//line 220 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							faces.push(acd);
						}
						
					}
					
				}
				
			}
			
			//line 224 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			return new verb.core.MeshData(faces, points, normals, uvs);
		}
		catch (java.lang.Throwable typedException)
		{
			//line 169 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<verb.eval.AdaptiveRefinementNode> divideRationalSurfaceAdaptive(verb.core.NurbsSurfaceData surface, verb.eval.AdaptiveRefinementOptions options)
	{
		//line 239 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		try 
		{
			//line 241 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			if (( options == null )) 
			{
				//line 241 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				options = new verb.eval.AdaptiveRefinementOptions();
			}
			
			//line 249 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			int minU = ( (( surface.controlPoints.length - 1 )) * 2 );
			//line 250 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			int minV = ( (( surface.controlPoints.__get(0).length - 1 )) * 2 );
			//line 252 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			int divsU = options.minDivsU = ( (( options.minDivsU > minU )) ? (options.minDivsU) : (minU) );
			//line 253 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			int divsV = options.minDivsV = ( (( options.minDivsV > minV )) ? (options.minDivsV) : (minV) );
			//line 256 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			org.apache.commons.math3.linear.ArrayRealVector this1 = surface.knotsU;
			//line 256 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			double umax = this1.getEntry(((int) (( this1.getDimension() - 1 )) ));
			//line 257 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			double umin = ((org.apache.commons.math3.linear.ArrayRealVector) (surface.knotsU) ).getEntry(((int) (0) ));
			//line 258 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			org.apache.commons.math3.linear.ArrayRealVector this2 = surface.knotsV;
			//line 258 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			double vmax = this2.getEntry(((int) (( this2.getDimension() - 1 )) ));
			//line 259 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			double vmin = ((org.apache.commons.math3.linear.ArrayRealVector) (surface.knotsV) ).getEntry(((int) (0) ));
			//line 261 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			double du = ( (( umax - umin )) / divsU );
			//line 261 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			double dv = ( (( vmax - vmin )) / divsV );
			//line 264 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			haxe.root.Array<verb.eval.AdaptiveRefinementNode> divs = new haxe.root.Array<verb.eval.AdaptiveRefinementNode>(new verb.eval.AdaptiveRefinementNode[]{});
			//line 265 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			haxe.root.Array<haxe.root.Array<verb.core.SurfacePoint>> pts = new haxe.root.Array<haxe.root.Array<verb.core.SurfacePoint>>(new haxe.root.Array[]{});
			//line 268 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			{
				//line 268 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				int _g = 0;
				//line 268 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				int _g1 = ( divsV + 1 );
				//line 268 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				while (( _g < _g1 ))
				{
					//line 268 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					int i = _g++;
					//line 269 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					haxe.root.Array<verb.core.SurfacePoint> ptrow = new haxe.root.Array<verb.core.SurfacePoint>(new verb.core.SurfacePoint[]{});
					//line 270 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					{
						//line 270 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						int _g2 = 0;
						//line 270 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						int _g3 = ( divsU + 1 );
						//line 270 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						while (( _g2 < _g3 ))
						{
							//line 270 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							int j = _g2++;
							//line 272 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							double u = ( umin + ( du * j ) );
							//line 272 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							double v = ( vmin + ( dv * i ) );
							//line 276 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> ds = verb.eval.Eval.rationalSurfaceDerivatives(surface, u, v, 1);
							//line 278 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							org.apache.commons.math3.linear.ArrayRealVector norm = verb.core.Vec.normalized(verb.core.Vec.cross(ds.__get(0).__get(1), ds.__get(1).__get(0)));
							//line 279 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							ptrow.push(new verb.core.SurfacePoint(ds.__get(0).__get(0), norm, verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (u) ), ((java.lang.Object) (v) )})), -1, verb.core.Vec.isZero(norm)));
						}
						
					}
					
					//line 281 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					pts.push(ptrow);
				}
				
			}
			
			//line 285 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			{
				//line 285 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				int _g4 = 0;
				//line 285 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				int _g5 = divsV;
				//line 285 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				while (( _g4 < _g5 ))
				{
					//line 285 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					int i1 = _g4++;
					//line 286 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					{
						//line 286 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						int _g6 = 0;
						//line 286 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						int _g7 = divsU;
						//line 286 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						while (( _g6 < _g7 ))
						{
							//line 286 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							int j1 = _g6++;
							//line 287 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							haxe.root.Array<verb.core.SurfacePoint> corners = new haxe.root.Array<verb.core.SurfacePoint>(new verb.core.SurfacePoint[]{pts.__get(( ( divsV - i1 ) - 1 )).__get(j1), pts.__get(( ( divsV - i1 ) - 1 )).__get(( j1 + 1 )), pts.__get(( divsV - i1 )).__get(( j1 + 1 )), pts.__get(( divsV - i1 )).__get(j1)});
							//line 292 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							divs.push(new verb.eval.AdaptiveRefinementNode(surface, corners, null));
						}
						
					}
					
				}
				
			}
			
			//line 296 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			if ( ! (options.refine) ) 
			{
				//line 296 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				return divs;
			}
			
			//line 299 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			{
				//line 299 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				int _g8 = 0;
				//line 299 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				int _g9 = divsV;
				//line 299 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				while (( _g8 < _g9 ))
				{
					//line 299 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					int i2 = _g8++;
					//line 300 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
					{
						//line 300 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						int _g10 = 0;
						//line 300 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						int _g11 = divsU;
						//line 300 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
						while (( _g10 < _g11 ))
						{
							//line 300 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							int j2 = _g10++;
							//line 302 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							int ci = ( ( i2 * divsU ) + j2 );
							//line 302 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							verb.eval.AdaptiveRefinementNode n = verb.eval.Tess.north(ci, i2, j2, divsU, divsV, divs);
							//line 302 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							verb.eval.AdaptiveRefinementNode e = verb.eval.Tess.east(ci, i2, j2, divsU, divsV, divs);
							//line 302 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							verb.eval.AdaptiveRefinementNode s = verb.eval.Tess.south(ci, i2, j2, divsU, divsV, divs);
							//line 302 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							verb.eval.AdaptiveRefinementNode w = verb.eval.Tess.west(ci, i2, j2, divsU, divsV, divs);
							//line 308 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							divs.__get(ci).neighbors = new haxe.root.Array<verb.eval.AdaptiveRefinementNode>(new verb.eval.AdaptiveRefinementNode[]{s, e, n, w});
							//line 309 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
							divs.__get(ci).divide(options);
						}
						
					}
					
				}
				
			}
			
			//line 313 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			return divs;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 239 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static verb.eval.AdaptiveRefinementNode north(int index, int i, int j, int divsU, int divsV, haxe.root.Array<verb.eval.AdaptiveRefinementNode> divs)
	{
		//line 317 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		if (( i == 0 )) 
		{
			//line 317 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			return null;
		}
		
		//line 318 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		return divs.__get(( index - divsU ));
	}
	
	
	public static verb.eval.AdaptiveRefinementNode south(int index, int i, int j, int divsU, int divsV, haxe.root.Array<verb.eval.AdaptiveRefinementNode> divs)
	{
		//line 322 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		if (( i == ( divsV - 1 ) )) 
		{
			//line 322 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			return null;
		}
		
		//line 323 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		return divs.__get(( index + divsU ));
	}
	
	
	public static verb.eval.AdaptiveRefinementNode east(int index, int i, int j, int divsU, int divsV, haxe.root.Array<verb.eval.AdaptiveRefinementNode> divs)
	{
		//line 327 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		if (( j == ( divsU - 1 ) )) 
		{
			//line 327 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			return null;
		}
		
		//line 328 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		return divs.__get(( index + 1 ));
	}
	
	
	public static verb.eval.AdaptiveRefinementNode west(int index, int i, int j, int divsU, int divsV, haxe.root.Array<verb.eval.AdaptiveRefinementNode> divs)
	{
		//line 332 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		if (( j == 0 )) 
		{
			//line 332 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			return null;
		}
		
		//line 333 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		return divs.__get(( index - 1 ));
	}
	
	
	public static verb.core.MeshData triangulateAdaptiveRefinementNodeTree(haxe.root.Array<verb.eval.AdaptiveRefinementNode> arrTree)
	{
		//line 339 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		verb.core.MeshData mesh = verb.core.MeshData.empty();
		//line 340 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		{
			//line 340 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			int _g = 0;
			//line 340 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			while (( _g < arrTree.length ))
			{
				//line 340 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				verb.eval.AdaptiveRefinementNode x = arrTree.__get(_g);
				//line 340 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				 ++ _g;
				//line 340 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				x.triangulate(mesh);
			}
			
		}
		
		//line 341 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		return mesh;
	}
	
	
	public static verb.core.MeshData rationalSurfaceAdaptive(verb.core.NurbsSurfaceData surface, verb.eval.AdaptiveRefinementOptions options)
	{
		//line 347 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		if (( options == null )) 
		{
			//line 347 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			options = new verb.eval.AdaptiveRefinementOptions();
		}
		
		//line 350 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		haxe.root.Array<verb.eval.AdaptiveRefinementNode> arrTrees = verb.eval.Tess.divideRationalSurfaceAdaptive(surface, options);
		//line 353 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		return verb.eval.Tess.triangulateAdaptiveRefinementNodeTree(arrTrees);
	}
	
	
}


