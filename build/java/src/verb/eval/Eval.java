// Generated by Haxe 4.1.4
package verb.eval;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Eval extends haxe.lang.HxObject
{
	public Eval(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Eval()
	{
		//line 18 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		verb.eval.Eval.__hx_ctor_verb_eval_Eval(this);
	}
	
	
	protected static void __hx_ctor_verb_eval_Eval(verb.eval.Eval __hx_this)
	{
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector rationalCurveTangent(verb.core.NurbsCurveData curve, double u)
	{
		//line 33 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> derivs = verb.eval.Eval.rationalCurveDerivatives(curve, u, 1);
		//line 34 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return derivs.__get(1);
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector rationalSurfaceNormal(verb.core.NurbsSurfaceData surface, double u, double v)
	{
		//line 50 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> derivs = verb.eval.Eval.rationalSurfaceDerivatives(surface, u, v, 1);
		//line 51 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return verb.core.Vec.cross(derivs.__get(1).__get(0), derivs.__get(0).__get(1));
	}
	
	
	public static haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> rationalSurfaceDerivatives(verb.core.NurbsSurfaceData surface, double u, double v, java.lang.Object numDerivs)
	{
		//line 70 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 70 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int numDerivs1 = ( (haxe.lang.Runtime.eq(numDerivs, null)) ? (1) : (((int) (haxe.lang.Runtime.toInt(numDerivs)) )) );
			//line 72 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> ders = verb.eval.Eval.surfaceDerivatives(surface, u, v, numDerivs1);
			//line 72 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> Aders = verb.eval.Eval.rational2d(ders);
			//line 72 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> wders = verb.eval.Eval.weight2d(ders);
			//line 72 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> SKL = new haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>();
			//line 72 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int dim = verb.core._Data.Vector_Impl_.get_length(Aders.__get(0).__get(0));
			//line 78 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 78 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 78 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = ( numDerivs1 + 1 );
				//line 78 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 78 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int k = _g++;
					//line 79 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					SKL.push(new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>());
					//line 81 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 81 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g2 = 0;
						//line 81 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g3 = ( ( numDerivs1 - k ) + 1 );
						//line 81 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						while (( _g2 < _g3 ))
						{
							//line 81 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int l = _g2++;
							//line 82 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							org.apache.commons.math3.linear.ArrayRealVector v1 = Aders.__get(k).__get(l);
							//line 84 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							{
								//line 84 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g4 = 1;
								//line 84 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g5 = ( l + 1 );
								//line 84 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								while (( _g4 < _g5 ))
								{
									//line 84 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									int j = _g4++;
									//line 85 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									verb.core.Vec.subMulMutate(v1, ( verb.core.Binomial.get(l, j) * ((org.apache.commons.math3.linear.ArrayRealVector) (wders.__get(0)) ).getEntry(((int) (j) )) ), SKL.__get(k).__get(( l - j )));
								}
								
							}
							
							//line 88 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							{
								//line 88 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g6 = 1;
								//line 88 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g7 = ( k + 1 );
								//line 88 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								while (( _g6 < _g7 ))
								{
									//line 88 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									int i = _g6++;
									//line 89 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									verb.core.Vec.subMulMutate(v1, ( verb.core.Binomial.get(k, i) * ((org.apache.commons.math3.linear.ArrayRealVector) (wders.__get(i)) ).getEntry(((int) (0) )) ), SKL.__get(( k - i )).__get(l));
									//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									org.apache.commons.math3.linear.ArrayRealVector v2 = verb.core.Vec.zeros1d(dim);
									//line 93 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									{
										//line 93 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
										int _g8 = 1;
										//line 93 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
										int _g9 = ( l + 1 );
										//line 93 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
										while (( _g8 < _g9 ))
										{
											//line 93 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
											int j1 = _g8++;
											//line 94 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
											verb.core.Vec.addMulMutate(v2, ( verb.core.Binomial.get(l, j1) * ((org.apache.commons.math3.linear.ArrayRealVector) (wders.__get(i)) ).getEntry(((int) (j1) )) ), SKL.__get(( k - i )).__get(( l - j1 )));
										}
										
									}
									
									//line 97 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									verb.core.Vec.subMulMutate(v1, verb.core.Binomial.get(k, i), v2);
								}
								
							}
							
							//line 100 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							verb.core.Vec.mulMutate(( 1 / ((org.apache.commons.math3.linear.ArrayRealVector) (wders.__get(0)) ).getEntry(((int) (0) )) ), v1);
							//line 101 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							SKL.__get(k).push(v1);
						}
						
					}
					
				}
				
			}
			
			//line 105 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return SKL;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 67 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector rationalSurfacePoint(verb.core.NurbsSurfaceData surface, double u, double v)
	{
		//line 126 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return verb.eval.Eval.dehomogenize(verb.eval.Eval.surfacePoint(surface, u, v));
	}
	
	
	public static haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> rationalCurveDerivatives(verb.core.NurbsCurveData curve, double u, java.lang.Object numDerivs)
	{
		//line 141 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 141 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int numDerivs1 = ( (haxe.lang.Runtime.eq(numDerivs, null)) ? (1) : (((int) (haxe.lang.Runtime.toInt(numDerivs)) )) );
			//line 143 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> ders = verb.eval.Eval.curveDerivatives(curve, u, numDerivs1);
			//line 143 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> Aders = verb.eval.Eval.rational1d(ders);
			//line 143 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector wders = verb.eval.Eval.weight1d(ders);
			//line 143 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int k = 0;
			//line 143 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int i = 0;
			//line 143 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> CK = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{});
			//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = ( numDerivs1 + 1 );
				//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 150 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int k1 = _g++;
					//line 151 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					org.apache.commons.math3.linear.ArrayRealVector v = Aders.__get(k1);
					//line 153 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 153 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g2 = 1;
						//line 153 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g3 = ( k1 + 1 );
						//line 153 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						while (( _g2 < _g3 ))
						{
							//line 153 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int i1 = _g2++;
							//line 154 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							verb.core.Vec.subMulMutate(v, ( verb.core.Binomial.get(k1, i1) * ((org.apache.commons.math3.linear.ArrayRealVector) (wders) ).getEntry(((int) (i1) )) ), CK.__get(( k1 - i1 )));
						}
						
					}
					
					//line 157 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					verb.core.Vec.mulMutate(( 1 / ((org.apache.commons.math3.linear.ArrayRealVector) (wders) ).getEntry(((int) (0) )) ), v);
					//line 158 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					CK.push(v);
				}
				
			}
			
			//line 161 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return CK;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 141 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector rationalCurvePoint(verb.core.NurbsCurveData curve, double u)
	{
		//line 180 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return verb.eval.Eval.dehomogenize(verb.eval.Eval.curvePoint(curve, u));
	}
	
	
	public static haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> surfaceDerivatives(verb.core.NurbsSurfaceData surface, double u, double v, int numDerivs)
	{
		//line 198 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		int n = ( ( verb.core._Data.Vector_Impl_.get_length(surface.knotsU) - surface.degreeU ) - 2 );
		//line 198 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		int m = ( ( verb.core._Data.Vector_Impl_.get_length(surface.knotsV) - surface.degreeV ) - 2 );
		//line 201 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return verb.eval.Eval.surfaceDerivativesGivenNM(n, m, surface, u, v, numDerivs);
	}
	
	
	public static haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> surfaceDerivativesGivenNM(int n, int m, verb.core.NurbsSurfaceData surface, double u, double v, int numDerivs)
	{
		//line 225 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 227 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int degreeU = surface.degreeU;
			//line 227 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int degreeV = surface.degreeV;
			//line 227 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> controlPoints = surface.controlPoints;
			//line 227 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector knotsU = surface.knotsU;
			//line 227 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector knotsV = surface.knotsV;
			//line 233 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			if ((  ! (verb.eval.Eval.areValidRelations(degreeU, controlPoints.length, verb.core._Data.Vector_Impl_.get_length(knotsU)))  ||  ! (verb.eval.Eval.areValidRelations(degreeV, controlPoints.__get(0).length, verb.core._Data.Vector_Impl_.get_length(knotsV)))  )) 
			{
				//line 236 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Invalid relations between control points, knot vector, and n")) );
			}
			
			//line 239 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int dim = verb.core._Data.Vector_Impl_.get_length(controlPoints.__get(0).__get(0));
			//line 239 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int du = ( (( numDerivs < degreeU )) ? (numDerivs) : (degreeU) );
			//line 239 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int dv = ( (( numDerivs < degreeV )) ? (numDerivs) : (degreeV) );
			//line 239 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> SKL = verb.core.Vec.zeros3d(( numDerivs + 1 ), ( numDerivs + 1 ), dim);
			//line 239 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int knotSpan_index_u = verb.eval.Eval.knotSpanGivenN(n, degreeU, u, knotsU);
			//line 239 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int knotSpan_index_v = verb.eval.Eval.knotSpanGivenN(m, degreeV, v, knotsV);
			//line 239 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> uders = verb.eval.Eval.derivativeBasisFunctionsGivenNI(knotSpan_index_u, u, degreeU, n, knotsU);
			//line 239 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> vders = verb.eval.Eval.derivativeBasisFunctionsGivenNI(knotSpan_index_v, v, degreeV, m, knotsV);
			//line 239 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> temp = verb.core.Vec.zeros2d(( degreeV + 1 ), dim);
			//line 239 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int dd = 0;
			//line 250 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 250 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 250 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = ( du + 1 );
				//line 250 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 250 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int k = _g++;
					//line 251 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 251 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g2 = 0;
						//line 251 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g3 = ( degreeV + 1 );
						//line 251 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						while (( _g2 < _g3 ))
						{
							//line 251 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int s = _g2++;
							//line 252 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							temp.__set(s, verb.core.Vec.zeros1d(dim));
							//line 254 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							{
								//line 254 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g4 = 0;
								//line 254 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g5 = ( degreeU + 1 );
								//line 254 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								while (( _g4 < _g5 ))
								{
									//line 254 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									int r = _g4++;
									//line 255 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									verb.core.Vec.addMulMutate(temp.__get(s), ((org.apache.commons.math3.linear.ArrayRealVector) (uders.__get(k)) ).getEntry(((int) (r) )), controlPoints.__get(( ( knotSpan_index_u - degreeU ) + r )).__get(( ( knotSpan_index_v - degreeV ) + s )));
								}
								
							}
							
						}
						
					}
					
					//line 259 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int nk = ( numDerivs - k );
					//line 260 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					dd = ( (( nk < dv )) ? (nk) : (dv) );
					//line 262 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 262 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g6 = 0;
						//line 262 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g7 = ( dd + 1 );
						//line 262 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						while (( _g6 < _g7 ))
						{
							//line 262 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int l = _g6++;
							//line 263 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							SKL.__get(k).__set(l, verb.core.Vec.zeros1d(dim));
							//line 265 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							{
								//line 265 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g8 = 0;
								//line 265 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g9 = ( degreeV + 1 );
								//line 265 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								while (( _g8 < _g9 ))
								{
									//line 265 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									int s1 = _g8++;
									//line 266 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									verb.core.Vec.addMulMutate(SKL.__get(k).__get(l), ((org.apache.commons.math3.linear.ArrayRealVector) (vders.__get(l)) ).getEntry(((int) (s1) )), temp.__get(s1));
								}
								
							}
							
						}
						
					}
					
				}
				
			}
			
			//line 271 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return SKL;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 220 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector surfacePoint(verb.core.NurbsSurfaceData surface, double u, double v)
	{
		//line 288 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		int n = ( ( verb.core._Data.Vector_Impl_.get_length(surface.knotsU) - surface.degreeU ) - 2 );
		//line 288 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		int m = ( ( verb.core._Data.Vector_Impl_.get_length(surface.knotsV) - surface.degreeV ) - 2 );
		//line 291 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return verb.eval.Eval.surfacePointGivenNM(n, m, surface, u, v);
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector surfacePointGivenNM(int n, int m, verb.core.NurbsSurfaceData surface, double u, double v)
	{
		//line 310 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 312 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int degreeU = surface.degreeU;
			//line 312 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int degreeV = surface.degreeV;
			//line 312 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> controlPoints = surface.controlPoints;
			//line 312 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector knotsU = surface.knotsU;
			//line 312 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector knotsV = surface.knotsV;
			//line 318 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			if ((  ! (verb.eval.Eval.areValidRelations(degreeU, controlPoints.length, verb.core._Data.Vector_Impl_.get_length(knotsU)))  ||  ! (verb.eval.Eval.areValidRelations(degreeV, controlPoints.__get(0).length, verb.core._Data.Vector_Impl_.get_length(knotsV)))  )) 
			{
				//line 321 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Invalid relations between control points, knot vector, and n")) );
			}
			
			//line 324 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int dim = verb.core._Data.Vector_Impl_.get_length(controlPoints.__get(0).__get(0));
			//line 324 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int knotSpan_index_u = verb.eval.Eval.knotSpanGivenN(n, degreeU, u, knotsU);
			//line 324 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int knotSpan_index_v = verb.eval.Eval.knotSpanGivenN(m, degreeV, v, knotsV);
			//line 324 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector u_basis_vals = verb.eval.Eval.basisFunctionsGivenKnotSpanIndex(knotSpan_index_u, u, degreeU, knotsU);
			//line 324 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector v_basis_vals = verb.eval.Eval.basisFunctionsGivenKnotSpanIndex(knotSpan_index_v, v, degreeV, knotsV);
			//line 324 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int uind = ( knotSpan_index_u - degreeU );
			//line 324 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int vind = knotSpan_index_v;
			//line 324 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector position = verb.core.Vec.zeros1d(dim);
			//line 324 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector temp = verb.core.Vec.zeros1d(dim);
			//line 334 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 334 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 334 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = ( degreeV + 1 );
				//line 334 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 334 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int l = _g++;
					//line 336 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					temp = verb.core.Vec.zeros1d(dim);
					//line 337 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					vind = ( ( knotSpan_index_v - degreeV ) + l );
					//line 340 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 340 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g2 = 0;
						//line 340 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g3 = ( degreeU + 1 );
						//line 340 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						while (( _g2 < _g3 ))
						{
							//line 340 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int k = _g2++;
							//line 341 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							verb.core.Vec.addMulMutate(temp, ((org.apache.commons.math3.linear.ArrayRealVector) (u_basis_vals) ).getEntry(((int) (k) )), controlPoints.__get(( uind + k )).__get(vind));
						}
						
					}
					
					//line 345 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					verb.core.Vec.addMulMutate(position, ((org.apache.commons.math3.linear.ArrayRealVector) (v_basis_vals) ).getEntry(((int) (l) )), temp);
				}
				
			}
			
			//line 348 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return position;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 310 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> curveRegularSamplePoints(verb.core.NurbsCurveData crv, int divs)
	{
		//line 351 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 354 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> derivs = verb.eval.Eval.curveDerivatives(crv, ((org.apache.commons.math3.linear.ArrayRealVector) (crv.knots) ).getEntry(((int) (0) )), crv.degree);
			//line 358 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double t = ( 1.0 / divs );
			//line 359 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double temp = ( t * t );
			//line 361 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector f = derivs.__get(0);
			//line 362 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector fd = verb.core.Vec.mul(t, derivs.__get(1));
			//line 363 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector fdd_per2 = verb.core.Vec.mul(( temp * 0.5 ), derivs.__get(2));
			//line 364 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector fddd_per2 = verb.core.Vec.mul(( ( temp * t ) * 0.5 ), derivs.__get(3));
			//line 366 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector fdd = verb.core.Vec.add(fdd_per2, fdd_per2);
			//line 367 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector fddd = verb.core.Vec.add(fddd_per2, fddd_per2);
			//line 368 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector fddd_per6 = verb.core.Vec.mul(0.33333333333333331, fddd_per2);
			//line 371 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> pts = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{});
			//line 373 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 373 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 373 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = ( divs + 1 );
				//line 373 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 373 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int i = _g++;
					//line 375 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					pts.push(verb.eval.Eval.dehomogenize(f));
					//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					verb.core.Vec.addAllMutate(new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{f, fd, fdd_per2, fddd_per6}));
					//line 378 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					verb.core.Vec.addAllMutate(new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{fd, fdd, fddd_per2}));
					//line 379 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					verb.core.Vec.addAllMutate(new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{fdd, fddd}));
					//line 380 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					verb.core.Vec.addAllMutate(new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{fdd_per2, fddd_per2}));
				}
				
			}
			
			//line 383 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return pts;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 351 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> curveRegularSamplePoints2(verb.core.NurbsCurveData crv, int divs)
	{
		//line 387 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 390 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> derivs = verb.eval.Eval.curveDerivatives(crv, ((org.apache.commons.math3.linear.ArrayRealVector) (crv.knots) ).getEntry(((int) (0) )), crv.degree);
			//line 394 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double t = ( 1.0 / divs );
			//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double temp = ( t * t );
			//line 397 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector f = derivs.__get(0);
			//line 398 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector fd = verb.core.Vec.mul(t, derivs.__get(1));
			//line 399 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector fdd_per2 = verb.core.Vec.mul(( temp * 0.5 ), derivs.__get(2));
			//line 400 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector fddd_per2 = verb.core.Vec.mul(( ( temp * t ) * 0.5 ), derivs.__get(3));
			//line 402 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector fdd = verb.core.Vec.add(fdd_per2, fdd_per2);
			//line 403 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector fddd = verb.core.Vec.add(fddd_per2, fddd_per2);
			//line 404 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector fddd_per6 = verb.core.Vec.mul(0.33333333333333331, fddd_per2);
			//line 407 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> pts = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{});
			//line 409 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 409 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 409 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = ( divs + 1 );
				//line 409 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 409 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int i = _g++;
					//line 410 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					pts.push(verb.eval.Eval.dehomogenize(f));
					//line 412 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					verb.core.Vec.addAllMutate(new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{f, fd, fdd_per2, fddd_per6}));
					//line 413 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					verb.core.Vec.addAllMutate(new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{fd, fdd, fddd_per2}));
					//line 414 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					verb.core.Vec.addAllMutate(new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{fdd, fddd}));
					//line 415 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					verb.core.Vec.addAllMutate(new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{fdd_per2, fddd_per2}));
				}
				
			}
			
			//line 418 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return pts;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 387 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<haxe.root.Array<haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>>> rationalSurfaceRegularSampleDerivatives(verb.core.NurbsSurfaceData surface, int divsU, int divsV, int numDerivs)
	{
		//line 435 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 437 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<haxe.root.Array<haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>>> allders = verb.eval.Eval.surfaceRegularSampleDerivatives(surface, divsU, divsV, numDerivs);
			//line 439 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<haxe.root.Array<haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>>> allratders = new haxe.root.Array<haxe.root.Array<haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>>>(new haxe.root.Array[]{});
			//line 440 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int divsU1 = ( divsU + 1 );
			//line 441 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int divsV1 = ( divsV + 1 );
			//line 442 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int numDerivs1 = ( numDerivs + 1 );
			//line 444 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 444 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 444 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = divsU1;
				//line 444 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 444 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int i = _g++;
					//line 446 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					haxe.root.Array<haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>> rowders = new haxe.root.Array<haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>>(new haxe.root.Array[]{});
					//line 447 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					allratders.push(rowders);
					//line 449 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 449 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g2 = 0;
						//line 449 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g3 = divsV1;
						//line 449 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						while (( _g2 < _g3 ))
						{
							//line 449 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int j = _g2++;
							//line 451 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> ders = allders.__get(i).__get(j);
							//line 451 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> Aders = verb.eval.Eval.rational2d(ders);
							//line 451 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> wders = verb.eval.Eval.weight2d(ders);
							//line 451 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> SKL = new haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>();
							//line 451 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int dim = verb.core._Data.Vector_Impl_.get_length(Aders.__get(0).__get(0));
							//line 457 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							{
								//line 457 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g4 = 0;
								//line 457 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g5 = numDerivs1;
								//line 457 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								while (( _g4 < _g5 ))
								{
									//line 457 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									int k = _g4++;
									//line 458 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									SKL.push(new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>());
									//line 460 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									{
										//line 460 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
										int _g6 = 0;
										//line 460 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
										int _g7 = ( numDerivs1 - k );
										//line 460 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
										while (( _g6 < _g7 ))
										{
											//line 460 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
											int l = _g6++;
											//line 461 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
											org.apache.commons.math3.linear.ArrayRealVector v = Aders.__get(k).__get(l);
											//line 463 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
											{
												//line 463 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
												int _g8 = 1;
												//line 463 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
												int _g9 = ( l + 1 );
												//line 463 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
												while (( _g8 < _g9 ))
												{
													//line 463 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
													int j1 = _g8++;
													//line 464 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
													verb.core.Vec.subMulMutate(v, ( verb.core.Binomial.get(l, j1) * ((org.apache.commons.math3.linear.ArrayRealVector) (wders.__get(0)) ).getEntry(((int) (j1) )) ), SKL.__get(k).__get(( l - j1 )));
												}
												
											}
											
											//line 467 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
											{
												//line 467 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
												int _g10 = 1;
												//line 467 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
												int _g11 = ( k + 1 );
												//line 467 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
												while (( _g10 < _g11 ))
												{
													//line 467 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
													int i1 = _g10++;
													//line 468 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
													verb.core.Vec.subMulMutate(v, ( verb.core.Binomial.get(k, i1) * ((org.apache.commons.math3.linear.ArrayRealVector) (wders.__get(i1)) ).getEntry(((int) (0) )) ), SKL.__get(( k - i1 )).__get(l));
													//line 470 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
													org.apache.commons.math3.linear.ArrayRealVector v2 = verb.core.Vec.zeros1d(dim);
													//line 472 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
													{
														//line 472 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
														int _g12 = 1;
														//line 472 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
														int _g13 = ( l + 1 );
														//line 472 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
														while (( _g12 < _g13 ))
														{
															//line 472 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
															int j2 = _g12++;
															//line 473 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
															verb.core.Vec.addMulMutate(v2, ( verb.core.Binomial.get(l, j2) * ((org.apache.commons.math3.linear.ArrayRealVector) (wders.__get(i1)) ).getEntry(((int) (j2) )) ), SKL.__get(( k - i1 )).__get(( l - j2 )));
														}
														
													}
													
													//line 476 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
													verb.core.Vec.subMulMutate(v, verb.core.Binomial.get(k, i1), v2);
												}
												
											}
											
											//line 480 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
											verb.core.Vec.mulMutate(( 1 / ((org.apache.commons.math3.linear.ArrayRealVector) (wders.__get(0)) ).getEntry(((int) (0) )) ), v);
											//line 481 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
											SKL.__get(k).push(v);
										}
										
									}
									
								}
								
							}
							
							//line 485 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							rowders.push(SKL);
						}
						
					}
					
				}
				
			}
			
			//line 489 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return allratders;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 435 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<haxe.root.Array<haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>>> surfaceRegularSampleDerivatives(verb.core.NurbsSurfaceData surface, int divsU, int divsV, int numDerivs)
	{
		//line 505 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 507 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int degreeU = surface.degreeU;
			//line 507 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int degreeV = surface.degreeV;
			//line 507 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> controlPoints = surface.controlPoints;
			//line 507 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector knotsU = surface.knotsU;
			//line 507 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector knotsV = surface.knotsV;
			//line 513 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int dim = verb.core._Data.Vector_Impl_.get_length(controlPoints.__get(0).__get(0));
			//line 513 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double spanU = ( (( ((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).getEntry(((int) (( ((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).getDimension() - 1 )) )) - ((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).getEntry(((int) (0) )) )) / divsU );
			//line 513 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double spanV = ( (( ((org.apache.commons.math3.linear.ArrayRealVector) (knotsV) ).getEntry(((int) (( ((org.apache.commons.math3.linear.ArrayRealVector) (knotsV) ).getDimension() - 1 )) )) - ((org.apache.commons.math3.linear.ArrayRealVector) (knotsV) ).getEntry(((int) (0) )) )) / divsV );
			//line 513 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			verb.core.Pair<haxe.root.Array<java.lang.Object>, haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>> knotSpansBasesU = verb.eval.Eval.regularlySpacedDerivativeBasisFunctions(degreeU, knotsU, divsU);
			//line 513 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<java.lang.Object> knotSpansU = knotSpansBasesU.item0;
			//line 513 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> basesU = knotSpansBasesU.item1;
			//line 513 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			verb.core.Pair<haxe.root.Array<java.lang.Object>, haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>> knotSpansBasesV = verb.eval.Eval.regularlySpacedDerivativeBasisFunctions(degreeV, knotsV, divsV);
			//line 513 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<java.lang.Object> knotSpansV = knotSpansBasesV.item0;
			//line 513 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> basesV = knotSpansBasesV.item1;
			//line 513 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<haxe.root.Array<haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>>> pts = new haxe.root.Array<haxe.root.Array<haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>>>(new haxe.root.Array[]{});
			//line 513 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int divsU1 = ( divsU + 1 );
			//line 513 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int divsV1 = ( divsV + 1 );
			//line 526 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 526 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 526 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = divsU1;
				//line 526 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 526 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int i = _g++;
					//line 527 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					haxe.root.Array<haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>> ptsi = new haxe.root.Array<haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>>(new haxe.root.Array[]{});
					//line 528 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					pts.push(ptsi);
					//line 530 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 530 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g2 = 0;
						//line 530 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g3 = divsV1;
						//line 530 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						while (( _g2 < _g3 ))
						{
							//line 530 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int j = _g2++;
							//line 531 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							ptsi.push(verb.eval.Eval.surfaceDerivativesGivenBasesKnotSpans(degreeU, degreeV, controlPoints, ((int) (haxe.lang.Runtime.toInt(knotSpansU.__get(i))) ), ((int) (haxe.lang.Runtime.toInt(knotSpansV.__get(j))) ), basesU.__get(i), basesV.__get(j), dim, numDerivs));
						}
						
					}
					
				}
				
			}
			
			//line 535 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return pts;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 505 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> rationalSurfaceRegularSamplePoints(verb.core.NurbsSurfaceData surface, int divsU, int divsV)
	{
		//line 552 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return verb.eval.Eval.dehomogenize2d(verb.eval.Eval.surfaceRegularSamplePoints(surface, divsU, divsV));
	}
	
	
	public static haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> surfaceRegularSamplePoints(verb.core.NurbsSurfaceData surface, int divsU, int divsV)
	{
		//line 568 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 570 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int degreeU = surface.degreeU;
			//line 570 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int degreeV = surface.degreeV;
			//line 570 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> controlPoints = surface.controlPoints;
			//line 570 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector knotsU = surface.knotsU;
			//line 570 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector knotsV = surface.knotsV;
			//line 576 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int dim = verb.core._Data.Vector_Impl_.get_length(controlPoints.__get(0).__get(0));
			//line 576 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double spanU = ( (( ((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).getEntry(((int) (( ((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).getDimension() - 1 )) )) - ((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).getEntry(((int) (0) )) )) / divsU );
			//line 576 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double spanV = ( (( ((org.apache.commons.math3.linear.ArrayRealVector) (knotsV) ).getEntry(((int) (( ((org.apache.commons.math3.linear.ArrayRealVector) (knotsV) ).getDimension() - 1 )) )) - ((org.apache.commons.math3.linear.ArrayRealVector) (knotsV) ).getEntry(((int) (0) )) )) / divsV );
			//line 576 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			verb.core.Pair<haxe.root.Array<java.lang.Object>, haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> knotSpansBasesU = verb.eval.Eval.regularlySpacedBasisFunctions(degreeU, knotsU, divsU);
			//line 576 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<java.lang.Object> knotSpansU = knotSpansBasesU.item0;
			//line 576 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> basesU = knotSpansBasesU.item1;
			//line 576 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			verb.core.Pair<haxe.root.Array<java.lang.Object>, haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> knotSpansBasesV = verb.eval.Eval.regularlySpacedBasisFunctions(degreeV, knotsV, divsV);
			//line 576 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<java.lang.Object> knotSpansV = knotSpansBasesV.item0;
			//line 576 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> basesV = knotSpansBasesV.item1;
			//line 576 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> pts = new haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>(new haxe.root.Array[]{});
			//line 576 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int divsU1 = ( divsU + 1 );
			//line 576 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int divsV1 = ( divsV + 1 );
			//line 589 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 589 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 589 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = divsU1;
				//line 589 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 589 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int i = _g++;
					//line 590 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> ptsi = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{});
					//line 591 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					pts.push(ptsi);
					//line 593 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 593 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g2 = 0;
						//line 593 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g3 = divsV1;
						//line 593 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						while (( _g2 < _g3 ))
						{
							//line 593 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int j = _g2++;
							//line 594 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							ptsi.push(verb.eval.Eval.surfacePointGivenBasesKnotSpans(degreeU, degreeV, controlPoints, ((int) (haxe.lang.Runtime.toInt(knotSpansU.__get(i))) ), ((int) (haxe.lang.Runtime.toInt(knotSpansV.__get(j))) ), basesU.__get(i), basesV.__get(j), dim));
						}
						
					}
					
				}
				
			}
			
			//line 598 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return pts;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 568 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static verb.core.Pair<haxe.root.Array<java.lang.Object>, haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> regularlySpacedBasisFunctions(int degree, org.apache.commons.math3.linear.ArrayRealVector knots, int divs)
	{
		//line 601 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 603 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int n = ( ( verb.core._Data.Vector_Impl_.get_length(knots) - degree ) - 2 );
			//line 604 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double span = ( (( ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (( ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getDimension() - 1 )) )) - ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (0) )) )) / divs );
			//line 606 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> bases = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{});
			//line 607 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<java.lang.Object> knotspans = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
			//line 608 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double u = ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (0) ));
			//line 609 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int knotIndex = verb.eval.Eval.knotSpanGivenN(n, degree, u, knots);
			//line 610 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int div1 = ( divs + 1 );
			//line 613 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 613 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 613 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = div1;
				//line 613 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 613 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int i = _g++;
					//line 614 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					while (( u >= ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (( knotIndex + 1 )) )) ))
					{
						//line 614 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						 ++ knotIndex;
					}
					
					//line 615 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					knotspans.push(knotIndex);
					//line 616 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					bases.push(verb.eval.Eval.basisFunctionsGivenKnotSpanIndex(knotIndex, u, degree, knots));
					//line 617 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					u += span;
				}
				
			}
			
			//line 620 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return new verb.core.Pair<haxe.root.Array<java.lang.Object>, haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>(knotspans, bases);
		}
		catch (java.lang.Throwable typedException)
		{
			//line 601 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static verb.core.Pair<haxe.root.Array<java.lang.Object>, haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>> regularlySpacedDerivativeBasisFunctions(int degree, org.apache.commons.math3.linear.ArrayRealVector knots, int divs)
	{
		//line 623 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 625 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int n = ( ( verb.core._Data.Vector_Impl_.get_length(knots) - degree ) - 2 );
			//line 626 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double span = ( (( ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (( ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getDimension() - 1 )) )) - ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (0) )) )) / divs );
			//line 628 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> bases = new haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>(new haxe.root.Array[]{});
			//line 629 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<java.lang.Object> knotspans = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
			//line 630 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double u = ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (0) ));
			//line 631 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int knotIndex = verb.eval.Eval.knotSpanGivenN(n, degree, u, knots);
			//line 632 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int div1 = ( divs + 1 );
			//line 635 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 635 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 635 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = div1;
				//line 635 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 635 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int i = _g++;
					//line 636 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					while (( u >= ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (( knotIndex + 1 )) )) ))
					{
						//line 636 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						 ++ knotIndex;
					}
					
					//line 637 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					knotspans.push(knotIndex);
					//line 638 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					bases.push(verb.eval.Eval.derivativeBasisFunctionsGivenNI(knotIndex, u, degree, n, knots));
					//line 639 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					u += span;
				}
				
			}
			
			//line 642 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return new verb.core.Pair<haxe.root.Array<java.lang.Object>, haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>>(knotspans, bases);
		}
		catch (java.lang.Throwable typedException)
		{
			//line 623 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector surfacePointGivenBasesKnotSpans(int degreeU, int degreeV, haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> controlPoints, int knotSpanU, int knotSpanV, org.apache.commons.math3.linear.ArrayRealVector basesU, org.apache.commons.math3.linear.ArrayRealVector basesV, int dim)
	{
		//line 652 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 654 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector position = verb.core.Vec.zeros1d(dim);
			//line 654 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector temp = null;
			//line 658 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int uind = ( knotSpanU - degreeU );
			//line 659 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int vind = ( knotSpanV - degreeV );
			//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = ( degreeV + 1 );
				//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int l = _g++;
					//line 663 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					temp = verb.core.Vec.zeros1d(dim);
					//line 665 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 665 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g2 = 0;
						//line 665 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g3 = ( degreeU + 1 );
						//line 665 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						while (( _g2 < _g3 ))
						{
							//line 665 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int k = _g2++;
							//line 666 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							verb.core.Vec.addMulMutate(temp, ((org.apache.commons.math3.linear.ArrayRealVector) (basesU) ).getEntry(((int) (k) )), controlPoints.__get(( uind + k )).__get(vind));
						}
						
					}
					
					//line 669 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					 ++ vind;
					//line 671 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					verb.core.Vec.addMulMutate(position, ((org.apache.commons.math3.linear.ArrayRealVector) (basesV) ).getEntry(((int) (l) )), temp);
				}
				
			}
			
			//line 674 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return position;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 645 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> surfaceDerivativesGivenBasesKnotSpans(int degreeU, int degreeV, haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> controlPoints, int knotSpanU, int knotSpanV, haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> basesU, haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> basesV, int dim, int numDerivs)
	{
		//line 685 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 687 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int dim1 = verb.core._Data.Vector_Impl_.get_length(controlPoints.__get(0).__get(0));
			//line 687 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int du = ( (( numDerivs < degreeU )) ? (numDerivs) : (degreeU) );
			//line 687 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int dv = ( (( numDerivs < degreeV )) ? (numDerivs) : (degreeV) );
			//line 687 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> SKL = verb.core.Vec.zeros3d(( du + 1 ), ( dv + 1 ), dim1);
			//line 687 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> temp = verb.core.Vec.zeros2d(( degreeV + 1 ), dim1);
			//line 687 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int dd = 0;
			//line 694 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 694 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 694 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = ( du + 1 );
				//line 694 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 694 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int k = _g++;
					//line 695 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 695 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g2 = 0;
						//line 695 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g3 = ( degreeV + 1 );
						//line 695 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						while (( _g2 < _g3 ))
						{
							//line 695 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int s = _g2++;
							//line 696 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							temp.__set(s, verb.core.Vec.zeros1d(dim1));
							//line 698 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							{
								//line 698 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g4 = 0;
								//line 698 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g5 = ( degreeU + 1 );
								//line 698 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								while (( _g4 < _g5 ))
								{
									//line 698 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									int r = _g4++;
									//line 699 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									verb.core.Vec.addMulMutate(temp.__get(s), ((org.apache.commons.math3.linear.ArrayRealVector) (basesU.__get(k)) ).getEntry(((int) (r) )), controlPoints.__get(( ( knotSpanU - degreeU ) + r )).__get(( ( knotSpanV - degreeV ) + s )));
								}
								
							}
							
						}
						
					}
					
					//line 703 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int nk = ( numDerivs - k );
					//line 704 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					dd = ( (( nk < dv )) ? (nk) : (dv) );
					//line 706 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 706 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g6 = 0;
						//line 706 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g7 = ( dd + 1 );
						//line 706 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						while (( _g6 < _g7 ))
						{
							//line 706 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int l = _g6++;
							//line 707 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							SKL.__get(k).__set(l, verb.core.Vec.zeros1d(dim1));
							//line 709 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							{
								//line 709 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g8 = 0;
								//line 709 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g9 = ( degreeV + 1 );
								//line 709 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								while (( _g8 < _g9 ))
								{
									//line 709 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									int s1 = _g8++;
									//line 710 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									verb.core.Vec.addMulMutate(SKL.__get(k).__get(l), ((org.apache.commons.math3.linear.ArrayRealVector) (basesV.__get(l)) ).getEntry(((int) (s1) )), temp.__get(s1));
								}
								
							}
							
						}
						
					}
					
				}
				
			}
			
			//line 715 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return SKL;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 677 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> curveDerivatives(verb.core.NurbsCurveData crv, double u, int numDerivs)
	{
		//line 732 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		int n = ( ( verb.core._Data.Vector_Impl_.get_length(crv.knots) - crv.degree ) - 2 );
		//line 733 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return verb.eval.Eval.curveDerivativesGivenN(n, crv, u, numDerivs);
	}
	
	
	public static haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> curveDerivativesGivenN(int n, verb.core.NurbsCurveData curve, double u, int numDerivs)
	{
		//line 750 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 752 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int degree = curve.degree;
			//line 752 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> controlPoints = curve.controlPoints;
			//line 752 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector knots = curve.knots;
			//line 756 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			if ( ! (verb.eval.Eval.areValidRelations(degree, controlPoints.length, verb.core._Data.Vector_Impl_.get_length(knots))) ) 
			{
				//line 757 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Invalid relations between control points, knot vector, and n")) );
			}
			
			//line 760 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int dim = verb.core._Data.Vector_Impl_.get_length(controlPoints.__get(0));
			//line 760 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int du = ( (( numDerivs < degree )) ? (numDerivs) : (degree) );
			//line 760 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> CK = verb.core.Vec.zeros2d(( numDerivs + 1 ), dim);
			//line 760 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int knotSpan_index = verb.eval.Eval.knotSpanGivenN(n, degree, u, knots);
			//line 760 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> nders = verb.eval.Eval.derivativeBasisFunctionsGivenNI(knotSpan_index, u, degree, du, knots);
			//line 760 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int k = 0;
			//line 760 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int j = 0;
			//line 768 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 768 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 768 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = ( du + 1 );
				//line 768 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 768 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int k1 = _g++;
					//line 769 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 769 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g2 = 0;
						//line 769 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g3 = ( degree + 1 );
						//line 769 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						while (( _g2 < _g3 ))
						{
							//line 769 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int j1 = _g2++;
							//line 770 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							verb.core.Vec.addMulMutate(CK.__get(k1), ((org.apache.commons.math3.linear.ArrayRealVector) (nders.__get(k1)) ).getEntry(((int) (j1) )), controlPoints.__get(( ( knotSpan_index - degree ) + j1 )));
						}
						
					}
					
				}
				
			}
			
			//line 773 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return CK;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 750 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector curvePoint(verb.core.NurbsCurveData curve, double u)
	{
		//line 788 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		int n = ( ( verb.core._Data.Vector_Impl_.get_length(curve.knots) - curve.degree ) - 2 );
		//line 789 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return verb.eval.Eval.curvePointGivenN(n, curve, u);
	}
	
	
	public static boolean areValidRelations(int degree, int num_controlPoints, int knots_length)
	{
		//line 806 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return ( ( ( ( num_controlPoints + degree ) + 1 ) - knots_length ) == 0 );
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector curvePointGivenN(int n, verb.core.NurbsCurveData curve, double u)
	{
		//line 822 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 824 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int degree = curve.degree;
			//line 824 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> controlPoints = curve.controlPoints;
			//line 824 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector knots = curve.knots;
			//line 828 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			if ( ! (verb.eval.Eval.areValidRelations(degree, controlPoints.length, verb.core._Data.Vector_Impl_.get_length(knots))) ) 
			{
				//line 829 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Invalid relations between control points, knot Array, and n")) );
			}
			
			//line 833 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int knotSpan_index = verb.eval.Eval.knotSpanGivenN(n, degree, u, knots);
			//line 834 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector basis_values = verb.eval.Eval.basisFunctionsGivenKnotSpanIndex(knotSpan_index, u, degree, knots);
			//line 835 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector position = verb.core.Vec.zeros1d(verb.core._Data.Vector_Impl_.get_length(controlPoints.__get(0)));
			//line 837 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 837 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 837 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = ( degree + 1 );
				//line 837 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 837 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int j = _g++;
					//line 838 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					verb.core.Vec.addMulMutate(position, ((org.apache.commons.math3.linear.ArrayRealVector) (basis_values) ).getEntry(((int) (j) )), controlPoints.__get(( ( knotSpan_index - degree ) + j )));
				}
				
			}
			
			//line 841 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return position;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 822 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector volumePoint(verb.core.VolumeData volume, double u, double v, double w)
	{
		//line 858 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		int n = ( ( verb.core._Data.Vector_Impl_.get_length(volume.knotsU) - volume.degreeU ) - 2 );
		//line 858 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		int m = ( ( verb.core._Data.Vector_Impl_.get_length(volume.knotsV) - volume.degreeV ) - 2 );
		//line 858 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		int l = ( ( verb.core._Data.Vector_Impl_.get_length(volume.knotsW) - volume.degreeW ) - 2 );
		//line 862 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return verb.eval.Eval.volumePointGivenNML(volume, n, m, l, u, v, w);
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector volumePointGivenNML(verb.core.VolumeData volume, int n, int m, int l, double u, double v, double w)
	{
		//line 884 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 886 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			if (( (  ! (verb.eval.Eval.areValidRelations(volume.degreeU, volume.controlPoints.length, verb.core._Data.Vector_Impl_.get_length(volume.knotsU)))  ||  ! (verb.eval.Eval.areValidRelations(volume.degreeV, volume.controlPoints.__get(0).length, verb.core._Data.Vector_Impl_.get_length(volume.knotsV)))  ) ||  ! (verb.eval.Eval.areValidRelations(volume.degreeW, volume.controlPoints.__get(0).__get(0).length, verb.core._Data.Vector_Impl_.get_length(volume.knotsW)))  )) 
			{
				//line 889 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Invalid relations between control points and knot vector")) );
			}
			
			//line 892 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>> controlPoints = volume.controlPoints;
			//line 892 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int degreeU = volume.degreeU;
			//line 892 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int degreeV = volume.degreeV;
			//line 892 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int degreeW = volume.degreeW;
			//line 892 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector knotsU = volume.knotsU;
			//line 892 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector knotsV = volume.knotsV;
			//line 892 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector knotsW = volume.knotsW;
			//line 900 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int dim = verb.core._Data.Vector_Impl_.get_length(controlPoints.__get(0).__get(0).__get(0));
			//line 900 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int knotSpan_index_u = verb.eval.Eval.knotSpanGivenN(n, degreeU, u, knotsU);
			//line 900 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int knotSpan_index_v = verb.eval.Eval.knotSpanGivenN(m, degreeV, v, knotsV);
			//line 900 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int knotSpan_index_w = verb.eval.Eval.knotSpanGivenN(l, degreeW, w, knotsW);
			//line 900 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector u_basis_vals = verb.eval.Eval.basisFunctionsGivenKnotSpanIndex(knotSpan_index_u, u, degreeU, knotsU);
			//line 900 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector v_basis_vals = verb.eval.Eval.basisFunctionsGivenKnotSpanIndex(knotSpan_index_v, v, degreeV, knotsV);
			//line 900 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector w_basis_vals = verb.eval.Eval.basisFunctionsGivenKnotSpanIndex(knotSpan_index_w, w, degreeW, knotsW);
			//line 900 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int uind = ( knotSpan_index_u - degreeU );
			//line 900 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector position = verb.core.Vec.zeros1d(dim);
			//line 900 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector temp = verb.core.Vec.zeros1d(dim);
			//line 900 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector temp2 = verb.core.Vec.zeros1d(dim);
			//line 912 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 912 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 912 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = ( degreeW + 1 );
				//line 912 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 912 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int i = _g++;
					//line 914 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					temp2 = verb.core.Vec.zeros1d(dim);
					//line 915 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int wind = ( ( knotSpan_index_w - degreeW ) + i );
					//line 917 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 917 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g2 = 0;
						//line 917 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g3 = ( degreeV + 1 );
						//line 917 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						while (( _g2 < _g3 ))
						{
							//line 917 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int j = _g2++;
							//line 919 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							temp = verb.core.Vec.zeros1d(dim);
							//line 920 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int vind = ( ( knotSpan_index_v - degreeV ) + j );
							//line 922 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							{
								//line 922 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g4 = 0;
								//line 922 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g5 = ( degreeU + 1 );
								//line 922 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								while (( _g4 < _g5 ))
								{
									//line 922 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									int k = _g4++;
									//line 923 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									verb.core.Vec.addMulMutate(temp, ((org.apache.commons.math3.linear.ArrayRealVector) (u_basis_vals) ).getEntry(((int) (k) )), controlPoints.__get(( uind + k )).__get(vind).__get(wind));
								}
								
							}
							
							//line 927 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							verb.core.Vec.addMulMutate(temp2, ((org.apache.commons.math3.linear.ArrayRealVector) (v_basis_vals) ).getEntry(((int) (j) )), temp);
						}
						
					}
					
					//line 931 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					verb.core.Vec.addMulMutate(position, ((org.apache.commons.math3.linear.ArrayRealVector) (w_basis_vals) ).getEntry(((int) (i) )), temp2);
				}
				
			}
			
			//line 934 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return position;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 878 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> derivativeBasisFunctions(double u, int degree, org.apache.commons.math3.linear.ArrayRealVector knots)
	{
		//line 951 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		int knotSpan_index = verb.eval.Eval.knotSpan(degree, u, knots);
		//line 951 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		int m = ( verb.core._Data.Vector_Impl_.get_length(knots) - 1 );
		//line 951 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		int n = ( ( m - degree ) - 1 );
		//line 955 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return verb.eval.Eval.derivativeBasisFunctionsGivenNI(knotSpan_index, u, degree, n, knots);
	}
	
	
	public static haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> derivativeBasisFunctionsGivenNI(int knotIndex, double u, int p, int n, org.apache.commons.math3.linear.ArrayRealVector knots)
	{
		//line 975 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 976 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> ndu = verb.core.Vec.zeros2d(( p + 1 ), ( p + 1 ));
			//line 976 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector left = verb.core.Vec.zeros1d(( p + 1 ));
			//line 976 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector right = verb.core.Vec.zeros1d(( p + 1 ));
			//line 976 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double saved = 0.0;
			//line 976 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double temp = 0.0;
			//line 982 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			((org.apache.commons.math3.linear.ArrayRealVector) (ndu.__get(0)) ).setEntry(((int) (0) ), ((double) (1.0) ));
			//line 984 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 984 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 1;
				//line 984 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = ( p + 1 );
				//line 984 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 984 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int j = _g++;
					//line 985 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 985 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						double v = ( u - ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (( ( knotIndex + 1 ) - j )) )) );
						//line 985 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (left) ).setEntry(((int) (j) ), ((double) (v) ));
					}
					
					//line 986 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 986 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						double v1 = ( ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (( knotIndex + j )) )) - u );
						//line 986 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (right) ).setEntry(((int) (j) ), ((double) (v1) ));
					}
					
					//line 987 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					saved = 0.0;
					//line 989 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 989 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g2 = 0;
						//line 989 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g3 = j;
						//line 989 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						while (( _g2 < _g3 ))
						{
							//line 989 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int r = _g2++;
							//line 990 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							{
								//line 990 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								double v2 = ( ((org.apache.commons.math3.linear.ArrayRealVector) (right) ).getEntry(((int) (( r + 1 )) )) + ((org.apache.commons.math3.linear.ArrayRealVector) (left) ).getEntry(((int) (( j - r )) )) );
								//line 990 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								((org.apache.commons.math3.linear.ArrayRealVector) (ndu.__get(j)) ).setEntry(((int) (r) ), ((double) (v2) ));
							}
							
							//line 991 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							temp = ( ((org.apache.commons.math3.linear.ArrayRealVector) (ndu.__get(r)) ).getEntry(((int) (( j - 1 )) )) / ((org.apache.commons.math3.linear.ArrayRealVector) (ndu.__get(j)) ).getEntry(((int) (r) )) );
							//line 993 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							{
								//line 993 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								double v3 = ( saved + ( ((org.apache.commons.math3.linear.ArrayRealVector) (right) ).getEntry(((int) (( r + 1 )) )) * temp ) );
								//line 993 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								((org.apache.commons.math3.linear.ArrayRealVector) (ndu.__get(r)) ).setEntry(((int) (j) ), ((double) (v3) ));
							}
							
							//line 994 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							saved = ( ((org.apache.commons.math3.linear.ArrayRealVector) (left) ).getEntry(((int) (( j - r )) )) * temp );
						}
						
					}
					
					//line 997 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (ndu.__get(j)) ).setEntry(((int) (j) ), ((double) (saved) ));
				}
				
			}
			
			//line 1000 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> ders = verb.core.Vec.zeros2d(( n + 1 ), ( p + 1 ));
			//line 1000 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> a = verb.core.Vec.zeros2d(2, ( p + 1 ));
			//line 1000 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int s1 = 0;
			//line 1000 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int s2 = 1;
			//line 1000 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double d = 0.0;
			//line 1000 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int rk = 0;
			//line 1000 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int pk = 0;
			//line 1000 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int j1 = 0;
			//line 1000 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int j2 = 0;
			//line 1010 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 1010 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g4 = 0;
				//line 1010 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g5 = ( p + 1 );
				//line 1010 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g4 < _g5 ))
				{
					//line 1010 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int j3 = _g4++;
					//line 1011 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 1011 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						double v4 = ((org.apache.commons.math3.linear.ArrayRealVector) (ndu.__get(j3)) ).getEntry(((int) (p) ));
						//line 1011 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (ders.__get(0)) ).setEntry(((int) (j3) ), ((double) (v4) ));
					}
					
				}
				
			}
			
			//line 1014 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 1014 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g6 = 0;
				//line 1014 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g7 = ( p + 1 );
				//line 1014 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g6 < _g7 ))
				{
					//line 1014 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int r1 = _g6++;
					//line 1015 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					s1 = 0;
					//line 1016 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					s2 = 1;
					//line 1017 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (a.__get(0)) ).setEntry(((int) (0) ), ((double) (1.0) ));
					//line 1019 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 1019 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g8 = 1;
						//line 1019 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g9 = ( n + 1 );
						//line 1019 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						while (( _g8 < _g9 ))
						{
							//line 1019 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int k = _g8++;
							//line 1021 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							d = 0.0;
							//line 1022 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							rk = ( r1 - k );
							//line 1023 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							pk = ( p - k );
							//line 1025 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							if (( r1 >= k )) 
							{
								//line 1026 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								{
									//line 1026 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									double v5 = ( ((org.apache.commons.math3.linear.ArrayRealVector) (a.__get(s1)) ).getEntry(((int) (0) )) / ((org.apache.commons.math3.linear.ArrayRealVector) (ndu.__get(( pk + 1 ))) ).getEntry(((int) (rk) )) );
									//line 1026 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									((org.apache.commons.math3.linear.ArrayRealVector) (a.__get(s2)) ).setEntry(((int) (0) ), ((double) (v5) ));
								}
								
								//line 1027 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								d = ( ((org.apache.commons.math3.linear.ArrayRealVector) (a.__get(s2)) ).getEntry(((int) (0) )) * ((org.apache.commons.math3.linear.ArrayRealVector) (ndu.__get(rk)) ).getEntry(((int) (pk) )) );
							}
							
							//line 1030 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							if (( rk >= -1 )) 
							{
								//line 1031 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								j1 = 1;
							}
							else
							{
								//line 1033 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								j1 =  - (rk) ;
							}
							
							//line 1036 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							if (( ( r1 - 1 ) <= pk )) 
							{
								//line 1037 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								j2 = ( k - 1 );
							}
							else
							{
								//line 1039 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								j2 = ( p - r1 );
							}
							
							//line 1042 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							{
								//line 1042 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g10 = j1;
								//line 1042 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g11 = ( j2 + 1 );
								//line 1042 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								while (( _g10 < _g11 ))
								{
									//line 1042 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									int j4 = _g10++;
									//line 1043 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									{
										//line 1043 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
										double v6 = ( (( ((org.apache.commons.math3.linear.ArrayRealVector) (a.__get(s1)) ).getEntry(((int) (j4) )) - ((org.apache.commons.math3.linear.ArrayRealVector) (a.__get(s1)) ).getEntry(((int) (( j4 - 1 )) )) )) / ((org.apache.commons.math3.linear.ArrayRealVector) (ndu.__get(( pk + 1 ))) ).getEntry(((int) (( rk + j4 )) )) );
										//line 1043 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
										((org.apache.commons.math3.linear.ArrayRealVector) (a.__get(s2)) ).setEntry(((int) (j4) ), ((double) (v6) ));
									}
									
									//line 1044 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									d += ( ((org.apache.commons.math3.linear.ArrayRealVector) (a.__get(s2)) ).getEntry(((int) (j4) )) * ((org.apache.commons.math3.linear.ArrayRealVector) (ndu.__get(( rk + j4 ))) ).getEntry(((int) (pk) )) );
								}
								
							}
							
							//line 1047 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							if (( r1 <= pk )) 
							{
								//line 1048 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								{
									//line 1048 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									double v7 = (  - (((org.apache.commons.math3.linear.ArrayRealVector) (a.__get(s1)) ).getEntry(((int) (( k - 1 )) )))  / ((org.apache.commons.math3.linear.ArrayRealVector) (ndu.__get(( pk + 1 ))) ).getEntry(((int) (r1) )) );
									//line 1048 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									((org.apache.commons.math3.linear.ArrayRealVector) (a.__get(s2)) ).setEntry(((int) (k) ), ((double) (v7) ));
								}
								
								//line 1049 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								d += ( ((org.apache.commons.math3.linear.ArrayRealVector) (a.__get(s2)) ).getEntry(((int) (k) )) * ((org.apache.commons.math3.linear.ArrayRealVector) (ndu.__get(r1)) ).getEntry(((int) (pk) )) );
							}
							
							//line 1052 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							((org.apache.commons.math3.linear.ArrayRealVector) (ders.__get(k)) ).setEntry(((int) (r1) ), ((double) (d) ));
							//line 1054 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int temp1 = s1;
							//line 1055 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							s1 = s2;
							//line 1056 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							s2 = temp1;
						}
						
					}
					
				}
				
			}
			
			//line 1060 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int acc = p;
			//line 1061 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 1061 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g12 = 1;
				//line 1061 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g13 = ( n + 1 );
				//line 1061 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g12 < _g13 ))
				{
					//line 1061 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int k1 = _g12++;
					//line 1062 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 1062 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g14 = 0;
						//line 1062 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g15 = ( p + 1 );
						//line 1062 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						while (( _g14 < _g15 ))
						{
							//line 1062 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int j5 = _g14++;
							//line 1063 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							{
								//line 1063 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								int _g16 = j5;
								//line 1063 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								org.apache.commons.math3.linear.ArrayRealVector _g17 = ders.__get(k1);
								//line 1063 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								{
									//line 1063 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									double v8 = ( ((org.apache.commons.math3.linear.ArrayRealVector) (_g17) ).getEntry(((int) (_g16) )) * acc );
									//line 1063 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
									((org.apache.commons.math3.linear.ArrayRealVector) (_g17) ).setEntry(((int) (_g16) ), ((double) (v8) ));
								}
								
							}
							
						}
						
					}
					
					//line 1065 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					acc *= ( p - k1 );
				}
				
			}
			
			//line 1068 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return ders;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 973 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector basisFunctions(double u, int degree, org.apache.commons.math3.linear.ArrayRealVector knots)
	{
		//line 1087 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		int knotSpan_index = verb.eval.Eval.knotSpan(degree, u, knots);
		//line 1088 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return verb.eval.Eval.basisFunctionsGivenKnotSpanIndex(knotSpan_index, u, degree, knots);
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector basisFunctionsGivenKnotSpanIndex(int knotSpan_index, double u, int degree, org.apache.commons.math3.linear.ArrayRealVector knots)
	{
		//line 1110 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 1111 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector basisFunctions = verb.core.Vec.zeros1d(( degree + 1 ));
			//line 1112 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector left = verb.core.Vec.zeros1d(( degree + 1 ));
			//line 1113 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector right = verb.core.Vec.zeros1d(( degree + 1 ));
			//line 1114 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double saved = ((double) (0) );
			//line 1115 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double temp = ((double) (0) );
			//line 1117 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			((org.apache.commons.math3.linear.ArrayRealVector) (basisFunctions) ).setEntry(((int) (0) ), ((double) (1.0) ));
			//line 1119 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 1119 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 1;
				//line 1119 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = ( degree + 1 );
				//line 1119 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 1119 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int j = _g++;
					//line 1120 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 1120 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						double v = ( u - ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (( ( knotSpan_index + 1 ) - j )) )) );
						//line 1120 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (left) ).setEntry(((int) (j) ), ((double) (v) ));
					}
					
					//line 1121 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 1121 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						double v1 = ( ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (( knotSpan_index + j )) )) - u );
						//line 1121 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (right) ).setEntry(((int) (j) ), ((double) (v1) ));
					}
					
					//line 1122 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					saved = 0.0;
					//line 1124 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 1124 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g2 = 0;
						//line 1124 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g3 = j;
						//line 1124 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						while (( _g2 < _g3 ))
						{
							//line 1124 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int r = _g2++;
							//line 1125 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							temp = ( ((org.apache.commons.math3.linear.ArrayRealVector) (basisFunctions) ).getEntry(((int) (r) )) / (( ((org.apache.commons.math3.linear.ArrayRealVector) (right) ).getEntry(((int) (( r + 1 )) )) + ((org.apache.commons.math3.linear.ArrayRealVector) (left) ).getEntry(((int) (( j - r )) )) )) );
							//line 1126 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							{
								//line 1126 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								double v2 = ( saved + ( ((org.apache.commons.math3.linear.ArrayRealVector) (right) ).getEntry(((int) (( r + 1 )) )) * temp ) );
								//line 1126 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
								((org.apache.commons.math3.linear.ArrayRealVector) (basisFunctions) ).setEntry(((int) (r) ), ((double) (v2) ));
							}
							
							//line 1127 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							saved = ( ((org.apache.commons.math3.linear.ArrayRealVector) (left) ).getEntry(((int) (( j - r )) )) * temp );
						}
						
					}
					
					//line 1130 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (basisFunctions) ).setEntry(((int) (j) ), ((double) (saved) ));
				}
				
			}
			
			//line 1133 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return basisFunctions;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 1106 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static int knotSpan(int degree, double u, org.apache.commons.math3.linear.ArrayRealVector knots)
	{
		//line 1151 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return verb.eval.Eval.knotSpanGivenN(( ( verb.core._Data.Vector_Impl_.get_length(knots) - degree ) - 2 ), degree, u, knots);
	}
	
	
	public static int knotSpanGivenN(int n, int degree, double u, org.apache.commons.math3.linear.ArrayRealVector knots)
	{
		//line 1170 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 1171 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			if (( u > ( ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (( n + 1 )) )) - verb.core.Constants.EPSILON ) )) 
			{
				//line 1173 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				return n;
			}
			
			//line 1176 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			if (( u < ( ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (degree) )) + verb.core.Constants.EPSILON ) )) 
			{
				//line 1178 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				return degree;
			}
			
			//line 1181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int low = degree;
			//line 1181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int high = ( n + 1 );
			//line 1181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int mid = ((int) (java.lang.Math.floor(( ((double) ((( low + high ))) ) / 2 ))) );
			//line 1185 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			while (( ( u < ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (mid) )) ) || ( u >= ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (( mid + 1 )) )) ) ))
			{
				//line 1187 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				if (( u < ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (mid) )) )) 
				{
					//line 1189 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					high = mid;
				}
				else
				{
					//line 1193 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					low = mid;
				}
				
				//line 1195 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				mid = ((int) (java.lang.Math.floor(( ((double) ((( low + high ))) ) / 2 ))) );
			}
			
			//line 1198 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return mid;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 1169 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector dehomogenize(org.apache.commons.math3.linear.ArrayRealVector homoPoint)
	{
		//line 1211 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 1213 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int dim = verb.core._Data.Vector_Impl_.get_length(homoPoint);
			//line 1213 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<java.lang.Object> point = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
			//line 1213 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double wt = ((org.apache.commons.math3.linear.ArrayRealVector) (homoPoint) ).getEntry(((int) (( dim - 1 )) ));
			//line 1213 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int l = ( verb.core._Data.Vector_Impl_.get_length(homoPoint) - 1 );
			//line 1218 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 1218 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 1218 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = l;
				//line 1218 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 1218 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int i = _g++;
					//line 1219 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					point.push(( ((org.apache.commons.math3.linear.ArrayRealVector) (homoPoint) ).getEntry(((int) (i) )) / wt ));
				}
				
			}
			
			//line 1222 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return verb.core._Data.Vector_Impl_.fromArray(point);
		}
		catch (java.lang.Throwable typedException)
		{
			//line 1211 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> rational1d(haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> homoPoints)
	{
		//line 1236 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 1237 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int dim = ( verb.core._Data.Vector_Impl_.get_length(homoPoints.__get(0)) - 1 );
			//line 1238 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> ret = ((haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (homoPoints.length) ))) )) );
			//line 1238 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 1238 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 1238 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = homoPoints.length;
				//line 1238 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 1238 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int i = _g++;
					//line 1238 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					org.apache.commons.math3.linear.ArrayRealVector x = homoPoints.__get(i);
					//line 1238 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					java.lang.Object end = dim;
					//line 1238 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					if (haxe.lang.Runtime.eq(end, null)) 
					{
						//line 1238 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						end = ((org.apache.commons.math3.linear.ArrayRealVector) (x) ).getDimension();
					}
					
					//line 1238 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					ret.__set(i, verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.RealVector) (((org.apache.commons.math3.linear.ArrayRealVector) (x) ).getSubVector(((int) (0) ), ((int) (haxe.lang.Runtime.toInt(end)) ))) ))));
				}
				
			}
			
			//line 1238 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return ret;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 1236 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> rational2d(haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> homoPoints)
	{
		//line 1253 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		haxe.lang.Function f = ((haxe.lang.Function) (new haxe.lang.Closure(verb.eval.Eval.class, "rational1d")) );
		//line 1253 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> ret = ((haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (homoPoints.length) ))) )) );
		//line 1253 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		{
			//line 1253 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int _g = 0;
			//line 1253 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int _g1 = homoPoints.length;
			//line 1253 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			while (( _g < _g1 ))
			{
				//line 1253 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int i = _g++;
				//line 1253 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				ret.__set(i, ((haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>) (f.__hx_invoke1_o(0.0, homoPoints.__get(i))) ));
			}
			
		}
		
		//line 1253 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return ret;
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector weight1d(haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> homoPoints)
	{
		//line 1267 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 1268 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int dim = ( verb.core._Data.Vector_Impl_.get_length(homoPoints.__get(0)) - 1 );
			//line 1269 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<java.lang.Object> ret = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (homoPoints.length) ))) )) );
			//line 1269 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 1269 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 1269 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = homoPoints.length;
				//line 1269 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 1269 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int i = _g++;
					//line 1269 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					double __temp_expr1 = ((double) (haxe.lang.Runtime.toDouble(ret.__set(i, ((org.apache.commons.math3.linear.ArrayRealVector) (homoPoints.__get(i)) ).getEntry(((int) (dim) ))))) );
				}
				
			}
			
			//line 1269 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return verb.core._Data.Vector_Impl_.fromArray(ret);
		}
		catch (java.lang.Throwable typedException)
		{
			//line 1267 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> weight2d(haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> homoPoints)
	{
		//line 1284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		haxe.lang.Function f = ((haxe.lang.Function) (new haxe.lang.Closure(verb.eval.Eval.class, "weight1d")) );
		//line 1284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> ret = ((haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (homoPoints.length) ))) )) );
		//line 1284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		{
			//line 1284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int _g = 0;
			//line 1284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int _g1 = homoPoints.length;
			//line 1284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			while (( _g < _g1 ))
			{
				//line 1284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int i = _g++;
				//line 1284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				ret.__set(i, ((org.apache.commons.math3.linear.ArrayRealVector) (f.__hx_invoke1_o(0.0, homoPoints.__get(i))) ));
			}
			
		}
		
		//line 1284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return ret;
	}
	
	
	public static haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> dehomogenize1d(haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> homoPoints)
	{
		//line 1298 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		haxe.lang.Function f = ((haxe.lang.Function) (new haxe.lang.Closure(verb.eval.Eval.class, "dehomogenize")) );
		//line 1298 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> ret = ((haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (homoPoints.length) ))) )) );
		//line 1298 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		{
			//line 1298 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int _g = 0;
			//line 1298 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int _g1 = homoPoints.length;
			//line 1298 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			while (( _g < _g1 ))
			{
				//line 1298 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int i = _g++;
				//line 1298 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				ret.__set(i, ((org.apache.commons.math3.linear.ArrayRealVector) (f.__hx_invoke1_o(0.0, homoPoints.__get(i))) ));
			}
			
		}
		
		//line 1298 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return ret;
	}
	
	
	public static haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> dehomogenize2d(haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> homoPoints)
	{
		//line 1312 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		haxe.lang.Function f = ((haxe.lang.Function) (new haxe.lang.Closure(verb.eval.Eval.class, "dehomogenize1d")) );
		//line 1312 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> ret = ((haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (homoPoints.length) ))) )) );
		//line 1312 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		{
			//line 1312 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int _g = 0;
			//line 1312 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int _g1 = homoPoints.length;
			//line 1312 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			while (( _g < _g1 ))
			{
				//line 1312 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int i = _g++;
				//line 1312 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				ret.__set(i, ((haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>) (f.__hx_invoke1_o(0.0, homoPoints.__get(i))) ));
			}
			
		}
		
		//line 1312 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return ret;
	}
	
	
	public static haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> homogenize1d(haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> controlPoints, org.apache.commons.math3.linear.ArrayRealVector weights)
	{
		//line 1328 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		try 
		{
			//line 1330 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int rows = controlPoints.length;
			//line 1330 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int dim = verb.core._Data.Vector_Impl_.get_length(controlPoints.__get(0));
			//line 1330 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> homo_controlPoints = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>();
			//line 1330 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			double wt = 0.0;
			//line 1330 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector ref_pt = verb.core._Data.Vector_Impl_._new(null);
			//line 1330 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			org.apache.commons.math3.linear.ArrayRealVector weights1 = ( (( weights != null )) ? (weights) : (verb.core.Vec.fill(controlPoints.length, 1.0)) );
			//line 1337 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 1337 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g = 0;
				//line 1337 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = rows;
				//line 1337 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g < _g1 ))
				{
					//line 1337 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int i = _g++;
					//line 1339 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					haxe.root.Array<java.lang.Object> pt = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
					//line 1340 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					ref_pt = controlPoints.__get(i);
					//line 1341 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					wt = ((org.apache.commons.math3.linear.ArrayRealVector) (weights1) ).getEntry(((int) (i) ));
					//line 1343 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					{
						//line 1343 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g2 = 0;
						//line 1343 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						int _g3 = dim;
						//line 1343 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
						while (( _g2 < _g3 ))
						{
							//line 1343 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							int k = _g2++;
							//line 1344 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
							pt.push(( ((org.apache.commons.math3.linear.ArrayRealVector) (ref_pt) ).getEntry(((int) (k) )) * wt ));
						}
						
					}
					
					//line 1348 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					pt.push(wt);
					//line 1350 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					homo_controlPoints.push(verb.core._Data.Vector_Impl_.fromArray(pt));
				}
				
			}
			
			//line 1353 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			return homo_controlPoints;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 1328 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> homogenize2d(haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> controlPoints, haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> weights)
	{
		//line 1370 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		int rows = controlPoints.length;
		//line 1370 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> homo_controlPoints = new haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>();
		//line 1370 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> weights1 = null;
		//line 1372 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		if (( weights != null )) 
		{
			//line 1370 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			weights1 = weights;
		}
		else
		{
			//line 1372 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> _g = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{});
			//line 1372 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			{
				//line 1372 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g1 = 0;
				//line 1372 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int _g2 = rows;
				//line 1372 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				while (( _g1 < _g2 ))
				{
					//line 1372 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					int i = _g1++;
					//line 1372 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
					_g.push(verb.core.Vec.fill(controlPoints.__get(0).length, 1.0));
				}
				
			}
			
			//line 1370 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			weights1 = _g;
		}
		
		//line 1374 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		{
			//line 1374 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int _g3 = 0;
			//line 1374 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			int _g4 = rows;
			//line 1374 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
			while (( _g3 < _g4 ))
			{
				//line 1374 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				int i1 = _g3++;
				//line 1375 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
				homo_controlPoints.push(verb.eval.Eval.homogenize1d(controlPoints.__get(i1), weights1.__get(i1)));
			}
			
		}
		
		//line 1378 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Eval.hx"
		return homo_controlPoints;
	}
	
	
}


