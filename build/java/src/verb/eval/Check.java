// Generated by Haxe 4.1.4
package verb.eval;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Check extends haxe.lang.HxObject
{
	public Check(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Check()
	{
		//line 18 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
		verb.eval.Check.__hx_ctor_verb_eval_Check(this);
	}
	
	
	protected static void __hx_ctor_verb_eval_Check(verb.eval.Check __hx_this)
	{
	}
	
	
	public static boolean isValidKnotVector(org.apache.commons.math3.linear.ArrayRealVector vec, int degree)
	{
		//line 36 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
		try 
		{
			//line 38 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			if (( verb.core._Data.Vector_Impl_.get_length(vec) == 0 )) 
			{
				//line 38 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
				return false;
			}
			
			//line 39 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			if (( verb.core._Data.Vector_Impl_.get_length(vec) < ( (( degree + 1 )) * 2 ) )) 
			{
				//line 39 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
				return false;
			}
			
			//line 41 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			double rep = ((org.apache.commons.math3.linear.ArrayRealVector) (vec) ).getEntry(((int) (0) ));
			//line 43 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			{
				//line 43 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
				int _g = 0;
				//line 43 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
				int _g1 = ( degree + 1 );
				//line 43 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
				while (( _g < _g1 ))
				{
					//line 43 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
					int i = _g++;
					//line 44 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
					if (( java.lang.Math.abs(( ((org.apache.commons.math3.linear.ArrayRealVector) (vec) ).getEntry(((int) (i) )) - rep )) > verb.core.Constants.EPSILON )) 
					{
						//line 44 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
						return false;
					}
					
				}
				
			}
			
			//line 47 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			rep = ((org.apache.commons.math3.linear.ArrayRealVector) (vec) ).getEntry(((int) (( ((org.apache.commons.math3.linear.ArrayRealVector) (vec) ).getDimension() - 1 )) ));
			//line 49 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			{
				//line 49 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
				int _g2 = ( ( verb.core._Data.Vector_Impl_.get_length(vec) - degree ) - 1 );
				//line 49 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
				int _g3 = verb.core._Data.Vector_Impl_.get_length(vec);
				//line 49 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
				while (( _g2 < _g3 ))
				{
					//line 49 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
					int i1 = _g2++;
					//line 50 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
					if (( java.lang.Math.abs(( ((org.apache.commons.math3.linear.ArrayRealVector) (vec) ).getEntry(((int) (i1) )) - rep )) > verb.core.Constants.EPSILON )) 
					{
						//line 50 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
						return false;
					}
					
				}
				
			}
			
			//line 53 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			return verb.eval.Check.isNonDecreasing(vec);
		}
		catch (java.lang.Throwable typedException)
		{
			//line 36 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static boolean isNonDecreasing(org.apache.commons.math3.linear.ArrayRealVector vec)
	{
		//line 67 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
		try 
		{
			//line 68 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			double rep = ((org.apache.commons.math3.linear.ArrayRealVector) (vec) ).getEntry(((int) (0) ));
			//line 69 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			{
				//line 69 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
				int _g = 0;
				//line 69 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
				int _g1 = verb.core._Data.Vector_Impl_.get_length(vec);
				//line 69 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
				while (( _g < _g1 ))
				{
					//line 69 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
					int i = _g++;
					//line 70 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
					if (( ((org.apache.commons.math3.linear.ArrayRealVector) (vec) ).getEntry(((int) (i) )) < ( rep - verb.core.Constants.EPSILON ) )) 
					{
						//line 70 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
						return false;
					}
					
					//line 71 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
					rep = ((org.apache.commons.math3.linear.ArrayRealVector) (vec) ).getEntry(((int) (i) ));
				}
				
			}
			
			//line 73 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			return true;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 67 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static verb.core.NurbsCurveData isValidNurbsCurveData(verb.core.NurbsCurveData data)
	{
		//line 87 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
		if (( data.controlPoints == null )) 
		{
			//line 87 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Control points array cannot be null!")) );
		}
		
		//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
		if (( data.degree < 1 )) 
		{
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Degree must be greater than 1!")) );
		}
		
		//line 92 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
		if (( data.knots == null )) 
		{
			//line 92 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Knots cannot be null!")) );
		}
		
		//line 94 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
		if (( verb.core._Data.Vector_Impl_.get_length(data.knots) != ( ( data.controlPoints.length + data.degree ) + 1 ) )) 
		{
			//line 95 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown("controlPoints.length + degree + 1 must equal knots.length!")) );
		}
		
		//line 98 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
		if ( ! (verb.eval.Check.isValidKnotVector(data.knots, data.degree)) ) 
		{
			//line 99 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Invalid knot vector format!  Should begin with degree + 1 repeats and end with degree + 1 repeats!")) );
		}
		
		//line 102 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
		return data;
	}
	
	
	public static verb.core.NurbsSurfaceData isValidNurbsSurfaceData(verb.core.NurbsSurfaceData data)
	{
		//line 116 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
		if (( data.controlPoints == null )) 
		{
			//line 116 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Control points array cannot be null!")) );
		}
		
		//line 121 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
		if (( data.degreeU < 1 )) 
		{
			//line 121 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown("DegreeU must be greater than 1!")) );
		}
		
		//line 122 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
		if (( data.degreeV < 1 )) 
		{
			//line 122 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown("DegreeV must be greater than 1!")) );
		}
		
		//line 123 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
		if (( data.knotsU == null )) 
		{
			//line 123 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown("KnotsU cannot be null!")) );
		}
		
		//line 124 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
		if (( data.knotsV == null )) 
		{
			//line 124 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown("KnotsV cannot be null!")) );
		}
		
		//line 126 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
		if (( verb.core._Data.Vector_Impl_.get_length(data.knotsU) != ( ( data.controlPoints.length + data.degreeU ) + 1 ) )) 
		{
			//line 127 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown("controlPointsU.length + degreeU + 1 must equal knotsU.length!")) );
		}
		
		//line 130 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
		if (( verb.core._Data.Vector_Impl_.get_length(data.knotsV) != ( ( data.controlPoints.__get(0).length + data.degreeV ) + 1 ) )) 
		{
			//line 131 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown("controlPointsV.length + degreeV + 1 must equal knotsV.length!")) );
		}
		
		//line 134 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
		if ((  ! (verb.eval.Check.isValidKnotVector(data.knotsU, data.degreeU))  ||  ! (verb.eval.Check.isValidKnotVector(data.knotsV, data.degreeV))  )) 
		{
			//line 135 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Invalid knot vector format!  Should begin with degree + 1 repeats and end with degree + 1 repeats!")) );
		}
		
		//line 138 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Check.hx"
		return data;
	}
	
	
}


