// Generated by Haxe 4.1.4
package verb.eval;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Make extends haxe.lang.HxObject
{
	public Make(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Make()
	{
		//line 30 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		verb.eval.Make.__hx_ctor_verb_eval_Make(this);
	}
	
	
	protected static void __hx_ctor_verb_eval_Make(verb.eval.Make __hx_this)
	{
	}
	
	
	public static verb.core.NurbsSurfaceData rationalTranslationalSurface(verb.core.NurbsCurveData profile, verb.core.NurbsCurveData rail)
	{
		//line 43 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		try 
		{
			//line 45 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			org.apache.commons.math3.linear.ArrayRealVector pt0 = verb.eval.Eval.rationalCurvePoint(rail, ((org.apache.commons.math3.linear.ArrayRealVector) (rail.knots) ).getEntry(((int) (0) )));
			//line 45 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			double startu = ((org.apache.commons.math3.linear.ArrayRealVector) (rail.knots) ).getEntry(((int) (0) ));
			//line 47 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			org.apache.commons.math3.linear.ArrayRealVector this1 = rail.knots;
			//line 45 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			double endu = this1.getEntry(((int) (( this1.getDimension() - 1 )) ));
			//line 45 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int numSamples = ( 2 * rail.controlPoints.length );
			//line 45 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			double span = ( (( endu - startu )) / (( numSamples - 1 )) );
			//line 51 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			haxe.root.Array<verb.core.NurbsCurveData> crvs = new haxe.root.Array<verb.core.NurbsCurveData>(new verb.core.NurbsCurveData[]{});
			//line 53 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			{
				//line 53 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g = 0;
				//line 53 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g1 = numSamples;
				//line 53 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				while (( _g < _g1 ))
				{
					//line 53 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int i = _g++;
					//line 55 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					org.apache.commons.math3.linear.ArrayRealVector pt = verb.core.Vec.sub(verb.eval.Eval.rationalCurvePoint(rail, ( startu + ( i * span ) )), pt0);
					//line 57 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					verb.core.NurbsCurveData crv = verb.eval.Modify.rationalCurveTransform(profile, new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (1) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (pt) ).getEntry(((int) (0) ))) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (1) ), ((java.lang.Object) (0) ), ((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (pt) ).getEntry(((int) (1) ))) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) ), ((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (pt) ).getEntry(((int) (2) ))) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) )}))}));
					//line 58 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					crvs.push(crv);
				}
				
			}
			
			//line 62 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			return verb.eval.Make.loftedSurface(crvs, null);
		}
		catch (java.lang.Throwable typedException)
		{
			//line 43 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<verb.core.NurbsCurveData> surfaceBoundaryCurves(verb.core.NurbsSurfaceData surface)
	{
		//line 71 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		try 
		{
			//line 74 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			verb.core.NurbsCurveData c0 = verb.eval.Make.surfaceIsocurve(surface, ((org.apache.commons.math3.linear.ArrayRealVector) (surface.knotsU) ).getEntry(((int) (0) )), false);
			//line 75 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			org.apache.commons.math3.linear.ArrayRealVector this1 = surface.knotsU;
			//line 75 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			verb.core.NurbsCurveData c1 = verb.eval.Make.surfaceIsocurve(surface, this1.getEntry(((int) (( this1.getDimension() - 1 )) )), false);
			//line 76 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			verb.core.NurbsCurveData c2 = verb.eval.Make.surfaceIsocurve(surface, ((org.apache.commons.math3.linear.ArrayRealVector) (surface.knotsV) ).getEntry(((int) (0) )), true);
			//line 77 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			org.apache.commons.math3.linear.ArrayRealVector this2 = surface.knotsV;
			//line 77 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			verb.core.NurbsCurveData c3 = verb.eval.Make.surfaceIsocurve(surface, this2.getEntry(((int) (( this2.getDimension() - 1 )) )), true);
			//line 79 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			return new haxe.root.Array<verb.core.NurbsCurveData>(new verb.core.NurbsCurveData[]{c0, c1, c2, c3});
		}
		catch (java.lang.Throwable typedException)
		{
			//line 71 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static verb.core.NurbsCurveData surfaceIsocurve(verb.core.NurbsSurfaceData surface, double u, java.lang.Object useV)
	{
		//line 83 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		try 
		{
			//line 83 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			boolean useV1 = ( (haxe.lang.Runtime.eq(useV, null)) ? (false) : (haxe.lang.Runtime.toBool(((java.lang.Boolean) (useV) ))) );
			//line 85 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			org.apache.commons.math3.linear.ArrayRealVector knots = ( (useV1) ? (surface.knotsV) : (surface.knotsU) );
			//line 86 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int degree = ( (useV1) ? (surface.degreeV) : (surface.degreeU) );
			//line 88 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			haxe.root.Array<verb.eval.KnotMultiplicity> knotMults = verb.eval.Analyze.knotMultiplicities(knots);
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int reqKnotIndex = -1;
			//line 92 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			{
				//line 92 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g = 0;
				//line 92 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g1 = knotMults.length;
				//line 92 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				while (( _g < _g1 ))
				{
					//line 92 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int i = _g++;
					//line 93 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					if (( java.lang.Math.abs(( u - knotMults.__get(i).knot )) < verb.core.Constants.EPSILON )) 
					{
						//line 94 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						reqKnotIndex = i;
						//line 95 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						break;
					}
					
				}
				
			}
			
			//line 99 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int numKnotsToInsert = ( degree + 1 );
			//line 100 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			if (( reqKnotIndex >= 0 )) 
			{
				//line 101 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				numKnotsToInsert -= knotMults.__get(reqKnotIndex).mult;
			}
			
			//line 105 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			verb.core.NurbsSurfaceData newSrf = ( (( numKnotsToInsert > 0 )) ? (verb.eval.Modify.surfaceKnotRefine(surface, verb.core._Data.Vector_Impl_.fromArray(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (verb.core.Vec.rep(((int) (numKnotsToInsert) ), ((java.lang.Object) (u) ))) )) )), useV1)) : (surface) );
			//line 108 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int span = verb.eval.Eval.knotSpan(degree, u, knots);
			//line 110 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			if (( java.lang.Math.abs(( u - ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (0) )) )) < verb.core.Constants.EPSILON )) 
			{
				//line 111 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				span = 0;
			}
			else
			{
				//line 112 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				if (( java.lang.Math.abs(( u - ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (( ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getDimension() - 1 )) )) )) < verb.core.Constants.EPSILON )) 
				{
					//line 113 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					span = ( (( (useV1) ? (newSrf.controlPoints.__get(0).length) : (newSrf.controlPoints.length) )) - 1 );
				}
				
			}
			
			//line 116 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			if (useV1) 
			{
				//line 117 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int newSrf1 = newSrf.degreeU;
				//line 117 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				org.apache.commons.math3.linear.ArrayRealVector newSrf2 = newSrf.knotsU;
				//line 117 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> _g2 = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{});
				//line 117 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				{
					//line 117 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int _g3 = 0;
					//line 117 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> _g4 = newSrf.controlPoints;
					//line 117 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					while (( _g3 < _g4.length ))
					{
						//line 117 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> row = _g4.__get(_g3);
						//line 117 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						 ++ _g3;
						//line 117 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						_g2.push(row.__get(span));
					}
					
				}
				
				//line 117 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				return new verb.core.NurbsCurveData(newSrf1, newSrf2, _g2);
			}
			
			//line 120 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			return new verb.core.NurbsCurveData(newSrf.degreeV, newSrf.knotsV, newSrf.controlPoints.__get(span));
		}
		catch (java.lang.Throwable typedException)
		{
			//line 83 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static verb.core.NurbsSurfaceData loftedSurface(haxe.root.Array<verb.core.NurbsCurveData> curves, java.lang.Object degreeV)
	{
		//line 125 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		curves = verb.eval.Modify.unifyCurveKnotVectors(curves);
		//line 128 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		int degreeU = curves.__get(0).degree;
		//line 129 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		if (haxe.lang.Runtime.eq(degreeV, null)) 
		{
			//line 129 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			degreeV = 3;
		}
		
		//line 130 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		if (( ((int) (haxe.lang.Runtime.toInt(degreeV)) ) > ( curves.length - 1 ) )) 
		{
			//line 131 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			degreeV = ( curves.length - 1 );
		}
		
		//line 135 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		org.apache.commons.math3.linear.ArrayRealVector knotsU = curves.__get(0).knots;
		//line 137 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		org.apache.commons.math3.linear.ArrayRealVector knotsV = verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{}));
		//line 138 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> controlPoints = new haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>(new haxe.root.Array[]{});
		//line 139 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		{
			//line 139 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int _g = 0;
			//line 139 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int _g1 = curves.__get(0).controlPoints.length;
			//line 139 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			while (( _g < _g1 ))
			{
				//line 139 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int i = _g++;
				//line 142 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> ret = ((haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (curves.length) ))) )) );
				//line 142 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				{
					//line 142 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int _g2 = 0;
					//line 142 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int _g3 = curves.length;
					//line 142 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					while (( _g2 < _g3 ))
					{
						//line 142 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						int i1 = _g2++;
						//line 142 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						ret.__set(i1, curves.__get(i1).controlPoints.__get(i));
					}
					
				}
				
				//line 142 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> points = ret;
				//line 147 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				verb.core.NurbsCurveData c = verb.eval.Make.rationalInterpCurve(points, degreeV, true, null, null);
				//line 148 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				controlPoints.push(c.controlPoints);
				//line 149 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				knotsV = c.knots;
			}
			
		}
		
		//line 152 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		return new verb.core.NurbsSurfaceData(degreeU, ((int) (haxe.lang.Runtime.toInt(degreeV)) ), knotsU, knotsV, controlPoints);
	}
	
	
	public static verb.core.NurbsCurveData clonedCurve(verb.core.NurbsCurveData curve)
	{
		//line 156 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		int curve1 = curve.degree;
		//line 156 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		org.apache.commons.math3.linear.ArrayRealVector tmp = verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.ArrayRealVector) (curve.knots) )));
		//line 156 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> _this = curve.controlPoints;
		//line 156 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> ret = ((haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (_this.length) ))) )) );
		//line 156 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		{
			//line 156 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int _g = 0;
			//line 156 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int _g1 = _this.length;
			//line 156 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			while (( _g < _g1 ))
			{
				//line 156 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int i = _g++;
				//line 156 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				ret.__set(i, verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.ArrayRealVector) (_this.__get(i)) ))));
			}
			
		}
		
		//line 156 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		return new verb.core.NurbsCurveData(curve1, tmp, ret);
	}
	
	
	public static verb.core.NurbsCurveData rationalBezierCurve(haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> controlPoints, org.apache.commons.math3.linear.ArrayRealVector weights)
	{
		//line 174 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		int degree = ( controlPoints.length - 1 );
		//line 176 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		haxe.root.Array<java.lang.Object> knots = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 177 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		{
			//line 177 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int _g = 0;
			//line 177 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int _g1 = ( degree + 1 );
			//line 177 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			while (( _g < _g1 ))
			{
				//line 177 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int i = _g++;
				//line 177 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				knots.push(0.0);
			}
			
		}
		
		//line 178 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		{
			//line 178 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int _g2 = 0;
			//line 178 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int _g3 = ( degree + 1 );
			//line 178 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			while (( _g2 < _g3 ))
			{
				//line 178 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int i1 = _g2++;
				//line 178 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				knots.push(1.0);
			}
			
		}
		
		//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		if (( weights == null )) 
		{
			//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			weights = verb.core._Data.Vector_Impl_.fromArray(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (verb.core.Vec.rep(((int) (controlPoints.length) ), ((java.lang.Object) (1.0) ))) )) ));
		}
		
		//line 183 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		return new verb.core.NurbsCurveData(degree, verb.core._Data.Vector_Impl_.fromArray(knots), verb.eval.Eval.homogenize1d(controlPoints, weights));
	}
	
	
	public static verb.core.NurbsSurfaceData fourPointSurface(org.apache.commons.math3.linear.ArrayRealVector p1, org.apache.commons.math3.linear.ArrayRealVector p2, org.apache.commons.math3.linear.ArrayRealVector p3, org.apache.commons.math3.linear.ArrayRealVector p4, java.lang.Object degree)
	{
		//line 199 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		int degree1 = ( (haxe.lang.Runtime.eq(degree, null)) ? (3) : (((int) (haxe.lang.Runtime.toInt(degree)) )) );
		//line 201 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		double degreeFloat = ((double) (degree1) );
		//line 203 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> pts = new haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>(new haxe.root.Array[]{});
		//line 204 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		{
			//line 204 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int _g = 0;
			//line 204 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int _g1 = ( degree1 + 1 );
			//line 204 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			while (( _g < _g1 ))
			{
				//line 204 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int i = _g++;
				//line 206 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> row = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{});
				//line 207 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				{
					//line 207 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int _g2 = 0;
					//line 207 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int _g3 = ( degree1 + 1 );
					//line 207 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					while (( _g2 < _g3 ))
					{
						//line 207 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						int j = _g2++;
						//line 209 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						double l = ( 1.0 - ( i / degreeFloat ) );
						//line 210 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						org.apache.commons.math3.linear.ArrayRealVector p1p2 = verb.core.Vec.lerp(l, p1, p2);
						//line 211 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						org.apache.commons.math3.linear.ArrayRealVector p4p3 = verb.core.Vec.lerp(l, p4, p3);
						//line 213 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						org.apache.commons.math3.linear.ArrayRealVector res = verb.core.Vec.lerp(( 1.0 - ( j / degreeFloat ) ), p1p2, p4p3);
						//line 214 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						{
							//line 214 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							res = new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.RealVector) (((org.apache.commons.math3.linear.ArrayRealVector) (res) ).append(((double) (1.0) ))) ));
							//line 214 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							((org.apache.commons.math3.linear.ArrayRealVector) (res) ).getDimension();
						}
						
						//line 216 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						row.push(res);
					}
					
				}
				
				//line 219 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				pts.push(row);
			}
			
		}
		
		//line 222 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		haxe.root.Array<java.lang.Object> zeros = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (verb.core.Vec.rep(((int) (( degree1 + 1 )) ), ((java.lang.Object) (0.0) ))) )) );
		//line 223 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		haxe.root.Array<java.lang.Object> ones = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (verb.core.Vec.rep(((int) (( degree1 + 1 )) ), ((java.lang.Object) (1.0) ))) )) );
		//line 225 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		return new verb.core.NurbsSurfaceData(degree1, degree1, verb.core._Data.Vector_Impl_.fromArray(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (zeros.concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (ones) )) ))) )) )), verb.core._Data.Vector_Impl_.fromArray(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (zeros.concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (ones) )) ))) )) )), pts);
	}
	
	
	public static verb.core.NurbsCurveData ellipseArc(org.apache.commons.math3.linear.ArrayRealVector center, org.apache.commons.math3.linear.ArrayRealVector xaxis, org.apache.commons.math3.linear.ArrayRealVector yaxis, double startAngle, double endAngle)
	{
		//line 243 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		try 
		{
			//line 245 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			double xradius = verb.core.Vec.norm(xaxis);
			//line 246 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			double yradius = verb.core.Vec.norm(yaxis);
			//line 248 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			xaxis = verb.core.Vec.normalized(xaxis);
			//line 249 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			yaxis = verb.core.Vec.normalized(yaxis);
			//line 252 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			if (( endAngle < startAngle )) 
			{
				//line 252 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				endAngle = ( ( 2.0 * java.lang.Math.PI ) + startAngle );
			}
			
			//line 254 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			double theta = ( endAngle - startAngle );
			//line 254 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int numArcs = 0;
			//line 258 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			if (( theta <= ( java.lang.Math.PI / 2 ) )) 
			{
				//line 259 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				numArcs = 1;
			}
			else
			{
				//line 261 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				if (( theta <= java.lang.Math.PI )) 
				{
					//line 262 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					numArcs = 2;
				}
				else
				{
					//line 263 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					if (( theta <= ( ( 3 * java.lang.Math.PI ) / 2 ) )) 
					{
						//line 264 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						numArcs = 3;
					}
					else
					{
						//line 266 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						numArcs = 4;
					}
					
				}
				
			}
			
			//line 270 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			double dtheta = ( theta / numArcs );
			//line 270 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int n = ( 2 * numArcs );
			//line 270 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			double w1 = java.lang.Math.cos(( dtheta / 2 ));
			//line 270 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			org.apache.commons.math3.linear.ArrayRealVector P0 = verb.core.Vec.add(center, verb.core.Vec.add(verb.core.Vec.mul(( xradius * java.lang.Math.cos(startAngle) ), xaxis), verb.core.Vec.mul(( yradius * java.lang.Math.sin(startAngle) ), yaxis)));
			//line 270 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			org.apache.commons.math3.linear.ArrayRealVector T0 = verb.core.Vec.sub(verb.core.Vec.mul(java.lang.Math.cos(startAngle), yaxis), verb.core.Vec.mul(java.lang.Math.sin(startAngle), xaxis));
			//line 270 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> controlPoints = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{});
			//line 270 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			org.apache.commons.math3.linear.ArrayRealVector knots = verb.core.Vec.zeros1d(( ( 2 * numArcs ) + 3 ));
			//line 270 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int index = 0;
			//line 270 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			double angle = startAngle;
			//line 270 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			org.apache.commons.math3.linear.ArrayRealVector weights = verb.core.Vec.zeros1d(( numArcs * 2 ));
			//line 281 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			controlPoints.__set(0, P0);
			//line 282 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			((org.apache.commons.math3.linear.ArrayRealVector) (weights) ).setEntry(((int) (0) ), ((double) (1.0) ));
			//line 284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			{
				//line 284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g = 1;
				//line 284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g1 = ( numArcs + 1 );
				//line 284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				while (( _g < _g1 ))
				{
					//line 284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int i = _g++;
					//line 286 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					angle += dtheta;
					//line 287 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					org.apache.commons.math3.linear.ArrayRealVector P2 = verb.core.Vec.add(center, verb.core.Vec.add(verb.core.Vec.mul(( xradius * java.lang.Math.cos(angle) ), xaxis), verb.core.Vec.mul(( yradius * java.lang.Math.sin(angle) ), yaxis)));
					//line 290 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (weights) ).setEntry(((int) (( index + 2 )) ), ((double) (1) ));
					//line 291 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					controlPoints.__set(( index + 2 ), P2);
					//line 293 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					org.apache.commons.math3.linear.ArrayRealVector T2 = verb.core.Vec.sub(verb.core.Vec.mul(java.lang.Math.cos(angle), yaxis), verb.core.Vec.mul(java.lang.Math.sin(angle), xaxis));
					//line 295 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					verb.core.CurveCurveIntersection inters = verb.eval.Intersect.rays(P0, verb.core.Vec.mul(( 1 / verb.core.Vec.norm(T0) ), T0), P2, verb.core.Vec.mul(( 1 / verb.core.Vec.norm(T2) ), T2));
					//line 296 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					org.apache.commons.math3.linear.ArrayRealVector P1 = verb.core.Vec.add(P0, verb.core.Vec.mul(inters.u0, T0));
					//line 298 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (weights) ).setEntry(((int) (( index + 1 )) ), ((double) (w1) ));
					//line 299 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					controlPoints.__set(( index + 1 ), P1);
					//line 301 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					index += 2;
					//line 303 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					if (( i < numArcs )) 
					{
						//line 304 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						P0 = P2;
						//line 305 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						T0 = T2;
					}
					
				}
				
			}
			
			//line 309 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int j = ( ( 2 * numArcs ) + 1 );
			//line 311 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			{
				//line 311 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				{
					//line 312 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).setEntry(((int) (0) ), ((double) (0.0) ));
					//line 313 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).setEntry(((int) (j) ), ((double) (1.0) ));
				}
				
				//line 311 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				{
					//line 312 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).setEntry(((int) (1) ), ((double) (0.0) ));
					//line 313 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).setEntry(((int) (( 1 + j )) ), ((double) (1.0) ));
				}
				
				//line 311 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				{
					//line 312 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).setEntry(((int) (2) ), ((double) (0.0) ));
					//line 313 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).setEntry(((int) (( 2 + j )) ), ((double) (1.0) ));
				}
				
			}
			
			//line 316 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			switch (numArcs)
			{
				case 2:
				{
					//line 318 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).setEntry(((int) (4) ), ((double) (0.5) ));
					//line 318 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					double v = 0.5;
					//line 318 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).setEntry(((int) (3) ), ((double) (v) ));
					//line 318 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					break;
				}
				
				
				case 3:
				{
					//line 320 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					{
						//line 320 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).setEntry(((int) (4) ), ((double) (0.33333333333333331) ));
						//line 320 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						double v1 = 0.33333333333333331;
						//line 320 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).setEntry(((int) (3) ), ((double) (v1) ));
					}
					
					//line 321 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					{
						//line 321 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).setEntry(((int) (6) ), ((double) (0.66666666666666663) ));
						//line 321 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						double v2 = 0.66666666666666663;
						//line 321 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).setEntry(((int) (5) ), ((double) (v2) ));
					}
					
					//line 319 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					break;
				}
				
				
				case 4:
				{
					//line 323 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					{
						//line 323 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).setEntry(((int) (4) ), ((double) (0.25) ));
						//line 323 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						double v3 = 0.25;
						//line 323 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).setEntry(((int) (3) ), ((double) (v3) ));
					}
					
					//line 324 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					{
						//line 324 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).setEntry(((int) (6) ), ((double) (0.5) ));
						//line 324 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						double v4 = 0.5;
						//line 324 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).setEntry(((int) (5) ), ((double) (v4) ));
					}
					
					//line 325 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					{
						//line 325 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).setEntry(((int) (8) ), ((double) (0.75) ));
						//line 325 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						double v5 = 0.75;
						//line 325 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).setEntry(((int) (7) ), ((double) (v5) ));
					}
					
					//line 322 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					break;
				}
				
				
			}
			
			//line 328 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			return new verb.core.NurbsCurveData(2, knots, verb.eval.Eval.homogenize1d(controlPoints, weights));
		}
		catch (java.lang.Throwable typedException)
		{
			//line 243 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static verb.core.NurbsCurveData arc(org.apache.commons.math3.linear.ArrayRealVector center, org.apache.commons.math3.linear.ArrayRealVector xaxis, org.apache.commons.math3.linear.ArrayRealVector yaxis, double radius, double startAngle, double endAngle)
	{
		//line 350 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		return verb.eval.Make.ellipseArc(center, verb.core.Vec.mul(radius, verb.core.Vec.normalized(xaxis)), verb.core.Vec.mul(radius, verb.core.Vec.normalized(yaxis)), startAngle, endAngle);
	}
	
	
	public static verb.core.NurbsCurveData polyline(haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> pts)
	{
		//line 365 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		org.apache.commons.math3.linear.ArrayRealVector knots = verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.0) ), ((java.lang.Object) (0.0) )}));
		//line 366 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		double lsum = 0.0;
		//line 368 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		{
			//line 368 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int _g = 0;
			//line 368 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int _g1 = ( pts.length - 1 );
			//line 368 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			while (( _g < _g1 ))
			{
				//line 368 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int i = _g++;
				//line 369 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				lsum += verb.core.Vec.dist(pts.__get(i), pts.__get(( i + 1 )));
				//line 370 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				{
					//line 370 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					knots = new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.RealVector) (((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).append(((double) (lsum) ))) ));
					//line 370 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getDimension();
				}
				
			}
			
		}
		
		//line 372 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		{
			//line 372 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			knots = new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.RealVector) (((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).append(((double) (lsum) ))) ));
			//line 372 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getDimension();
		}
		
		//line 375 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		knots = verb.core.Vec.mul(( 1 / lsum ), knots);
		//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		haxe.root.Array<java.lang.Object> _g2 = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
		//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		{
			//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int _g3 = 0;
			//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int _g4 = pts.length;
			//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			while (( _g3 < _g4 ))
			{
				//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int i1 = _g3++;
				//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				_g2.push(1.0);
			}
			
		}
		
		//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		haxe.root.Array<java.lang.Object> weights = _g2;
		//line 379 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		return new verb.core.NurbsCurveData(1, knots, verb.eval.Eval.homogenize1d(pts.slice(0, null), verb.core._Data.Vector_Impl_.fromArray(weights)));
	}
	
	
	public static verb.core.NurbsSurfaceData extrudedSurface(org.apache.commons.math3.linear.ArrayRealVector axis, double length, verb.core.NurbsCurveData profile)
	{
		//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		try 
		{
			//line 397 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> controlPoints = new haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>(new haxe.root.Array[]{new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{}), new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{}), new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{})});
			//line 398 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> weights = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{}))});
			//line 400 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> prof_controlPoints = verb.eval.Eval.dehomogenize1d(profile.controlPoints);
			//line 401 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			org.apache.commons.math3.linear.ArrayRealVector prof_weights = verb.eval.Eval.weight1d(profile.controlPoints);
			//line 403 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			org.apache.commons.math3.linear.ArrayRealVector translation = verb.core.Vec.mul(length, axis);
			//line 404 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			org.apache.commons.math3.linear.ArrayRealVector halfTranslation = verb.core.Vec.mul(( 0.5 * length ), axis);
			//line 407 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			{
				//line 407 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g = 0;
				//line 407 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g1 = prof_controlPoints.length;
				//line 407 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				while (( _g < _g1 ))
				{
					//line 407 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int j = _g++;
					//line 409 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					controlPoints.__get(2).__set(j, prof_controlPoints.__get(j));
					//line 410 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					controlPoints.__get(1).__set(j, verb.core.Vec.add(halfTranslation, prof_controlPoints.__get(j)));
					//line 411 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					controlPoints.__get(0).__set(j, verb.core.Vec.add(translation, prof_controlPoints.__get(j)));
					//line 413 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					{
						//line 413 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						double v = ((org.apache.commons.math3.linear.ArrayRealVector) (prof_weights) ).getEntry(((int) (j) ));
						//line 413 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (weights.__get(0)) ).setEntry(((int) (j) ), ((double) (v) ));
					}
					
					//line 414 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					{
						//line 414 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						double v1 = ((org.apache.commons.math3.linear.ArrayRealVector) (prof_weights) ).getEntry(((int) (j) ));
						//line 414 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (weights.__get(1)) ).setEntry(((int) (j) ), ((double) (v1) ));
					}
					
					//line 415 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					{
						//line 415 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						double v2 = ((org.apache.commons.math3.linear.ArrayRealVector) (prof_weights) ).getEntry(((int) (j) ));
						//line 415 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (weights.__get(2)) ).setEntry(((int) (j) ), ((double) (v2) ));
					}
					
				}
				
			}
			
			//line 418 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			return new verb.core.NurbsSurfaceData(2, profile.degree, verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (0) ), ((java.lang.Object) (1) ), ((java.lang.Object) (1) ), ((java.lang.Object) (1) )})), profile.knots, verb.eval.Eval.homogenize2d(controlPoints, weights));
		}
		catch (java.lang.Throwable typedException)
		{
			//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static verb.core.NurbsSurfaceData cylindricalSurface(org.apache.commons.math3.linear.ArrayRealVector axis, org.apache.commons.math3.linear.ArrayRealVector xaxis, org.apache.commons.math3.linear.ArrayRealVector base, double height, double radius)
	{
		//line 437 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		org.apache.commons.math3.linear.ArrayRealVector yaxis = verb.core.Vec.cross(axis, xaxis);
		//line 437 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		double angle = ( 2.0 * java.lang.Math.PI );
		//line 437 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		verb.core.NurbsCurveData circ = verb.eval.Make.arc(base, xaxis, yaxis, radius, 0.0, ( 2 * java.lang.Math.PI ));
		//line 441 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		return verb.eval.Make.extrudedSurface(axis, height, circ);
	}
	
	
	public static verb.core.NurbsSurfaceData revolvedSurface(verb.core.NurbsCurveData profile, org.apache.commons.math3.linear.ArrayRealVector center, org.apache.commons.math3.linear.ArrayRealVector axis, double theta)
	{
		//line 461 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		try 
		{
			//line 463 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> prof_controlPoints = verb.eval.Eval.dehomogenize1d(profile.controlPoints);
			//line 463 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			org.apache.commons.math3.linear.ArrayRealVector prof_weights = verb.eval.Eval.weight1d(profile.controlPoints);
			//line 466 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int narcs = 0;
			//line 466 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			org.apache.commons.math3.linear.ArrayRealVector knotsU = null;
			//line 466 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			java.lang.Object controlPoints = null;
			//line 466 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			java.lang.Object weights = null;
			//line 468 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			if (( theta <= ( java.lang.Math.PI / 2 ) )) 
			{
				//line 469 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				narcs = 1;
				//line 470 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				knotsU = verb.core.Vec.zeros1d(( 6 + ( 2 * (( narcs - 1 )) ) ));
			}
			else
			{
				//line 472 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				if (( theta <= java.lang.Math.PI )) 
				{
					//line 473 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					narcs = 2;
					//line 474 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					knotsU = verb.core.Vec.zeros1d(( 6 + ( 2 * (( narcs - 1 )) ) ));
					//line 475 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					{
						//line 475 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).setEntry(((int) (4) ), ((double) (0.5) ));
						//line 475 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						double v = 0.5;
						//line 475 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).setEntry(((int) (3) ), ((double) (v) ));
					}
					
				}
				else
				{
					//line 476 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					if (( theta <= ( ( 3 * java.lang.Math.PI ) / 2 ) )) 
					{
						//line 477 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						narcs = 3;
						//line 478 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						knotsU = verb.core.Vec.zeros1d(( 6 + ( 2 * (( narcs - 1 )) ) ));
						//line 479 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						{
							//line 479 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).setEntry(((int) (4) ), ((double) (0.33333333333333331) ));
							//line 479 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							double v1 = 0.33333333333333331;
							//line 479 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).setEntry(((int) (3) ), ((double) (v1) ));
						}
						
						//line 480 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						{
							//line 480 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).setEntry(((int) (6) ), ((double) (0.66666666666666663) ));
							//line 480 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							double v2 = 0.66666666666666663;
							//line 480 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).setEntry(((int) (5) ), ((double) (v2) ));
						}
						
					}
					else
					{
						//line 482 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						narcs = 4;
						//line 483 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						knotsU = verb.core.Vec.zeros1d(( 6 + ( 2 * (( narcs - 1 )) ) ));
						//line 484 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						{
							//line 484 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).setEntry(((int) (4) ), ((double) (0.25) ));
							//line 484 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							double v3 = 0.25;
							//line 484 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).setEntry(((int) (3) ), ((double) (v3) ));
						}
						
						//line 485 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						{
							//line 485 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).setEntry(((int) (6) ), ((double) (0.5) ));
							//line 485 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							double v4 = 0.5;
							//line 485 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).setEntry(((int) (5) ), ((double) (v4) ));
						}
						
						//line 486 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						{
							//line 486 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).setEntry(((int) (8) ), ((double) (0.75) ));
							//line 486 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							double v5 = 0.75;
							//line 486 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).setEntry(((int) (7) ), ((double) (v5) ));
						}
						
					}
					
				}
				
			}
			
			//line 490 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			double dtheta = ( theta / narcs );
			//line 490 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int j = ( 3 + ( 2 * (( narcs - 1 )) ) );
			//line 495 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			{
				//line 495 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				{
					//line 496 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).setEntry(((int) (0) ), ((double) (0.0) ));
					//line 497 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).setEntry(((int) (j) ), ((double) (1.0) ));
				}
				
				//line 495 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				{
					//line 496 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).setEntry(((int) (1) ), ((double) (0.0) ));
					//line 497 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).setEntry(((int) (( j + 1 )) ), ((double) (1.0) ));
				}
				
				//line 495 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				{
					//line 496 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).setEntry(((int) (2) ), ((double) (0.0) ));
					//line 497 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (knotsU) ).setEntry(((int) (( j + 2 )) ), ((double) (1.0) ));
				}
				
			}
			
			//line 501 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int n = ( 2 * narcs );
			//line 501 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			double wm = java.lang.Math.cos(( dtheta / 2.0 ));
			//line 501 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			double angle = 0.0;
			//line 501 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			org.apache.commons.math3.linear.ArrayRealVector sines = verb.core.Vec.zeros1d(( narcs + 1 ));
			//line 501 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			org.apache.commons.math3.linear.ArrayRealVector cosines = verb.core.Vec.zeros1d(( narcs + 1 ));
			//line 501 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> controlPoints1 = verb.core.Vec.zeros3d(( ( 2 * narcs ) + 1 ), prof_controlPoints.length, 3);
			//line 501 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> weights1 = verb.core.Vec.zeros2d(( ( 2 * narcs ) + 1 ), prof_controlPoints.length);
			//line 510 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			{
				//line 510 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g = 1;
				//line 510 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g1 = ( narcs + 1 );
				//line 510 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				while (( _g < _g1 ))
				{
					//line 510 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int i = _g++;
					//line 511 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					angle += dtheta;
					//line 512 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					{
						//line 512 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						double v6 = java.lang.Math.cos(angle);
						//line 512 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (cosines) ).setEntry(((int) (i) ), ((double) (v6) ));
					}
					
					//line 513 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					{
						//line 513 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						double v7 = java.lang.Math.sin(angle);
						//line 513 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (sines) ).setEntry(((int) (i) ), ((double) (v7) ));
					}
					
				}
				
			}
			
			//line 518 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			{
				//line 518 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g2 = 0;
				//line 518 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g3 = prof_controlPoints.length;
				//line 518 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				while (( _g2 < _g3 ))
				{
					//line 518 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int j1 = _g2++;
					//line 521 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					org.apache.commons.math3.linear.ArrayRealVector O = verb.core.Trig.rayClosestPoint(prof_controlPoints.__get(j1), center, axis);
					//line 521 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					org.apache.commons.math3.linear.ArrayRealVector X = verb.core.Vec.sub(prof_controlPoints.__get(j1), O);
					//line 521 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					double r = verb.core.Vec.norm(X);
					//line 521 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					org.apache.commons.math3.linear.ArrayRealVector Y = verb.core.Vec.cross(axis, X);
					//line 529 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					if (( r > verb.core.Constants.EPSILON )) 
					{
						//line 530 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						X = verb.core.Vec.mul(( 1 / r ), X);
						//line 531 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						Y = verb.core.Vec.mul(( 1 / r ), Y);
					}
					
					//line 535 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					controlPoints1.__get(0).__set(j1, prof_controlPoints.__get(j1));
					//line 536 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					org.apache.commons.math3.linear.ArrayRealVector P0 = prof_controlPoints.__get(j1);
					//line 537 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					{
						//line 537 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						double v8 = ((org.apache.commons.math3.linear.ArrayRealVector) (prof_weights) ).getEntry(((int) (j1) ));
						//line 537 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						((org.apache.commons.math3.linear.ArrayRealVector) (weights1.__get(0)) ).setEntry(((int) (j1) ), ((double) (v8) ));
					}
					
					//line 540 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					org.apache.commons.math3.linear.ArrayRealVector T0 = Y;
					//line 540 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int index = 0;
					//line 540 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					double angle1 = 0.0;
					//line 545 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					{
						//line 545 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						int _g4 = 1;
						//line 545 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						int _g5 = ( narcs + 1 );
						//line 545 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						while (( _g4 < _g5 ))
						{
							//line 545 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							int i1 = _g4++;
							//line 549 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							org.apache.commons.math3.linear.ArrayRealVector P2 = ( (( r == 0 )) ? (O) : (verb.core.Vec.add(O, verb.core.Vec.add(verb.core.Vec.mul(( r * ((org.apache.commons.math3.linear.ArrayRealVector) (cosines) ).getEntry(((int) (i1) )) ), X), verb.core.Vec.mul(( r * ((org.apache.commons.math3.linear.ArrayRealVector) (sines) ).getEntry(((int) (i1) )) ), Y)))) );
							//line 551 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							controlPoints1.__get(( index + 2 )).__set(j1, P2);
							//line 552 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							{
								//line 552 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
								double v9 = ((org.apache.commons.math3.linear.ArrayRealVector) (prof_weights) ).getEntry(((int) (j1) ));
								//line 552 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
								((org.apache.commons.math3.linear.ArrayRealVector) (weights1.__get(( index + 2 ))) ).setEntry(((int) (j1) ), ((double) (v9) ));
							}
							
							//line 555 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							org.apache.commons.math3.linear.ArrayRealVector T2 = verb.core.Vec.sub(verb.core.Vec.mul(((org.apache.commons.math3.linear.ArrayRealVector) (cosines) ).getEntry(((int) (i1) )), Y), verb.core.Vec.mul(((org.apache.commons.math3.linear.ArrayRealVector) (sines) ).getEntry(((int) (i1) )), X));
							//line 558 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							if (( r == 0 )) 
							{
								//line 559 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
								controlPoints1.__get(( index + 1 )).__set(j1, O);
							}
							else
							{
								//line 562 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
								verb.core.CurveCurveIntersection inters = verb.eval.Intersect.rays(P0, verb.core.Vec.mul(( 1 / verb.core.Vec.norm(T0) ), T0), P2, verb.core.Vec.mul(( 1 / verb.core.Vec.norm(T2) ), T2));
								//line 563 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
								org.apache.commons.math3.linear.ArrayRealVector P1 = verb.core.Vec.add(P0, verb.core.Vec.mul(inters.u0, T0));
								//line 565 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
								controlPoints1.__get(( index + 1 )).__set(j1, P1);
							}
							
							//line 568 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							{
								//line 568 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
								double v10 = ( wm * ((org.apache.commons.math3.linear.ArrayRealVector) (prof_weights) ).getEntry(((int) (j1) )) );
								//line 568 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
								((org.apache.commons.math3.linear.ArrayRealVector) (weights1.__get(( index + 1 ))) ).setEntry(((int) (j1) ), ((double) (v10) ));
							}
							
							//line 570 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							index += 2;
							//line 572 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							if (( i1 < narcs )) 
							{
								//line 573 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
								P0 = P2;
								//line 574 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
								T0 = T2;
							}
							
						}
						
					}
					
				}
				
			}
			
			//line 579 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			return new verb.core.NurbsSurfaceData(2, profile.degree, knotsU, profile.knots, verb.eval.Eval.homogenize2d(controlPoints1, weights1));
		}
		catch (java.lang.Throwable typedException)
		{
			//line 461 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static verb.core.NurbsSurfaceData sphericalSurface(org.apache.commons.math3.linear.ArrayRealVector center, org.apache.commons.math3.linear.ArrayRealVector axis, org.apache.commons.math3.linear.ArrayRealVector xaxis, double radius)
	{
		//line 599 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		verb.core.NurbsCurveData arc = verb.eval.Make.arc(center, verb.core.Vec.mul(-1.0, axis), xaxis, radius, 0.0, java.lang.Math.PI);
		//line 600 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		return verb.eval.Make.revolvedSurface(arc, center, axis, ( 2 * java.lang.Math.PI ));
	}
	
	
	public static verb.core.NurbsSurfaceData conicalSurface(org.apache.commons.math3.linear.ArrayRealVector axis, org.apache.commons.math3.linear.ArrayRealVector xaxis, org.apache.commons.math3.linear.ArrayRealVector base, double height, double radius)
	{
		//line 620 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		double angle = ( 2 * java.lang.Math.PI );
		//line 620 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		int prof_degree = 1;
		//line 620 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> prof_ctrl_pts = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{verb.core.Vec.add(base, verb.core.Vec.mul(height, axis)), verb.core.Vec.add(base, verb.core.Vec.mul(radius, xaxis))});
		//line 620 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		haxe.root.Array<java.lang.Object> prof_knots = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.0) ), ((java.lang.Object) (0.0) ), ((java.lang.Object) (1.0) ), ((java.lang.Object) (1.0) )});
		//line 620 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		haxe.root.Array<java.lang.Object> prof_weights = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (1.0) ), ((java.lang.Object) (1.0) )});
		//line 620 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		verb.core.NurbsCurveData prof = new verb.core.NurbsCurveData(prof_degree, verb.core._Data.Vector_Impl_.fromArray(prof_knots), verb.eval.Eval.homogenize1d(prof_ctrl_pts, verb.core._Data.Vector_Impl_.fromArray(prof_weights)));
		//line 627 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		return verb.eval.Make.revolvedSurface(prof, base, axis, angle);
	}
	
	
	public static verb.core.NurbsCurveData rationalInterpCurve(haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> points, java.lang.Object degree, java.lang.Object homogeneousPoints, org.apache.commons.math3.linear.ArrayRealVector start_tangent, org.apache.commons.math3.linear.ArrayRealVector end_tangent)
	{
		//line 635 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
		try 
		{
			//line 635 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			boolean homogeneousPoints1 = ( (haxe.lang.Runtime.eq(homogeneousPoints, null)) ? (false) : (haxe.lang.Runtime.toBool(((java.lang.Boolean) (homogeneousPoints) ))) );
			//line 635 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int degree1 = ( (haxe.lang.Runtime.eq(degree, null)) ? (3) : (((int) (haxe.lang.Runtime.toInt(degree)) )) );
			//line 646 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			if (( points.length < ( degree1 + 1 ) )) 
			{
				//line 647 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown(( ( "You need to supply at least degree + 1 points! You only supplied " + points.length ) + " points." ))) );
			}
			
			//line 650 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			haxe.root.Array<java.lang.Object> us = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.0) )});
			//line 651 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			{
				//line 651 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g = 1;
				//line 651 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g1 = points.length;
				//line 651 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				while (( _g < _g1 ))
				{
					//line 651 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int i = _g++;
					//line 652 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					double chord = verb.core.Vec.norm(verb.core.Vec.sub(points.__get(i), points.__get(( i - 1 ))));
					//line 653 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					double last = ((double) (haxe.lang.Runtime.toDouble(us.__get(( us.length - 1 )))) );
					//line 654 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					us.push(( last + chord ));
				}
				
			}
			
			//line 658 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			double max = ((double) (haxe.lang.Runtime.toDouble(us.__get(( us.length - 1 )))) );
			//line 659 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			{
				//line 659 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g2 = 0;
				//line 659 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g3 = us.length;
				//line 659 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				while (( _g2 < _g3 ))
				{
					//line 659 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int i1 = _g2++;
					//line 660 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					double __temp_expr1 = ((double) (haxe.lang.Runtime.toDouble(us.__set(i1, ( ((double) (haxe.lang.Runtime.toDouble(us.__get(i1))) ) / max )))) );
				}
				
			}
			
			//line 663 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			haxe.root.Array<java.lang.Object> knotsStart = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (verb.core.Vec.rep(((int) (( degree1 + 1 )) ), ((java.lang.Object) (0.0) ))) )) );
			//line 667 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			boolean hasTangents = ( ( start_tangent != null ) && ( end_tangent != null ) );
			//line 668 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int start = ( (hasTangents) ? (0) : (1) );
			//line 669 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int end = ( (hasTangents) ? (( ( us.length - degree1 ) + 1 )) : (( us.length - degree1 )) );
			//line 671 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			{
				//line 671 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g4 = start;
				//line 671 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g5 = end;
				//line 671 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				while (( _g4 < _g5 ))
				{
					//line 671 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int i2 = _g4++;
					//line 672 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					double weightSums = 0.0;
					//line 673 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					{
						//line 673 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						int _g6 = 0;
						//line 673 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						int _g7 = degree1;
						//line 673 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						while (( _g6 < _g7 ))
						{
							//line 673 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							int j = _g6++;
							//line 674 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							weightSums += ((double) (haxe.lang.Runtime.toDouble(us.__get(( i2 + j )))) );
						}
						
					}
					
					//line 677 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					knotsStart.push(( ( ((double) (1) ) / degree1 ) * weightSums ));
				}
				
			}
			
			//line 680 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			haxe.root.Array<java.lang.Object> knots = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (knotsStart.concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (verb.core.Vec.rep(((int) (( degree1 + 1 )) ), ((java.lang.Object) (1.0) ))) )) )) )) ))) )) );
			//line 683 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> A = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{});
			//line 684 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int n = ( (hasTangents) ? (( points.length + 1 )) : (( points.length - 1 )) );
			//line 686 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int lst = ( (hasTangents) ? (1) : (0) );
			//line 687 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int ld = ( (hasTangents) ? (( points.length - (( degree1 - 1 )) )) : (( points.length - (( degree1 + 1 )) )) );
			//line 689 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			{
				//line 689 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g8 = 0;
				//line 689 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				while (( _g8 < us.length ))
				{
					//line 689 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					double u = ((double) (haxe.lang.Runtime.toDouble(us.__get(_g8))) );
					//line 689 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					 ++ _g8;
					//line 690 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int span = verb.eval.Eval.knotSpanGivenN(n, degree1, u, verb.core._Data.Vector_Impl_.fromArray(knots));
					//line 691 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					org.apache.commons.math3.linear.ArrayRealVector basisFuncs = verb.eval.Eval.basisFunctionsGivenKnotSpanIndex(span, u, degree1, verb.core._Data.Vector_Impl_.fromArray(knots));
					//line 693 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int ls = ( span - degree1 );
					//line 695 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					org.apache.commons.math3.linear.ArrayRealVector rowstart = verb.core.Vec.zeros1d(ls);
					//line 696 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					org.apache.commons.math3.linear.ArrayRealVector rowend = verb.core.Vec.zeros1d(( ld - ls ));
					//line 698 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					A.push(verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.RealVector) (((org.apache.commons.math3.linear.ArrayRealVector) (verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.RealVector) (((org.apache.commons.math3.linear.ArrayRealVector) (rowstart) ).append(((org.apache.commons.math3.linear.ArrayRealVector) (basisFuncs) ))) )))) ).append(((org.apache.commons.math3.linear.ArrayRealVector) (rowend) ))) ))));
				}
				
			}
			
			//line 701 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			if (hasTangents) 
			{
				//line 702 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int ln = ( verb.core._Data.Vector_Impl_.get_length(A.__get(0)) - 2 );
				//line 704 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				org.apache.commons.math3.linear.ArrayRealVector this1 = verb.core.Vec.zeros1d(ln);
				//line 704 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				haxe.root.Array<java.lang.Object> out = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
				//line 704 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				{
					//line 704 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int _g9 = 0;
					//line 704 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int _g10 = this1.getDimension();
					//line 704 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					while (( _g9 < _g10 ))
					{
						//line 704 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						int i3 = _g9++;
						//line 704 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						out.push(this1.getEntry(((int) (i3) )));
					}
					
				}
				
				//line 704 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				org.apache.commons.math3.linear.ArrayRealVector tanRow0 = verb.core._Data.Vector_Impl_.fromArray(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (-1.0) ), ((java.lang.Object) (1.0) )}).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (out) )) ))) )) ));
				//line 705 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				org.apache.commons.math3.linear.ArrayRealVector tanRow1 = verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.RealVector) (((org.apache.commons.math3.linear.ArrayRealVector) (verb.core.Vec.zeros1d(ln)) ).append(((org.apache.commons.math3.linear.ArrayRealVector) (verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (-1.0) ), ((java.lang.Object) (1.0) )}))) ))) )));
				//line 707 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				verb.core.ArrayExtensions.spliceAndInsert(((haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>) (A) ), ((int) (1) ), ((int) (0) ), ((org.apache.commons.math3.linear.ArrayRealVector) (tanRow0) ));
				//line 707 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				java.lang.Object __temp_expr2 = ((java.lang.Object) (null) );
				//line 708 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				verb.core.ArrayExtensions.spliceAndInsert(((haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>) (A) ), ((int) (( A.length - 1 )) ), ((int) (0) ), ((org.apache.commons.math3.linear.ArrayRealVector) (tanRow1) ));
				//line 708 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				java.lang.Object __temp_expr3 = ((java.lang.Object) (null) );
			}
			
			//line 712 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			int dim = verb.core._Data.Vector_Impl_.get_length(points.__get(0));
			//line 713 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> xs = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{});
			//line 715 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			double mult1 = ( (( 1 - ((double) (haxe.lang.Runtime.toDouble(knots.__get(( ( knots.length - degree1 ) - 2 )))) ) )) / degree1 );
			//line 716 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			double mult0 = ( ((double) (haxe.lang.Runtime.toDouble(knots.__get(( degree1 + 1 )))) ) / degree1 );
			//line 718 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			{
				//line 718 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g11 = 0;
				//line 718 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				int _g12 = dim;
				//line 718 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				while (( _g11 < _g12 ))
				{
					//line 718 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					int i4 = _g11++;
					//line 719 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					haxe.root.Array<java.lang.Object> b = null;
					//line 721 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					if ( ! (hasTangents) ) 
					{
						//line 722 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						haxe.root.Array<java.lang.Object> ret = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (points.length) ))) )) );
						//line 722 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						{
							//line 722 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							int _g13 = 0;
							//line 722 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							int _g14 = points.length;
							//line 722 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							while (( _g13 < _g14 ))
							{
								//line 722 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
								int i5 = _g13++;
								//line 722 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
								double __temp_expr4 = ((double) (haxe.lang.Runtime.toDouble(ret.__set(i5, ((org.apache.commons.math3.linear.ArrayRealVector) (points.__get(i5)) ).getEntry(((int) (i4) ))))) );
							}
							
						}
						
						//line 722 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						b = ret;
					}
					else
					{
						//line 727 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						b = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (points.__get(0)) ).getEntry(((int) (i4) ))) )});
						//line 728 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						b.push(( mult0 * ((org.apache.commons.math3.linear.ArrayRealVector) (start_tangent) ).getEntry(((int) (i4) )) ));
						//line 729 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						{
							//line 729 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							int _g15 = 1;
							//line 729 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							int _g16 = ( points.length - 1 );
							//line 729 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
							while (( _g15 < _g16 ))
							{
								//line 729 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
								int j1 = _g15++;
								//line 729 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
								b.push(((org.apache.commons.math3.linear.ArrayRealVector) (points.__get(j1)) ).getEntry(((int) (i4) )));
							}
							
						}
						
						//line 730 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						b.push(( mult1 * ((org.apache.commons.math3.linear.ArrayRealVector) (end_tangent) ).getEntry(((int) (i4) )) ));
						//line 731 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
						b.push(((org.apache.commons.math3.linear.ArrayRealVector) (verb.core.ArrayExtensions.last(((haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>) (points) ))) ).getEntry(((int) (i4) )));
					}
					
					//line 734 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					org.apache.commons.math3.linear.ArrayRealVector x = verb.core.Mat.solve(A, verb.core._Data.Vector_Impl_.fromArray(b));
					//line 735 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
					xs.push(x);
				}
				
			}
			
			//line 738 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> controlPts = verb.core.Mat.transpose(xs);
			//line 740 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			if ( ! (homogeneousPoints1) ) 
			{
				//line 741 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				haxe.root.Array<java.lang.Object> weights = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (verb.core.Vec.rep(((int) (controlPts.length) ), ((java.lang.Object) (1.0) ))) )) );
				//line 742 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
				controlPts = verb.eval.Eval.homogenize1d(controlPts, verb.core._Data.Vector_Impl_.fromArray(weights));
			}
			
			//line 745 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			return new verb.core.NurbsCurveData(degree1, verb.core._Data.Vector_Impl_.fromArray(knots), controlPts);
		}
		catch (java.lang.Throwable typedException)
		{
			//line 631 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Make.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
}


