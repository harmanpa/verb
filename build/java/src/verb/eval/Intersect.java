// Generated by Haxe 4.1.4
package verb.eval;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Intersect extends haxe.lang.HxObject
{
	public Intersect(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Intersect()
	{
		//line 36 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		verb.eval.Intersect.__hx_ctor_verb_eval_Intersect(this);
	}
	
	
	protected static void __hx_ctor_verb_eval_Intersect(verb.eval.Intersect __hx_this)
	{
	}
	
	
	public static haxe.root.Array<verb.core.NurbsCurveData> surfaces(verb.core.NurbsSurfaceData surface0, verb.core.NurbsSurfaceData surface1, double tol)
	{
		//line 52 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		verb.core.MeshData tess1 = verb.eval.Tess.rationalSurfaceAdaptive(surface0, null);
		//line 53 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		verb.core.MeshData tess2 = verb.eval.Tess.rationalSurfaceAdaptive(surface1, null);
		//line 56 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<haxe.root.Array<verb.core.MeshIntersectionPoint>> resApprox = verb.eval.Intersect.meshes(tess1, tess2, null, null);
		//line 59 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<haxe.root.Array<verb.core.SurfaceSurfaceIntersectionPoint>> ret = ((haxe.root.Array<haxe.root.Array<verb.core.SurfaceSurfaceIntersectionPoint>>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (resApprox.length) ))) )) );
		//line 59 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		{
			//line 59 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g = 0;
			//line 59 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g1 = resApprox.length;
			//line 59 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			while (( _g < _g1 ))
			{
				//line 59 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int i = _g++;
				//line 60 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				haxe.root.Array<verb.core.MeshIntersectionPoint> pl = resApprox.__get(i);
				//line 60 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				haxe.root.Array<verb.core.SurfaceSurfaceIntersectionPoint> ret1 = ((haxe.root.Array<verb.core.SurfaceSurfaceIntersectionPoint>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (pl.length) ))) )) );
				//line 60 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				{
					//line 60 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					int _g2 = 0;
					//line 60 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					int _g3 = pl.length;
					//line 60 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					while (( _g2 < _g3 ))
					{
						//line 60 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
						int i1 = _g2++;
						//line 61 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
						verb.core.MeshIntersectionPoint inter = pl.__get(i1);
						//line 60 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
						ret1.__set(i1, verb.eval.Intersect.surfacesAtPointWithEstimate(surface0, surface1, inter.uv0, inter.uv1, tol));
					}
					
				}
				
				//line 59 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				ret.__set(i, ret1);
			}
			
		}
		
		//line 59 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<haxe.root.Array<verb.core.SurfaceSurfaceIntersectionPoint>> exactPls = ret;
		//line 66 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.core.NurbsCurveData> ret2 = ((haxe.root.Array<verb.core.NurbsCurveData>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (exactPls.length) ))) )) );
		//line 66 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		{
			//line 66 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g4 = 0;
			//line 66 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g5 = exactPls.length;
			//line 66 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			while (( _g4 < _g5 ))
			{
				//line 66 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int i2 = _g4++;
				//line 67 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				haxe.root.Array<verb.core.SurfaceSurfaceIntersectionPoint> x = exactPls.__get(i2);
				//line 67 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> ret3 = ((haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (x.length) ))) )) );
				//line 67 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				{
					//line 67 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					int _g6 = 0;
					//line 67 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					int _g7 = x.length;
					//line 67 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					while (( _g6 < _g7 ))
					{
						//line 67 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
						int i3 = _g6++;
						//line 67 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
						ret3.__set(i3, x.__get(i3).point);
					}
					
				}
				
				//line 66 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				ret2.__set(i2, verb.eval.Make.rationalInterpCurve(ret3, 3, null, null, null));
			}
			
		}
		
		//line 66 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		return ret2;
	}
	
	
	public static verb.core.SurfaceSurfaceIntersectionPoint surfacesAtPointWithEstimate(verb.core.NurbsSurfaceData surface0, verb.core.NurbsSurfaceData surface1, org.apache.commons.math3.linear.ArrayRealVector uv1, org.apache.commons.math3.linear.ArrayRealVector uv2, double tol)
	{
		//line 89 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		try 
		{
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> pds = null;
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			org.apache.commons.math3.linear.ArrayRealVector p = null;
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			org.apache.commons.math3.linear.ArrayRealVector pn = null;
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			org.apache.commons.math3.linear.ArrayRealVector pu = null;
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			org.apache.commons.math3.linear.ArrayRealVector pv = null;
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double pd = 0.0;
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> qds = null;
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			org.apache.commons.math3.linear.ArrayRealVector q = null;
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			org.apache.commons.math3.linear.ArrayRealVector qn = null;
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			org.apache.commons.math3.linear.ArrayRealVector qu = null;
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			org.apache.commons.math3.linear.ArrayRealVector qv = null;
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double qd = 0.0;
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double dist = 0.0;
			//line 92 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int maxits = 5;
			//line 93 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int its = 0;
			//line 95 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			while (true)
			{
				//line 97 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				pds = verb.eval.Eval.rationalSurfaceDerivatives(surface0, ((org.apache.commons.math3.linear.ArrayRealVector) (uv1) ).getEntry(((int) (0) )), ((org.apache.commons.math3.linear.ArrayRealVector) (uv1) ).getEntry(((int) (1) )), 1);
				//line 98 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				p = pds.__get(0).__get(0);
				//line 99 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				pu = pds.__get(1).__get(0);
				//line 100 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				pv = pds.__get(0).__get(1);
				//line 101 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				pn = verb.core.Vec.normalized(verb.core.Vec.cross(pu, pv));
				//line 102 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				pd = verb.core.Vec.dot(pn, p);
				//line 104 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				qds = verb.eval.Eval.rationalSurfaceDerivatives(surface1, ((org.apache.commons.math3.linear.ArrayRealVector) (uv2) ).getEntry(((int) (0) )), ((org.apache.commons.math3.linear.ArrayRealVector) (uv2) ).getEntry(((int) (1) )), 1);
				//line 105 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				q = qds.__get(0).__get(0);
				//line 106 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				qu = qds.__get(1).__get(0);
				//line 107 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				qv = qds.__get(0).__get(1);
				//line 108 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				qn = verb.core.Vec.normalized(verb.core.Vec.cross(qu, qv));
				//line 109 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				qd = verb.core.Vec.dot(qn, q);
				//line 112 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				dist = verb.core.Vec.distSquared(p, q);
				//line 114 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				if (( dist < ( tol * tol ) )) 
				{
					//line 115 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					break;
				}
				
				//line 119 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				org.apache.commons.math3.linear.ArrayRealVector fn = verb.core.Vec.normalized(verb.core.Vec.cross(pn, qn));
				//line 120 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				double fd = verb.core.Vec.dot(fn, p);
				//line 123 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				org.apache.commons.math3.linear.ArrayRealVector x = verb.eval.Intersect.threePlanes(pn, pd, qn, qd, fn, fd);
				//line 125 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				if (( x == null )) 
				{
					//line 125 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					throw ((java.lang.RuntimeException) (haxe.Exception.thrown("panic!")) );
				}
				
				//line 130 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				org.apache.commons.math3.linear.ArrayRealVector pdif = verb.core.Vec.sub(x, p);
				//line 131 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				org.apache.commons.math3.linear.ArrayRealVector qdif = verb.core.Vec.sub(x, q);
				//line 133 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				org.apache.commons.math3.linear.ArrayRealVector rw = verb.core.Vec.cross(pu, pn);
				//line 134 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				org.apache.commons.math3.linear.ArrayRealVector rt = verb.core.Vec.cross(pv, pn);
				//line 136 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				org.apache.commons.math3.linear.ArrayRealVector su = verb.core.Vec.cross(qu, qn);
				//line 137 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				org.apache.commons.math3.linear.ArrayRealVector sv = verb.core.Vec.cross(qv, qn);
				//line 139 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				double dw = ( verb.core.Vec.dot(rt, pdif) / verb.core.Vec.dot(rt, pu) );
				//line 140 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				double dt = ( verb.core.Vec.dot(rw, pdif) / verb.core.Vec.dot(rw, pv) );
				//line 142 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				double du = ( verb.core.Vec.dot(sv, qdif) / verb.core.Vec.dot(sv, qu) );
				//line 143 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				double dv = ( verb.core.Vec.dot(su, qdif) / verb.core.Vec.dot(su, qv) );
				//line 145 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				uv1 = verb.core.Vec.add(verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (dw) ), ((java.lang.Object) (dt) )})), uv1);
				//line 146 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				uv2 = verb.core.Vec.add(verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (du) ), ((java.lang.Object) (dv) )})), uv2);
				//line 149 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				 ++ its;
				//line 95 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				if ( ! ((( its < maxits ))) ) 
				{
					//line 95 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					break;
				}
				
			}
			
			//line 153 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return new verb.core.SurfaceSurfaceIntersectionPoint(uv1, uv2, p, dist);
		}
		catch (java.lang.Throwable typedException)
		{
			//line 85 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<haxe.root.Array<verb.core.MeshIntersectionPoint>> meshes(verb.core.MeshData mesh0, verb.core.MeshData mesh1, verb.eval.IBoundingBoxTree<java.lang.Object> bbtree0, verb.eval.IBoundingBoxTree<java.lang.Object> bbtree1)
	{
		//line 174 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( bbtree0 == null )) 
		{
			//line 174 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			bbtree0 = new verb.core.LazyMeshBoundingBoxTree(mesh0, null);
		}
		
		//line 175 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( bbtree1 == null )) 
		{
			//line 175 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			bbtree1 = new verb.core.LazyMeshBoundingBoxTree(mesh1, null);
		}
		
		//line 178 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.core.Pair<java.lang.Object, java.lang.Object>> bbints = ((haxe.root.Array<verb.core.Pair<java.lang.Object, java.lang.Object>>) (((haxe.root.Array) (verb.eval.Intersect.boundingBoxTrees(((verb.eval.IBoundingBoxTree<java.lang.Object>) (((verb.eval.IBoundingBoxTree) (bbtree0) )) ), ((verb.eval.IBoundingBoxTree<java.lang.Object>) (((verb.eval.IBoundingBoxTree) (bbtree1) )) ), ((java.lang.Object) (0) ))) )) );
		//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.core.Interval<verb.core.MeshIntersectionPoint>> ret = ((haxe.root.Array<verb.core.Interval<verb.core.MeshIntersectionPoint>>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (bbints.length) ))) )) );
		//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		{
			//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g = 0;
			//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g1 = bbints.length;
			//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			while (( _g < _g1 ))
			{
				//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int i = _g++;
				//line 182 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				verb.core.Pair<java.lang.Object, java.lang.Object> ids = bbints.__get(i);
				//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				ret.__set(i, verb.eval.Intersect.triangles(mesh0, ((int) (haxe.lang.Runtime.toInt(ids.item0)) ), mesh1, ((int) (haxe.lang.Runtime.toInt(ids.item1)) )));
			}
			
		}
		
		//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.core.Interval<verb.core.MeshIntersectionPoint>> _this = ret;
		//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.core.Interval<verb.core.MeshIntersectionPoint>> ret1 = new haxe.root.Array<verb.core.Interval<verb.core.MeshIntersectionPoint>>(new verb.core.Interval[]{});
		//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		{
			//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g2 = 0;
			//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g3 = _this.length;
			//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			while (( _g2 < _g3 ))
			{
				//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int i1 = _g2++;
				//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				verb.core.Interval<verb.core.MeshIntersectionPoint> elt = _this.__get(i1);
				//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				if (( elt != null )) 
				{
					//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					ret1.push(elt);
				}
				
			}
			
		}
		
		//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.core.Interval<verb.core.MeshIntersectionPoint>> _this1 = ret1;
		//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.core.Interval<verb.core.MeshIntersectionPoint>> ret2 = new haxe.root.Array<verb.core.Interval<verb.core.MeshIntersectionPoint>>(new verb.core.Interval[]{});
		//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		{
			//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g4 = 0;
			//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g5 = _this1.length;
			//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			while (( _g4 < _g5 ))
			{
				//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int i2 = _g4++;
				//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				verb.core.Interval<verb.core.MeshIntersectionPoint> elt1 = _this1.__get(i2);
				//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				if (( verb.core.Vec.distSquared(elt1.min.point, elt1.max.point) > verb.core.Constants.EPSILON )) 
				{
					//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					ret2.push(elt1);
				}
				
			}
			
		}
		
		//line 181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.core.Interval<verb.core.MeshIntersectionPoint>> segments = ((haxe.root.Array<verb.core.Interval<verb.core.MeshIntersectionPoint>>) (verb.core.ArrayExtensions.unique(((haxe.root.Array<verb.core.Interval<verb.core.MeshIntersectionPoint>>) (ret2) ), ((haxe.lang.Function) (( (( verb.eval.Intersect_meshes_187__Fun.__hx_current != null )) ? (verb.eval.Intersect_meshes_187__Fun.__hx_current) : (verb.eval.Intersect_meshes_187__Fun.__hx_current = ((verb.eval.Intersect_meshes_187__Fun) (new verb.eval.Intersect_meshes_187__Fun()) )) )) ))) );
		//line 209 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		return verb.eval.Intersect.makeMeshIntersectionPolylines(segments);
	}
	
	
	public static haxe.root.Array<haxe.root.Array<haxe.root.Array<verb.core.MeshIntersectionPoint>>> meshSlices(verb.core.MeshData mesh, double min, double max, double step)
	{
		//line 227 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		try 
		{
			//line 228 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			verb.core.MeshBoundingBoxTree bbtree = new verb.core.MeshBoundingBoxTree(mesh, null);
			//line 229 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			verb.core.BoundingBox bb = bbtree.boundingBox();
			//line 231 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double x0 = ((org.apache.commons.math3.linear.ArrayRealVector) (bb.min) ).getEntry(((int) (0) ));
			//line 232 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double y0 = ((org.apache.commons.math3.linear.ArrayRealVector) (bb.min) ).getEntry(((int) (1) ));
			//line 234 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double x1 = ((org.apache.commons.math3.linear.ArrayRealVector) (bb.max) ).getEntry(((int) (0) ));
			//line 235 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double y1 = ((org.apache.commons.math3.linear.ArrayRealVector) (bb.max) ).getEntry(((int) (1) ));
			//line 237 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			org.apache.commons.math3.linear.ArrayRealVector span = verb.core.Vec.span(min, max, step);
			//line 238 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.root.Array<haxe.root.Array<haxe.root.Array<verb.core.MeshIntersectionPoint>>> slices = new haxe.root.Array<haxe.root.Array<haxe.root.Array<verb.core.MeshIntersectionPoint>>>(new haxe.root.Array[]{});
			//line 240 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			{
				//line 240 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int _g = 0;
				//line 240 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				while (( _g < verb.core._Data.Vector_Impl_.get_length(span) ))
				{
					//line 240 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					double z = ((org.apache.commons.math3.linear.ArrayRealVector) (span) ).getEntry(((int) (_g) ));
					//line 240 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					 ++ _g;
					//line 241 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> pts = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (x0) ), ((java.lang.Object) (y0) ), ((java.lang.Object) (z) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (x1) ), ((java.lang.Object) (y0) ), ((java.lang.Object) (z) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (x1) ), ((java.lang.Object) (y1) ), ((java.lang.Object) (z) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (x0) ), ((java.lang.Object) (y1) ), ((java.lang.Object) (z) )}))});
					//line 242 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> uvs = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.0) ), ((java.lang.Object) (0.0) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (1.0) ), ((java.lang.Object) (0.0) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (1.0) ), ((java.lang.Object) (1.0) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.0) ), ((java.lang.Object) (1.0) )}))});
					//line 243 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					haxe.root.Array<haxe.root.Array<java.lang.Object>> faces = new haxe.root.Array<haxe.root.Array<java.lang.Object>>(new haxe.root.Array[]{new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 1, 2}), new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{0, 2, 3})});
					//line 244 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					verb.core.MeshData plane = new verb.core.MeshData(faces, pts, null, uvs);
					//line 246 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					slices.push(verb.eval.Intersect.meshes(mesh, plane, bbtree, null));
				}
				
			}
			
			//line 249 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return slices;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 227 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<haxe.root.Array<verb.core.MeshIntersectionPoint>> makeMeshIntersectionPolylines(haxe.root.Array<verb.core.Interval<verb.core.MeshIntersectionPoint>> segments)
	{
		//line 264 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( segments.length == 0 )) 
		{
			//line 264 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return new haxe.root.Array<haxe.root.Array<verb.core.MeshIntersectionPoint>>(new haxe.root.Array[]{});
		}
		
		//line 267 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		{
			//line 267 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g = 0;
			//line 267 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			while (( _g < segments.length ))
			{
				//line 267 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				verb.core.Interval<verb.core.MeshIntersectionPoint> s = segments.__get(_g);
				//line 267 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				 ++ _g;
				//line 268 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				s.max.opp = s.min;
				//line 269 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				s.min.opp = s.max;
			}
			
		}
		
		//line 273 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		verb.core.KdTree_verb_core_MeshIntersectionPoint tree = verb.eval.Intersect.kdTreeFromSegments(segments);
		//line 276 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.core.MeshIntersectionPoint> ends = new haxe.root.Array<verb.core.MeshIntersectionPoint>(new verb.core.MeshIntersectionPoint[]{});
		//line 278 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		{
			//line 278 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g1 = 0;
			//line 278 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			while (( _g1 < segments.length ))
			{
				//line 278 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				verb.core.Interval<verb.core.MeshIntersectionPoint> seg = segments.__get(_g1);
				//line 278 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				 ++ _g1;
				//line 279 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				ends.push(seg.min);
				//line 280 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				ends.push(seg.max);
			}
			
		}
		
		//line 284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		{
			//line 284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g2 = 0;
			//line 284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			while (( _g2 < ends.length ))
			{
				//line 284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				verb.core.MeshIntersectionPoint segEnd = ends.__get(_g2);
				//line 284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				 ++ _g2;
				//line 285 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				if (( segEnd.adj != null )) 
				{
					//line 285 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					continue;
				}
				
				//line 287 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				verb.core.MeshIntersectionPoint adjEnd = verb.eval.Intersect.lookupAdjacentSegment(segEnd, tree, segments.length);
				//line 289 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				if (( ( adjEnd != null ) && ( adjEnd.adj == null ) )) 
				{
					//line 290 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					segEnd.adj = adjEnd;
					//line 291 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					adjEnd.adj = segEnd;
				}
				
			}
			
		}
		
		//line 296 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.core.MeshIntersectionPoint> ret = new haxe.root.Array<verb.core.MeshIntersectionPoint>(new verb.core.MeshIntersectionPoint[]{});
		//line 296 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		{
			//line 296 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g3 = 0;
			//line 296 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g4 = ends.length;
			//line 296 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			while (( _g3 < _g4 ))
			{
				//line 296 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int i = _g3++;
				//line 296 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				verb.core.MeshIntersectionPoint elt = ends.__get(i);
				//line 296 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				if (( elt.adj == null )) 
				{
					//line 296 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					ret.push(elt);
				}
				
			}
			
		}
		
		//line 296 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.core.MeshIntersectionPoint> freeEnds = ret;
		//line 301 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( freeEnds.length == 0 )) 
		{
			//line 302 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			freeEnds = ends;
		}
		
		//line 305 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<haxe.root.Array<verb.core.MeshIntersectionPoint>> pls = new haxe.root.Array<haxe.root.Array<verb.core.MeshIntersectionPoint>>(new haxe.root.Array[]{});
		//line 306 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		int numVisitedEnds = 0;
		//line 307 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		boolean loopDetected = false;
		//line 309 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		while (( freeEnds.length != 0 ))
		{
			//line 311 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			verb.core.MeshIntersectionPoint end = ((verb.core.MeshIntersectionPoint) (freeEnds.pop()) );
			//line 313 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			if ( ! (end.visited) ) 
			{
				//line 316 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				haxe.root.Array<verb.core.MeshIntersectionPoint> pl = new haxe.root.Array<verb.core.MeshIntersectionPoint>(new verb.core.MeshIntersectionPoint[]{});
				//line 317 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				verb.core.MeshIntersectionPoint curEnd = end;
				//line 319 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				while (( curEnd != null ))
				{
					//line 322 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					if (curEnd.visited) 
					{
						//line 323 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
						break;
					}
					
					//line 327 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					curEnd.visited = true;
					//line 328 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					curEnd.opp.visited = true;
					//line 330 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					pl.push(curEnd);
					//line 331 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					numVisitedEnds += 2;
					//line 333 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					curEnd = curEnd.opp.adj;
					//line 336 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					if (( curEnd == end )) 
					{
						//line 337 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
						break;
					}
					
				}
				
				//line 341 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				if (( pl.length > 0 )) 
				{
					//line 342 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					pl.push(pl.__get(( pl.length - 1 )).opp);
					//line 343 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					pls.push(pl);
				}
				
			}
			
			//line 347 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			if (( ( ( freeEnds.length == 0 ) && ( ends.length > 0 ) ) && (( loopDetected || ( numVisitedEnds < ends.length ) )) )) 
			{
				//line 348 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				loopDetected = true;
				//line 349 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				verb.core.MeshIntersectionPoint e = ((verb.core.MeshIntersectionPoint) (ends.pop()) );
				//line 350 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				freeEnds.push(e);
			}
			
		}
		
		//line 354 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		return pls;
	}
	
	
	public static verb.core.KdTree_verb_core_MeshIntersectionPoint kdTreeFromSegments(haxe.root.Array<verb.core.Interval<verb.core.MeshIntersectionPoint>> segments)
	{
		//line 369 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.core.KdPoint_verb_core_MeshIntersectionPoint> treePoints = new haxe.root.Array<verb.core.KdPoint_verb_core_MeshIntersectionPoint>(new verb.core.KdPoint_verb_core_MeshIntersectionPoint[]{});
		//line 372 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		{
			//line 372 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g = 0;
			//line 372 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			while (( _g < segments.length ))
			{
				//line 372 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				verb.core.Interval<verb.core.MeshIntersectionPoint> seg = segments.__get(_g);
				//line 372 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				 ++ _g;
				//line 373 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				treePoints.push(new verb.core.KdPoint_verb_core_MeshIntersectionPoint(seg.min.point, seg.min));
				//line 374 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				treePoints.push(new verb.core.KdPoint_verb_core_MeshIntersectionPoint(seg.max.point, seg.max));
			}
			
		}
		
		//line 378 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		return new verb.core.KdTree_verb_core_MeshIntersectionPoint(treePoints, ((haxe.lang.Function) (new haxe.lang.Closure(verb.core.Vec.class, "distSquared")) ));
	}
	
	
	public static verb.core.MeshIntersectionPoint lookupAdjacentSegment(verb.core.MeshIntersectionPoint segEnd, verb.core.KdTree_verb_core_MeshIntersectionPoint tree, int numResults)
	{
		//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.core.HeapElement_verb_core_KdPoint_verb_core_MeshIntersectionPoint> _this = tree.nearest(segEnd.point, numResults, verb.core.Constants.EPSILON);
		//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.core.HeapElement_verb_core_KdPoint_verb_core_MeshIntersectionPoint> ret = new haxe.root.Array<verb.core.HeapElement_verb_core_KdPoint_verb_core_MeshIntersectionPoint>(new verb.core.HeapElement_verb_core_KdPoint_verb_core_MeshIntersectionPoint[]{});
		//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		{
			//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g = 0;
			//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g1 = _this.length;
			//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			while (( _g < _g1 ))
			{
				//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int i = _g++;
				//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				verb.core.HeapElement_verb_core_KdPoint_verb_core_MeshIntersectionPoint elt = _this.__get(i);
				//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				if (( segEnd != elt.obj.obj )) 
				{
					//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					ret.push(elt);
				}
				
			}
			
		}
		
		//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.core.HeapElement_verb_core_KdPoint_verb_core_MeshIntersectionPoint> _this1 = ret;
		//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.core.MeshIntersectionPoint> ret1 = ((haxe.root.Array<verb.core.MeshIntersectionPoint>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (_this1.length) ))) )) );
		//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		{
			//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g2 = 0;
			//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g3 = _this1.length;
			//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			while (( _g2 < _g3 ))
			{
				//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int i1 = _g2++;
				//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				ret1.__set(i1, _this1.__get(i1).obj.obj);
			}
			
		}
		
		//line 395 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.core.MeshIntersectionPoint> adj = ret1;
		//line 402 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( adj.length == 1 )) 
		{
			//line 402 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return adj.__get(0);
		}
		else
		{
			//line 402 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return null;
		}
		
	}
	
	
	public static haxe.root.Array<verb.core.CurveSurfaceIntersection> curveAndSurface(verb.core.NurbsCurveData curve, verb.core.NurbsSurfaceData surface, java.lang.Object tol, verb.eval.IBoundingBoxTree<verb.core.NurbsCurveData> crvBbTree, verb.eval.IBoundingBoxTree<verb.core.NurbsSurfaceData> srfBbTree)
	{
		//line 421 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		try 
		{
			//line 421 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double tol1 = ( (haxe.lang.Runtime.eq(tol, null)) ? (1e-3) : (((double) (haxe.lang.Runtime.toDouble(tol)) )) );
			//line 423 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			if (( crvBbTree == null )) 
			{
				//line 423 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				crvBbTree = new verb.core.LazyCurveBoundingBoxTree(curve, null);
			}
			
			//line 424 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			if (( srfBbTree == null )) 
			{
				//line 424 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				srfBbTree = new verb.core.LazySurfaceBoundingBoxTree(surface, null, null, null);
			}
			
			//line 426 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.root.Array<verb.core.Pair<verb.core.NurbsCurveData, verb.core.NurbsSurfaceData>> ints = ((haxe.root.Array<verb.core.Pair<verb.core.NurbsCurveData, verb.core.NurbsSurfaceData>>) (verb.eval.Intersect.boundingBoxTrees(((verb.eval.IBoundingBoxTree<verb.core.NurbsCurveData>) (crvBbTree) ), ((verb.eval.IBoundingBoxTree<verb.core.NurbsSurfaceData>) (srfBbTree) ), ((java.lang.Object) (tol1) ))) );
			//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.root.Array<verb.core.CurveSurfaceIntersection> ret = ((haxe.root.Array<verb.core.CurveSurfaceIntersection>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (ints.length) ))) )) );
			//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			{
				//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int _g = 0;
				//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int _g1 = ints.length;
				//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				while (( _g < _g1 ))
				{
					//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					int i = _g++;
					//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					verb.core.Pair<verb.core.NurbsCurveData, verb.core.NurbsSurfaceData> inter = ints.__get(i);
					//line 430 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					verb.core.NurbsCurveData crvSeg = inter.item0;
					//line 431 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					verb.core.NurbsSurfaceData srfPart = inter.item1;
					//line 434 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					double min = ((org.apache.commons.math3.linear.ArrayRealVector) (crvSeg.knots) ).getEntry(((int) (0) ));
					//line 435 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					org.apache.commons.math3.linear.ArrayRealVector this1 = crvSeg.knots;
					//line 435 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					double max = this1.getEntry(((int) (( this1.getDimension() - 1 )) ));
					//line 437 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					double u = ( (( min + max )) / 2.0 );
					//line 440 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					double minu = ((org.apache.commons.math3.linear.ArrayRealVector) (srfPart.knotsU) ).getEntry(((int) (0) ));
					//line 441 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					org.apache.commons.math3.linear.ArrayRealVector this2 = srfPart.knotsU;
					//line 441 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					double maxu = this2.getEntry(((int) (( this2.getDimension() - 1 )) ));
					//line 443 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					double minv = ((org.apache.commons.math3.linear.ArrayRealVector) (srfPart.knotsV) ).getEntry(((int) (0) ));
					//line 444 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					org.apache.commons.math3.linear.ArrayRealVector this3 = srfPart.knotsV;
					//line 444 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					double maxv = this3.getEntry(((int) (( this3.getDimension() - 1 )) ));
					//line 446 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					haxe.root.Array<java.lang.Object> uv = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (( (( minu + maxu )) / 2.0 )) ), ((java.lang.Object) (( (( minv + maxv )) / 2.0 )) )});
					//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					ret.__set(i, verb.eval.Intersect.curveAndSurfaceWithEstimate(crvSeg, srfPart, verb.core._Data.Vector_Impl_.fromArray(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (u) )}).concat(((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (uv) )) ))) )) )), tol1));
				}
				
			}
			
			//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.root.Array<verb.core.CurveSurfaceIntersection> _this = ret;
			//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.root.Array<verb.core.CurveSurfaceIntersection> ret1 = new haxe.root.Array<verb.core.CurveSurfaceIntersection>(new verb.core.CurveSurfaceIntersection[]{});
			//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			{
				//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int _g2 = 0;
				//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int _g3 = _this.length;
				//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				while (( _g2 < _g3 ))
				{
					//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					int i1 = _g2++;
					//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					verb.core.CurveSurfaceIntersection elt = _this.__get(i1);
					//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					if (( verb.core.Vec.distSquared(elt.curvePoint, elt.surfacePoint) < ( tol1 * tol1 ) )) 
					{
						//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
						ret1.push(elt);
					}
					
				}
				
			}
			
			//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return ((haxe.root.Array<verb.core.CurveSurfaceIntersection>) (verb.core.ArrayExtensions.unique(((haxe.root.Array<verb.core.CurveSurfaceIntersection>) (ret1) ), ((haxe.lang.Function) (new verb.eval.Intersect_curveAndSurface_451__Fun(tol1)) ))) );
		}
		catch (java.lang.Throwable typedException)
		{
			//line 417 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static verb.core.CurveSurfaceIntersection curveAndSurfaceWithEstimate(verb.core.NurbsCurveData curve, verb.core.NurbsSurfaceData surface, org.apache.commons.math3.linear.ArrayRealVector start_params, java.lang.Object tol)
	{
		//line 472 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		try 
		{
			//line 472 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double tol1 = ( (haxe.lang.Runtime.eq(tol, null)) ? (1e-3) : (((double) (haxe.lang.Runtime.toDouble(tol)) )) );
			//line 474 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.lang.Function objective = new verb.eval.Intersect_curveAndSurfaceWithEstimate_474__Fun(surface, curve);
			//line 501 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.lang.Function grad = new verb.eval.Intersect_curveAndSurfaceWithEstimate_501__Fun(surface, curve);
			//line 517 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			verb.core.MinimizationResult sol_obj = verb.core.Minimizer.uncmin(objective, start_params, ( tol1 * tol1 ), grad, null);
			//line 518 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			org.apache.commons.math3.linear.ArrayRealVector finalSolution = sol_obj.solution;
			//line 520 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return new verb.core.CurveSurfaceIntersection(((org.apache.commons.math3.linear.ArrayRealVector) (finalSolution) ).getEntry(((int) (0) )), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (finalSolution) ).getEntry(((int) (1) ))) ), ((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (finalSolution) ).getEntry(((int) (2) ))) )})), verb.eval.Eval.rationalCurvePoint(curve, ((org.apache.commons.math3.linear.ArrayRealVector) (finalSolution) ).getEntry(((int) (0) ))), verb.eval.Eval.rationalSurfacePoint(surface, ((org.apache.commons.math3.linear.ArrayRealVector) (finalSolution) ).getEntry(((int) (1) )), ((org.apache.commons.math3.linear.ArrayRealVector) (finalSolution) ).getEntry(((int) (2) ))));
		}
		catch (java.lang.Throwable typedException)
		{
			//line 469 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<verb.core.PolylineMeshIntersection> polylineAndMesh(verb.core.PolylineData polyline, verb.core.MeshData mesh, double tol)
	{
		//line 537 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		try 
		{
			//line 539 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.root.Array<verb.core.Pair<java.lang.Object, java.lang.Object>> res = ((haxe.root.Array<verb.core.Pair<java.lang.Object, java.lang.Object>>) (((haxe.root.Array) (verb.eval.Intersect.boundingBoxTrees(((verb.eval.IBoundingBoxTree<java.lang.Object>) (((verb.eval.IBoundingBoxTree) (new verb.core.LazyPolylineBoundingBoxTree(polyline, null)) )) ), ((verb.eval.IBoundingBoxTree<java.lang.Object>) (((verb.eval.IBoundingBoxTree) (new verb.core.LazyMeshBoundingBoxTree(mesh, null)) )) ), ((java.lang.Object) (tol) ))) )) );
			//line 543 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.root.Array<verb.core.PolylineMeshIntersection> finalResults = new haxe.root.Array<verb.core.PolylineMeshIntersection>(new verb.core.PolylineMeshIntersection[]{});
			//line 545 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			{
				//line 545 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int _g = 0;
				//line 545 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				while (( _g < res.length ))
				{
					//line 545 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					verb.core.Pair<java.lang.Object, java.lang.Object> event = res.__get(_g);
					//line 545 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					 ++ _g;
					//line 547 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					int polid = ((int) (haxe.lang.Runtime.toInt(event.item0)) );
					//line 548 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					int faceid = ((int) (haxe.lang.Runtime.toInt(event.item1)) );
					//line 550 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					verb.core.TriSegmentIntersection inter = verb.eval.Intersect.segmentWithTriangle(polyline.points.__get(polid), polyline.points.__get(( polid + 1 )), mesh.points, mesh.faces.__get(faceid));
					//line 551 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					if (( inter == null )) 
					{
						//line 551 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
						continue;
					}
					
					//line 553 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					org.apache.commons.math3.linear.ArrayRealVector pt = inter.point;
					//line 554 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					double u = ((org.apache.commons.math3.linear.ArrayRealVector) (verb.core.Vec.lerp(inter.p, verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (polyline.params) ).getEntry(((int) (polid) ))) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (polyline.params) ).getEntry(((int) (( polid + 1 )) ))) )})))) ).getEntry(((int) (0) ));
					//line 555 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					org.apache.commons.math3.linear.ArrayRealVector uv = verb.core.Mesh.triangleUVFromPoint(mesh, faceid, pt);
					//line 557 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					finalResults.push(new verb.core.PolylineMeshIntersection(pt, u, uv, polid, faceid));
				}
				
			}
			
			//line 561 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return finalResults;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 535 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static <T1, T2> haxe.root.Array<verb.core.Pair<T1, T2>> boundingBoxTrees(verb.eval.IBoundingBoxTree<T1> ai, verb.eval.IBoundingBoxTree<T2> bi, java.lang.Object tol)
	{
		//line 578 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double tol1 = ( (haxe.lang.Runtime.eq(tol, null)) ? (1e-9) : (((double) (haxe.lang.Runtime.toDouble(tol)) )) );
		//line 580 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.eval.IBoundingBoxTree<T1>> atrees = new haxe.root.Array<verb.eval.IBoundingBoxTree<T1>>(( (verb.eval.IBoundingBoxTree<T1>[]) (new verb.eval.IBoundingBoxTree[] {}) ));
		//line 581 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.eval.IBoundingBoxTree<T2>> btrees = new haxe.root.Array<verb.eval.IBoundingBoxTree<T2>>(( (verb.eval.IBoundingBoxTree<T2>[]) (new verb.eval.IBoundingBoxTree[] {}) ));
		//line 583 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		atrees.push(ai);
		//line 584 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		btrees.push(bi);
		//line 586 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<verb.core.Pair<T1, T2>> results = new haxe.root.Array<verb.core.Pair<T1, T2>>(( (verb.core.Pair<T1, T2>[]) (new verb.core.Pair[] {}) ));
		//line 588 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		while (( atrees.length > 0 ))
		{
			//line 590 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			verb.eval.IBoundingBoxTree<T1> a = ((verb.eval.IBoundingBoxTree<T1>) (atrees.pop()) );
			//line 591 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			verb.eval.IBoundingBoxTree<T2> b = ((verb.eval.IBoundingBoxTree<T2>) (btrees.pop()) );
			//line 593 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			if (( a.empty() || b.empty() )) 
			{
				//line 593 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				continue;
			}
			
			//line 594 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			if ( ! (a.boundingBox().intersects(b.boundingBox(), tol1)) ) 
			{
				//line 594 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				continue;
			}
			
			//line 596 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			boolean ai1 = a.indivisible(tol1);
			//line 597 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			boolean bi1 = b.indivisible(tol1);
			//line 599 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			if (( ai1 && bi1 )) 
			{
				//line 600 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				results.push(new verb.core.Pair<T1, T2>(a.yield(), b.yield()));
				//line 601 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				continue;
			}
			else
			{
				//line 602 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				if (( ai1 &&  ! (bi1)  )) 
				{
					//line 603 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					verb.core.Pair<verb.eval.IBoundingBoxTree<T2>, verb.eval.IBoundingBoxTree<T2>> bs = b.split();
					//line 605 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					atrees.push(a);
					//line 606 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					btrees.push(bs.item1);
					//line 608 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					atrees.push(a);
					//line 609 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					btrees.push(bs.item0);
					//line 611 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					continue;
				}
				else
				{
					//line 612 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					if ((  ! (ai1)  && bi1 )) 
					{
						//line 613 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
						verb.core.Pair<verb.eval.IBoundingBoxTree<T1>, verb.eval.IBoundingBoxTree<T1>> as = a.split();
						//line 615 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
						atrees.push(as.item1);
						//line 616 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
						btrees.push(b);
						//line 618 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
						atrees.push(as.item0);
						//line 619 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
						btrees.push(b);
						//line 621 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
						continue;
					}
					
				}
				
			}
			
			//line 624 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			verb.core.Pair<verb.eval.IBoundingBoxTree<T1>, verb.eval.IBoundingBoxTree<T1>> as1 = a.split();
			//line 624 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			verb.core.Pair<verb.eval.IBoundingBoxTree<T2>, verb.eval.IBoundingBoxTree<T2>> bs1 = b.split();
			//line 626 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			atrees.push(as1.item1);
			//line 627 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			btrees.push(bs1.item1);
			//line 629 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			atrees.push(as1.item1);
			//line 630 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			btrees.push(bs1.item0);
			//line 632 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			atrees.push(as1.item0);
			//line 633 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			btrees.push(bs1.item1);
			//line 635 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			atrees.push(as1.item0);
			//line 636 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			btrees.push(bs1.item0);
		}
		
		//line 640 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		return results;
	}
	
	
	public static haxe.root.Array<verb.core.CurveCurveIntersection> curves(verb.core.NurbsCurveData curve1, verb.core.NurbsCurveData curve2, double tolerance)
	{
		//line 655 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		try 
		{
			//line 657 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.root.Array<verb.core.Pair<verb.core.NurbsCurveData, verb.core.NurbsCurveData>> ints = ((haxe.root.Array<verb.core.Pair<verb.core.NurbsCurveData, verb.core.NurbsCurveData>>) (verb.eval.Intersect.boundingBoxTrees(((verb.eval.IBoundingBoxTree<verb.core.NurbsCurveData>) (new verb.core.LazyCurveBoundingBoxTree(curve1, null)) ), ((verb.eval.IBoundingBoxTree<verb.core.NurbsCurveData>) (new verb.core.LazyCurveBoundingBoxTree(curve2, null)) ), ((java.lang.Object) (0) ))) );
			//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.root.Array<verb.core.CurveCurveIntersection> ret = ((haxe.root.Array<verb.core.CurveCurveIntersection>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (ints.length) ))) )) );
			//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			{
				//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int _g = 0;
				//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int _g1 = ints.length;
				//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				while (( _g < _g1 ))
				{
					//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					int i = _g++;
					//line 662 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					verb.core.Pair<verb.core.NurbsCurveData, verb.core.NurbsCurveData> x = ints.__get(i);
					//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					ret.__set(i, verb.eval.Intersect.curvesWithEstimate(curve1, curve2, ((org.apache.commons.math3.linear.ArrayRealVector) (x.item0.knots) ).getEntry(((int) (0) )), ((org.apache.commons.math3.linear.ArrayRealVector) (x.item1.knots) ).getEntry(((int) (0) )), tolerance));
				}
				
			}
			
			//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.root.Array<verb.core.CurveCurveIntersection> _this = ret;
			//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.root.Array<verb.core.CurveCurveIntersection> ret1 = new haxe.root.Array<verb.core.CurveCurveIntersection>(new verb.core.CurveCurveIntersection[]{});
			//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			{
				//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int _g2 = 0;
				//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int _g3 = _this.length;
				//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				while (( _g2 < _g3 ))
				{
					//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					int i1 = _g2++;
					//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					verb.core.CurveCurveIntersection elt = _this.__get(i1);
					//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					if (( verb.core.Vec.distSquared(elt.point0, elt.point1) < tolerance )) 
					{
						//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
						ret1.push(elt);
					}
					
				}
				
			}
			
			//line 661 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return ((haxe.root.Array<verb.core.CurveCurveIntersection>) (verb.core.ArrayExtensions.unique(((haxe.root.Array<verb.core.CurveCurveIntersection>) (ret1) ), ((haxe.lang.Function) (new verb.eval.Intersect_curves_665__Fun(tolerance)) ))) );
		}
		catch (java.lang.Throwable typedException)
		{
			//line 655 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static verb.core.CurveCurveIntersection curvesWithEstimate(verb.core.NurbsCurveData curve0, verb.core.NurbsCurveData curve1, double u0, double u1, double tolerance)
	{
		//line 690 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		try 
		{
			//line 691 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.lang.Function objective = new verb.eval.Intersect_curvesWithEstimate_691__Fun(curve1, curve0);
			//line 712 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.lang.Function grad = new verb.eval.Intersect_curvesWithEstimate_712__Fun(curve1, curve0);
			//line 725 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			verb.core.MinimizationResult sol_obj = verb.core.Minimizer.uncmin(objective, verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (u0) ), ((java.lang.Object) (u1) )})), ( tolerance * tolerance ), grad, null);
			//line 727 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double u11 = ((org.apache.commons.math3.linear.ArrayRealVector) (sol_obj.solution) ).getEntry(((int) (0) ));
			//line 727 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double u2 = ((org.apache.commons.math3.linear.ArrayRealVector) (sol_obj.solution) ).getEntry(((int) (1) ));
			//line 730 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			org.apache.commons.math3.linear.ArrayRealVector p1 = verb.eval.Eval.rationalCurvePoint(curve0, u11);
			//line 730 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			org.apache.commons.math3.linear.ArrayRealVector p2 = verb.eval.Eval.rationalCurvePoint(curve1, u2);
			//line 733 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return new verb.core.CurveCurveIntersection(p1, p2, u11, u2);
		}
		catch (java.lang.Throwable typedException)
		{
			//line 685 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static verb.core.Interval<verb.core.MeshIntersectionPoint> triangles(verb.core.MeshData mesh0, int faceIndex0, verb.core.MeshData mesh1, int faceIndex1)
	{
		//line 751 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<java.lang.Object> tri0 = mesh0.faces.__get(faceIndex0);
		//line 752 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<java.lang.Object> tri1 = mesh1.faces.__get(faceIndex1);
		//line 755 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector n0 = verb.core.Mesh.getTriangleNorm(mesh0.points, tri0);
		//line 756 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector n1 = verb.core.Mesh.getTriangleNorm(mesh1.points, tri1);
		//line 757 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector o0 = mesh0.points.__get(((int) (haxe.lang.Runtime.toInt(tri0.__get(0))) ));
		//line 758 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector o1 = mesh1.points.__get(((int) (haxe.lang.Runtime.toInt(tri1.__get(0))) ));
		//line 761 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		verb.core.Ray ray = verb.eval.Intersect.planes(o0, n0, o1, n1);
		//line 762 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( ray == null )) 
		{
			//line 762 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return null;
		}
		
		//line 765 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		verb.core.Interval<verb.core.CurveTriPoint> clip1 = verb.eval.Intersect.clipRayInCoplanarTriangle(ray, mesh0, faceIndex0);
		//line 766 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( clip1 == null )) 
		{
			//line 766 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return null;
		}
		
		//line 769 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		verb.core.Interval<verb.core.CurveTriPoint> clip2 = verb.eval.Intersect.clipRayInCoplanarTriangle(ray, mesh1, faceIndex1);
		//line 770 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( clip2 == null )) 
		{
			//line 770 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return null;
		}
		
		//line 773 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		verb.core.Interval<verb.core.MeshIntersectionPoint> merged = verb.eval.Intersect.mergeTriangleClipIntervals(clip1, clip2, mesh0, faceIndex0, mesh1, faceIndex1);
		//line 774 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( merged == null )) 
		{
			//line 774 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return null;
		}
		
		//line 776 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		return new verb.core.Interval<verb.core.MeshIntersectionPoint>(new verb.core.MeshIntersectionPoint(merged.min.uv0, merged.min.uv1, merged.min.point, faceIndex0, faceIndex1), new verb.core.MeshIntersectionPoint(merged.max.uv0, merged.max.uv1, merged.max.point, faceIndex0, faceIndex1));
	}
	
	
	public static verb.core.Interval<verb.core.CurveTriPoint> clipRayInCoplanarTriangle(verb.core.Ray ray, verb.core.MeshData mesh, int faceIndex)
	{
		//line 785 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<java.lang.Object> tri = mesh.faces.__get(faceIndex);
		//line 785 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> o = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{mesh.points.__get(((int) (haxe.lang.Runtime.toInt(tri.__get(0))) )), mesh.points.__get(((int) (haxe.lang.Runtime.toInt(tri.__get(1))) )), mesh.points.__get(((int) (haxe.lang.Runtime.toInt(tri.__get(2))) ))});
		//line 785 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> uvs = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{mesh.uvs.__get(((int) (haxe.lang.Runtime.toInt(tri.__get(0))) )), mesh.uvs.__get(((int) (haxe.lang.Runtime.toInt(tri.__get(1))) )), mesh.uvs.__get(((int) (haxe.lang.Runtime.toInt(tri.__get(2))) ))});
		//line 785 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> uvd = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{verb.core.Vec.sub(uvs.__get(1), uvs.__get(0)), verb.core.Vec.sub(uvs.__get(2), uvs.__get(1)), verb.core.Vec.sub(uvs.__get(0), uvs.__get(2))});
		//line 785 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> s = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{verb.core.Vec.sub(o.__get(1), o.__get(0)), verb.core.Vec.sub(o.__get(2), o.__get(1)), verb.core.Vec.sub(o.__get(0), o.__get(2))});
		//line 790 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.lang.Function f = ((haxe.lang.Function) (new haxe.lang.Closure(verb.core.Vec.class, "normalized")) );
		//line 790 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> ret = ((haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (s.length) ))) )) );
		//line 790 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		{
			//line 790 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g = 0;
			//line 790 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g1 = s.length;
			//line 790 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			while (( _g < _g1 ))
			{
				//line 790 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int i = _g++;
				//line 790 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				ret.__set(i, ((org.apache.commons.math3.linear.ArrayRealVector) (f.__hx_invoke1_o(0.0, s.__get(i))) ));
			}
			
		}
		
		//line 785 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> d = ret;
		//line 791 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.lang.Function f1 = ((haxe.lang.Function) (new haxe.lang.Closure(verb.core.Vec.class, "norm")) );
		//line 791 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<java.lang.Object> ret1 = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (s.length) ))) )) );
		//line 791 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		{
			//line 791 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g2 = 0;
			//line 791 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g3 = s.length;
			//line 791 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			while (( _g2 < _g3 ))
			{
				//line 791 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int i1 = _g2++;
				//line 791 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				double __temp_expr1 = ((double) (haxe.lang.Runtime.toDouble(ret1.__set(i1, ((double) (f1.__hx_invoke1_f(0.0, s.__get(i1))) )))) );
			}
			
		}
		
		//line 785 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		haxe.root.Array<java.lang.Object> l = ret1;
		//line 794 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		verb.core.CurveTriPoint minU = null;
		//line 795 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		verb.core.CurveTriPoint maxU = null;
		//line 798 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		{
			//line 798 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int _g4 = 0;
			//line 798 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			while (( _g4 < 3 ))
			{
				//line 798 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int i2 = _g4++;
				//line 799 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				org.apache.commons.math3.linear.ArrayRealVector o0 = o.__get(i2);
				//line 800 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				org.apache.commons.math3.linear.ArrayRealVector d0 = d.__get(i2);
				//line 802 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				verb.core.CurveCurveIntersection res = verb.eval.Intersect.rays(o0, d0, ray.origin, ray.dir);
				//line 804 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				if (( res == null )) 
				{
					//line 805 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					continue;
				}
				
				//line 808 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				double useg = res.u0;
				//line 809 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				double uray = res.u1;
				//line 812 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				if (( ( useg <  - (verb.core.Constants.EPSILON)  ) || ( useg > ( ((double) (haxe.lang.Runtime.toDouble(l.__get(i2))) ) + verb.core.Constants.EPSILON ) ) )) 
				{
					//line 812 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					continue;
				}
				
				//line 815 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				if (( ( minU == null ) || ( uray < minU.u ) )) 
				{
					//line 816 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					minU = new verb.core.CurveTriPoint(uray, verb.core.Vec.onRay(ray.origin, ray.dir, uray), verb.core.Vec.onRay(uvs.__get(i2), uvd.__get(i2), ( useg / ((double) (haxe.lang.Runtime.toDouble(l.__get(i2))) ) )));
				}
				
				//line 819 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				if (( ( maxU == null ) || ( uray > maxU.u ) )) 
				{
					//line 820 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					maxU = new verb.core.CurveTriPoint(uray, verb.core.Vec.onRay(ray.origin, ray.dir, uray), verb.core.Vec.onRay(uvs.__get(i2), uvd.__get(i2), ( useg / ((double) (haxe.lang.Runtime.toDouble(l.__get(i2))) ) )));
				}
				
			}
			
		}
		
		//line 824 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( ( maxU == null ) || ( minU == null ) )) 
		{
			//line 825 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return null;
		}
		
		//line 829 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		return new verb.core.Interval<verb.core.CurveTriPoint>(minU, maxU);
	}
	
	
	public static verb.core.Interval<verb.core.MeshIntersectionPoint> mergeTriangleClipIntervals(verb.core.Interval<verb.core.CurveTriPoint> clip1, verb.core.Interval<verb.core.CurveTriPoint> clip2, verb.core.MeshData mesh1, int faceIndex1, verb.core.MeshData mesh2, int faceIndex2)
	{
		//line 837 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( ( clip2.min.u > ( clip1.max.u + verb.core.Constants.EPSILON ) ) || ( clip1.min.u > ( clip2.max.u + verb.core.Constants.EPSILON ) ) )) 
		{
			//line 839 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return null;
		}
		
		//line 843 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		verb.core.Pair<verb.core.CurveTriPoint, java.lang.Object> min = ( (( clip1.min.u > clip2.min.u )) ? (new verb.core.Pair<verb.core.CurveTriPoint, java.lang.Object>(clip1.min, 0)) : (new verb.core.Pair<verb.core.CurveTriPoint, java.lang.Object>(clip2.min, 1)) );
		//line 844 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		verb.core.Pair<verb.core.CurveTriPoint, java.lang.Object> max = ( (( clip1.max.u < clip2.max.u )) ? (new verb.core.Pair<verb.core.CurveTriPoint, java.lang.Object>(clip1.max, 0)) : (new verb.core.Pair<verb.core.CurveTriPoint, java.lang.Object>(clip2.max, 1)) );
		//line 846 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		verb.core.Interval<verb.core.MeshIntersectionPoint> res = new verb.core.Interval<verb.core.MeshIntersectionPoint>(new verb.core.MeshIntersectionPoint(null, null, min.item0.point, faceIndex1, faceIndex2), new verb.core.MeshIntersectionPoint(null, null, max.item0.point, faceIndex1, faceIndex2));
		//line 850 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( ((int) (haxe.lang.Runtime.toInt(min.item1)) ) == 0 )) 
		{
			//line 851 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			res.min.uv0 = min.item0.uv;
			//line 852 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			res.min.uv1 = verb.core.Mesh.triangleUVFromPoint(mesh2, faceIndex2, min.item0.point);
		}
		else
		{
			//line 854 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			res.min.uv0 = verb.core.Mesh.triangleUVFromPoint(mesh1, faceIndex1, min.item0.point);
			//line 855 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			res.min.uv1 = min.item0.uv;
		}
		
		//line 858 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( ((int) (haxe.lang.Runtime.toInt(max.item1)) ) == 0 )) 
		{
			//line 859 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			res.max.uv0 = max.item0.uv;
			//line 860 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			res.max.uv1 = verb.core.Mesh.triangleUVFromPoint(mesh2, faceIndex2, max.item0.point);
		}
		else
		{
			//line 862 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			res.max.uv0 = verb.core.Mesh.triangleUVFromPoint(mesh1, faceIndex1, max.item0.point);
			//line 863 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			res.max.uv1 = max.item0.uv;
		}
		
		//line 866 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		return res;
	}
	
	
	public static verb.core.Ray planes(org.apache.commons.math3.linear.ArrayRealVector origin0, org.apache.commons.math3.linear.ArrayRealVector normal0, org.apache.commons.math3.linear.ArrayRealVector origin1, org.apache.commons.math3.linear.ArrayRealVector normal1)
	{
		//line 882 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		try 
		{
			//line 884 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			org.apache.commons.math3.linear.ArrayRealVector d = verb.core.Vec.cross(normal0, normal1);
			//line 886 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			if (( verb.core.Vec.dot(d, d) < verb.core.Constants.EPSILON )) 
			{
				//line 886 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				return null;
			}
			
			//line 889 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			int li = 0;
			//line 890 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double mi = java.lang.Math.abs(((org.apache.commons.math3.linear.ArrayRealVector) (d) ).getEntry(((int) (0) )));
			//line 891 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double m1 = java.lang.Math.abs(((org.apache.commons.math3.linear.ArrayRealVector) (d) ).getEntry(((int) (1) )));
			//line 892 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double m2 = java.lang.Math.abs(((org.apache.commons.math3.linear.ArrayRealVector) (d) ).getEntry(((int) (2) )));
			//line 894 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			if (( m1 > mi )) 
			{
				//line 895 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				li = 1;
				//line 896 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				mi = m1;
			}
			
			//line 899 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			if (( m2 > mi )) 
			{
				//line 900 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				li = 2;
				//line 901 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				mi = m2;
			}
			
			//line 904 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double a1 = 0.0;
			//line 904 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double b1 = 0.0;
			//line 904 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double a2 = 0.0;
			//line 904 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double b2 = 0.0;
			//line 906 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			if (( li == 0 )) 
			{
				//line 907 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				a1 = ((org.apache.commons.math3.linear.ArrayRealVector) (normal0) ).getEntry(((int) (1) ));
				//line 908 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				b1 = ((org.apache.commons.math3.linear.ArrayRealVector) (normal0) ).getEntry(((int) (2) ));
				//line 909 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				a2 = ((org.apache.commons.math3.linear.ArrayRealVector) (normal1) ).getEntry(((int) (1) ));
				//line 910 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				b2 = ((org.apache.commons.math3.linear.ArrayRealVector) (normal1) ).getEntry(((int) (2) ));
			}
			else
			{
				//line 911 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				if (( li == 1 )) 
				{
					//line 912 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					a1 = ((org.apache.commons.math3.linear.ArrayRealVector) (normal0) ).getEntry(((int) (0) ));
					//line 913 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					b1 = ((org.apache.commons.math3.linear.ArrayRealVector) (normal0) ).getEntry(((int) (2) ));
					//line 914 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					a2 = ((org.apache.commons.math3.linear.ArrayRealVector) (normal1) ).getEntry(((int) (0) ));
					//line 915 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					b2 = ((org.apache.commons.math3.linear.ArrayRealVector) (normal1) ).getEntry(((int) (2) ));
				}
				else
				{
					//line 917 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					a1 = ((org.apache.commons.math3.linear.ArrayRealVector) (normal0) ).getEntry(((int) (0) ));
					//line 918 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					b1 = ((org.apache.commons.math3.linear.ArrayRealVector) (normal0) ).getEntry(((int) (1) ));
					//line 919 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					a2 = ((org.apache.commons.math3.linear.ArrayRealVector) (normal1) ).getEntry(((int) (0) ));
					//line 920 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					b2 = ((org.apache.commons.math3.linear.ArrayRealVector) (normal1) ).getEntry(((int) (1) ));
				}
				
			}
			
			//line 924 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double d1 =  - (verb.core.Vec.dot(origin0, normal0)) ;
			//line 925 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double d2 =  - (verb.core.Vec.dot(origin1, normal1)) ;
			//line 927 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double den = ( ( a1 * b2 ) - ( b1 * a2 ) );
			//line 929 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double x = ( (( ( b1 * d2 ) - ( d1 * b2 ) )) / den );
			//line 930 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double y = ( (( ( d1 * a2 ) - ( a1 * d2 ) )) / den );
			//line 931 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.root.Array<java.lang.Object> p = null;
			//line 933 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			if (( li == 0 )) 
			{
				//line 934 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				p = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (x) ), ((java.lang.Object) (y) )});
			}
			else
			{
				//line 935 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				if (( li == 1 )) 
				{
					//line 936 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					p = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (x) ), ((java.lang.Object) (0) ), ((java.lang.Object) (y) )});
				}
				else
				{
					//line 938 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					p = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (x) ), ((java.lang.Object) (y) ), ((java.lang.Object) (0) )});
				}
				
			}
			
			//line 941 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return new verb.core.Ray(verb.core._Data.Vector_Impl_.fromArray(p), verb.core.Vec.normalized(d));
		}
		catch (java.lang.Throwable typedException)
		{
			//line 882 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector threePlanes(org.apache.commons.math3.linear.ArrayRealVector n0, double d0, org.apache.commons.math3.linear.ArrayRealVector n1, double d1, org.apache.commons.math3.linear.ArrayRealVector n2, double d2)
	{
		//line 962 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector u = verb.core.Vec.cross(n1, n2);
		//line 963 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double den = verb.core.Vec.dot(n0, u);
		//line 965 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( java.lang.Math.abs(den) < verb.core.Constants.EPSILON )) 
		{
			//line 965 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return null;
		}
		
		//line 967 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector diff = verb.core.Vec.sub(verb.core.Vec.mul(d2, n1), verb.core.Vec.mul(d1, n2));
		//line 968 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector num = verb.core.Vec.add(verb.core.Vec.mul(d0, u), verb.core.Vec.cross(n0, diff));
		//line 970 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		return verb.core.Vec.mul(( 1 / den ), num);
	}
	
	
	public static haxe.root.Array<verb.core.CurveCurveIntersection> polylines(verb.core.PolylineData polyline0, verb.core.PolylineData polyline1, double tol)
	{
		//line 987 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		try 
		{
			//line 989 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.root.Array<verb.core.Pair<java.lang.Object, java.lang.Object>> res = ((haxe.root.Array<verb.core.Pair<java.lang.Object, java.lang.Object>>) (((haxe.root.Array) (verb.eval.Intersect.boundingBoxTrees(((verb.eval.IBoundingBoxTree<java.lang.Object>) (((verb.eval.IBoundingBoxTree) (new verb.core.LazyPolylineBoundingBoxTree(polyline0, null)) )) ), ((verb.eval.IBoundingBoxTree<java.lang.Object>) (((verb.eval.IBoundingBoxTree) (new verb.core.LazyPolylineBoundingBoxTree(polyline1, null)) )) ), ((java.lang.Object) (tol) ))) )) );
			//line 993 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			haxe.root.Array<verb.core.CurveCurveIntersection> finalResults = new haxe.root.Array<verb.core.CurveCurveIntersection>(new verb.core.CurveCurveIntersection[]{});
			//line 995 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			{
				//line 995 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				int _g = 0;
				//line 995 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				while (( _g < res.length ))
				{
					//line 995 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					verb.core.Pair<java.lang.Object, java.lang.Object> event = res.__get(_g);
					//line 995 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					 ++ _g;
					//line 996 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					int polid0 = ((int) (haxe.lang.Runtime.toInt(event.item0)) );
					//line 997 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					int polid1 = ((int) (haxe.lang.Runtime.toInt(event.item1)) );
					//line 999 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					verb.core.CurveCurveIntersection inter = verb.eval.Intersect.segments(polyline0.points.__get(polid0), polyline0.points.__get(( polid0 + 1 )), polyline1.points.__get(polid1), polyline1.points.__get(( polid1 + 1 )), tol);
					//line 1002 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					if (( inter == null )) 
					{
						//line 1002 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
						continue;
					}
					
					//line 1005 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					inter.u0 = ((org.apache.commons.math3.linear.ArrayRealVector) (verb.core.Vec.lerp(inter.u0, verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (polyline0.params) ).getEntry(((int) (polid0) ))) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (polyline0.params) ).getEntry(((int) (( polid0 + 1 )) ))) )})))) ).getEntry(((int) (0) ));
					//line 1006 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					inter.u1 = ((org.apache.commons.math3.linear.ArrayRealVector) (verb.core.Vec.lerp(inter.u1, verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (polyline1.params) ).getEntry(((int) (polid1) ))) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (polyline1.params) ).getEntry(((int) (( polid1 + 1 )) ))) )})))) ).getEntry(((int) (0) ));
					//line 1008 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
					finalResults.push(inter);
				}
				
			}
			
			//line 1011 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return finalResults;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 986 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static verb.core.CurveCurveIntersection segments(org.apache.commons.math3.linear.ArrayRealVector a0, org.apache.commons.math3.linear.ArrayRealVector a1, org.apache.commons.math3.linear.ArrayRealVector b0, org.apache.commons.math3.linear.ArrayRealVector b1, double tol)
	{
		//line 1030 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector a1ma0 = verb.core.Vec.sub(a1, a0);
		//line 1030 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double aN = java.lang.Math.sqrt(verb.core.Vec.dot(a1ma0, a1ma0));
		//line 1030 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector a = verb.core.Vec.mul(( 1 / aN ), a1ma0);
		//line 1030 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector b1mb0 = verb.core.Vec.sub(b1, b0);
		//line 1030 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double bN = java.lang.Math.sqrt(verb.core.Vec.dot(b1mb0, b1mb0));
		//line 1030 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector b = verb.core.Vec.mul(( 1 / bN ), b1mb0);
		//line 1030 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		verb.core.CurveCurveIntersection int_params = verb.eval.Intersect.rays(a0, a, b0, b);
		//line 1038 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( int_params != null )) 
		{
			//line 1040 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double u0 = java.lang.Math.min(java.lang.Math.max(((double) (0) ), ( int_params.u0 / aN )), 1.0);
			//line 1040 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double u1 = java.lang.Math.min(java.lang.Math.max(((double) (0) ), ( int_params.u1 / bN )), 1.0);
			//line 1040 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			org.apache.commons.math3.linear.ArrayRealVector point0 = verb.core.Vec.onRay(a0, a1ma0, u0);
			//line 1040 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			org.apache.commons.math3.linear.ArrayRealVector point1 = verb.core.Vec.onRay(b0, b1mb0, u1);
			//line 1040 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			double dist = verb.core.Vec.distSquared(point0, point1);
			//line 1046 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			if (( dist < ( tol * tol ) )) 
			{
				//line 1047 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
				return new verb.core.CurveCurveIntersection(point0, point1, u0, u1);
			}
			
		}
		
		//line 1051 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		return null;
	}
	
	
	public static verb.core.CurveCurveIntersection rays(org.apache.commons.math3.linear.ArrayRealVector a0, org.apache.commons.math3.linear.ArrayRealVector a, org.apache.commons.math3.linear.ArrayRealVector b0, org.apache.commons.math3.linear.ArrayRealVector b)
	{
		//line 1069 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double dab = verb.core.Vec.dot(a, b);
		//line 1069 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double dab0 = verb.core.Vec.dot(a, b0);
		//line 1069 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double daa0 = verb.core.Vec.dot(a, a0);
		//line 1069 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double dbb0 = verb.core.Vec.dot(b, b0);
		//line 1069 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double dba0 = verb.core.Vec.dot(b, a0);
		//line 1069 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double daa = verb.core.Vec.dot(a, a);
		//line 1069 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double dbb = verb.core.Vec.dot(b, b);
		//line 1069 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double div = ( ( daa * dbb ) - ( dab * dab ) );
		//line 1079 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( java.lang.Math.abs(div) < verb.core.Constants.EPSILON )) 
		{
			//line 1080 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return null;
		}
		
		//line 1083 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double num = ( ( dab * (( dab0 - daa0 )) ) - ( daa * (( dbb0 - dba0 )) ) );
		//line 1083 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double w = ( num / div );
		//line 1083 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double t = ( (( ( dab0 - daa0 ) + ( w * dab ) )) / daa );
		//line 1087 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector p0 = verb.core.Vec.onRay(a0, a, t);
		//line 1088 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector p1 = verb.core.Vec.onRay(b0, b, w);
		//line 1090 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		return new verb.core.CurveCurveIntersection(p0, p1, t, w);
	}
	
	
	public static verb.core.TriSegmentIntersection segmentWithTriangle(org.apache.commons.math3.linear.ArrayRealVector p0, org.apache.commons.math3.linear.ArrayRealVector p1, haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> points, haxe.root.Array<java.lang.Object> tri)
	{
		//line 1108 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector v0 = points.__get(((int) (haxe.lang.Runtime.toInt(tri.__get(0))) ));
		//line 1108 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector v1 = points.__get(((int) (haxe.lang.Runtime.toInt(tri.__get(1))) ));
		//line 1108 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector v2 = points.__get(((int) (haxe.lang.Runtime.toInt(tri.__get(2))) ));
		//line 1108 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector u = verb.core.Vec.sub(v1, v0);
		//line 1108 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector v = verb.core.Vec.sub(v2, v0);
		//line 1108 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector n = verb.core.Vec.cross(u, v);
		//line 1115 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector dir = verb.core.Vec.sub(p1, p0);
		//line 1115 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector w0 = verb.core.Vec.sub(p0, v0);
		//line 1115 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double a =  - (verb.core.Vec.dot(n, w0)) ;
		//line 1115 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double b = verb.core.Vec.dot(n, dir);
		//line 1121 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( java.lang.Math.abs(b) < verb.core.Constants.EPSILON )) 
		{
			//line 1122 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return null;
		}
		
		//line 1125 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double r = ( a / b );
		//line 1128 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( ( r < 0 ) || ( r > 1 ) )) 
		{
			//line 1129 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return null;
		}
		
		//line 1133 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector pt = verb.core.Vec.add(p0, verb.core.Vec.mul(r, dir));
		//line 1136 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double uv = verb.core.Vec.dot(u, v);
		//line 1136 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double uu = verb.core.Vec.dot(u, u);
		//line 1136 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double vv = verb.core.Vec.dot(v, v);
		//line 1136 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		org.apache.commons.math3.linear.ArrayRealVector w = verb.core.Vec.sub(pt, v0);
		//line 1136 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double wu = verb.core.Vec.dot(w, u);
		//line 1136 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double wv = verb.core.Vec.dot(w, v);
		//line 1136 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double denom = ( ( uv * uv ) - ( uu * vv ) );
		//line 1144 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( java.lang.Math.abs(denom) < verb.core.Constants.EPSILON )) 
		{
			//line 1145 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return null;
		}
		
		//line 1148 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double s = ( (( ( uv * wv ) - ( vv * wu ) )) / denom );
		//line 1148 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double t = ( (( ( uv * wu ) - ( uu * wv ) )) / denom );
		//line 1151 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( ( ( ( ( s > ( 1.0 + verb.core.Constants.EPSILON ) ) || ( t > ( 1.0 + verb.core.Constants.EPSILON ) ) ) || ( t <  - (verb.core.Constants.EPSILON)  ) ) || ( s <  - (verb.core.Constants.EPSILON)  ) ) || ( ( s + t ) > ( 1.0 + verb.core.Constants.EPSILON ) ) )) 
		{
			//line 1152 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return null;
		}
		
		//line 1155 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		return new verb.core.TriSegmentIntersection(pt, s, t, r);
	}
	
	
	public static java.lang.Object segmentAndPlane(org.apache.commons.math3.linear.ArrayRealVector p0, org.apache.commons.math3.linear.ArrayRealVector p1, org.apache.commons.math3.linear.ArrayRealVector v0, org.apache.commons.math3.linear.ArrayRealVector n)
	{
		//line 1177 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double denom = verb.core.Vec.dot(n, verb.core.Vec.sub(p1, p0));
		//line 1180 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( java.lang.Math.abs(denom) < verb.core.Constants.EPSILON )) 
		{
			//line 1181 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return null;
		}
		
		//line 1184 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double numer = verb.core.Vec.dot(n, verb.core.Vec.sub(v0, p0));
		//line 1186 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		double p = ( numer / denom );
		//line 1188 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		if (( ( p > ( 1.0 + verb.core.Constants.EPSILON ) ) || ( p <  - (verb.core.Constants.EPSILON)  ) )) 
		{
			//line 1188 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
			return null;
		}
		
		//line 1190 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Intersect.hx"
		return new haxe.lang.DynamicObject(new java.lang.String[]{}, new java.lang.Object[]{}, new java.lang.String[]{"p"}, new double[]{((double) (p) )});
	}
	
	
}


