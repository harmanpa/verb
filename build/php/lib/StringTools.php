<?php
/**
 * Generated by Haxe 4.1.4
 */

use \php\Boot;

/**
 * This class provides advanced methods on Strings. It is ideally used with
 * `using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
 * to the `String` class.
 * If the first argument to any of the methods is null, the result is
 * unspecified.
 */
class StringTools {
	/**
	 * Returns the character code at position `index` of String `s`, or an
	 * end-of-file indicator at if `position` equals `s.length`.
	 * This method is faster than `String.charCodeAt()` on some platforms, but
	 * the result is unspecified if `index` is negative or greater than
	 * `s.length`.
	 * End of file status can be checked by calling `StringTools.isEof()` with
	 * the returned value as argument.
	 * This operation is not guaranteed to work if `s` contains the `\0`
	 * character.
	 * 
	 * @param string $s
	 * @param int $index
	 * 
	 * @return int
	 */
	public static function fastCodeAt ($s, $index) {
		#C:\Tools\HaxeToolkit\haxe\std/php/_std/StringTools.hx:121: characters 3-76
		$char = ($index === 0 ? $s : mb_substr($s, $index, 1));
		#C:\Tools\HaxeToolkit\haxe\std/php/_std/StringTools.hx:122: lines 122-123
		if ($char === "") {
			#C:\Tools\HaxeToolkit\haxe\std/php/_std/StringTools.hx:123: characters 4-12
			return 0;
		}
		#C:\Tools\HaxeToolkit\haxe\std/php/_std/StringTools.hx:124: characters 10-30
		$code = ord($char[0]);
		if ($code < 192) {
			return $code;
		} else if ($code < 224) {
			return (($code - 192) << 6) + ord($char[1]) - 128;
		} else if ($code < 240) {
			return (($code - 224) << 12) + ((ord($char[1]) - 128) << 6) + ord($char[2]) - 128;
		} else {
			return (($code - 240) << 18) + ((ord($char[1]) - 128) << 12) + ((ord($char[2]) - 128) << 6) + ord($char[3]) - 128;
		}
	}
}

Boot::registerClass(StringTools::class, 'StringTools');
