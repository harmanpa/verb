<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace verb\core;

use \php\Boot;

class ArrayExtensions {
	/**
	 * @param \Array_hx $a
	 * @param int $n
	 * 
	 * @return void
	 */
	public static function alloc ($a, $n) {
		#src/verb/core/ArrayExtensions.hx:17: characters 9-26
		if ($n < 0) {
			#src/verb/core/ArrayExtensions.hx:17: characters 20-26
			return;
		}
		#src/verb/core/ArrayExtensions.hx:18: lines 18-20
		while ($a->length < $n) {
			#src/verb/core/ArrayExtensions.hx:19: characters 13-25
			$a->arr[$a->length++] = null;
		}
	}

	/**
	 * @param \Array_hx $a
	 * 
	 * @return mixed
	 */
	public static function first ($a) {
		#src/verb/core/ArrayExtensions.hx:64: characters 9-20
		return ($a->arr[0] ?? null);
	}

	/**
	 * @param \Array_hx $a
	 * 
	 * @return mixed
	 */
	public static function last ($a) {
		#src/verb/core/ArrayExtensions.hx:50: characters 9-29
		return ($a->arr[$a->length - 1] ?? null);
	}

	/**
	 * @param \Array_hx $arr
	 * 
	 * @return \Array_hx
	 */
	public static function left ($arr) {
		#src/verb/core/ArrayExtensions.hx:83: characters 9-39
		if ($arr->length === 0) {
			#src/verb/core/ArrayExtensions.hx:83: characters 30-39
			return new \Array_hx();
		}
		#src/verb/core/ArrayExtensions.hx:84: characters 9-47
		$len = (int)(\ceil($arr->length / 2));
		#src/verb/core/ArrayExtensions.hx:85: characters 9-35
		return $arr->slice(0, $len);
	}

	/**
	 * @param \Array_hx $a
	 * 
	 * @return \Array_hx
	 */
	public static function reversed ($a) {
		#src/verb/core/ArrayExtensions.hx:34: characters 9-27
		$ac = (clone $a);
		#src/verb/core/ArrayExtensions.hx:35: characters 9-21
		$ac->arr = \array_reverse($ac->arr);
		#src/verb/core/ArrayExtensions.hx:36: characters 9-18
		return $ac;
	}

	/**
	 * @param \Array_hx $arr
	 * 
	 * @return \Array_hx
	 */
	public static function right ($arr) {
		#src/verb/core/ArrayExtensions.hx:99: characters 9-39
		if ($arr->length === 0) {
			#src/verb/core/ArrayExtensions.hx:99: characters 30-39
			return new \Array_hx();
		}
		#src/verb/core/ArrayExtensions.hx:100: characters 9-47
		$len = (int)(\ceil($arr->length / 2));
		#src/verb/core/ArrayExtensions.hx:101: characters 9-32
		return $arr->slice($len);
	}

	/**
	 * @param \Array_hx $arr
	 * 
	 * @return \Array_hx
	 */
	public static function rightWithPivot ($arr) {
		#src/verb/core/ArrayExtensions.hx:115: characters 9-39
		if ($arr->length === 0) {
			#src/verb/core/ArrayExtensions.hx:115: characters 30-39
			return new \Array_hx();
		}
		#src/verb/core/ArrayExtensions.hx:116: characters 9-47
		$len = (int)(\ceil($arr->length / 2));
		#src/verb/core/ArrayExtensions.hx:117: characters 9-34
		return $arr->slice($len - 1);
	}

	/**
	 * @param \Array_hx $a
	 * @param int $start
	 * @param int $end
	 * @param mixed $ele
	 * 
	 * @return void
	 */
	public static function spliceAndInsert ($a, $start, $end, $ele) {
		#src/verb/core/ArrayExtensions.hx:68: characters 9-29
		$a->splice($start, $end);
		#src/verb/core/ArrayExtensions.hx:69: characters 9-29
		$a->insert($start, $ele);
	}

	/**
	 * @param \Array_hx $arr
	 * @param \Closure $comp
	 * 
	 * @return \Array_hx
	 */
	public static function unique ($arr, $comp) {
		#src/verb/core/ArrayExtensions.hx:134: characters 9-36
		$uniques = new \Array_hx();
		#src/verb/core/ArrayExtensions.hx:136: characters 9-44
		if ($arr->length === 0) {
			#src/verb/core/ArrayExtensions.hx:136: characters 30-44
			return $uniques;
		}
		#src/verb/core/ArrayExtensions.hx:138: characters 22-31
		if ($arr->length > 0) {
			$arr->length--;
		}
		#src/verb/core/ArrayExtensions.hx:138: characters 9-32
		$x = \array_pop($arr->arr);
		$uniques->arr[$uniques->length++] = $x;
		#src/verb/core/ArrayExtensions.hx:140: lines 140-155
		while ($arr->length > 0) {
			#src/verb/core/ArrayExtensions.hx:142: characters 23-32
			if ($arr->length > 0) {
				$arr->length--;
			}
			#src/verb/core/ArrayExtensions.hx:142: characters 13-33
			$ele = \array_pop($arr->arr);
			#src/verb/core/ArrayExtensions.hx:143: characters 13-33
			$isUnique = true;
			#src/verb/core/ArrayExtensions.hx:145: lines 145-150
			$_g = 0;
			while ($_g < $uniques->length) {
				#src/verb/core/ArrayExtensions.hx:145: characters 18-24
				$unique = ($uniques->arr[$_g] ?? null);
				#src/verb/core/ArrayExtensions.hx:145: lines 145-150
				++$_g;
				#src/verb/core/ArrayExtensions.hx:146: lines 146-149
				if ($comp($ele, $unique)) {
					#src/verb/core/ArrayExtensions.hx:147: characters 21-37
					$isUnique = false;
					#src/verb/core/ArrayExtensions.hx:148: characters 21-26
					break;
				}
			}
			#src/verb/core/ArrayExtensions.hx:152: lines 152-154
			if ($isUnique) {
				#src/verb/core/ArrayExtensions.hx:153: characters 17-36
				$uniques->arr[$uniques->length++] = $ele;
			}
		}
		#src/verb/core/ArrayExtensions.hx:157: characters 9-23
		return $uniques;
	}
}

Boot::registerClass(ArrayExtensions::class, 'verb.core.ArrayExtensions');
