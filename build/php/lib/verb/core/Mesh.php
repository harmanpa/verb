<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace verb\core;

use \php\Boot;

class Mesh {
	/**
	 * @param \Array_hx $points
	 * @param \Array_hx $tri
	 * @param int $axis
	 * 
	 * @return float
	 */
	public static function getMinCoordOnAxis ($points, $tri, $axis) {
		#src/verb/core/Mesh.hx:115: characters 9-42
		$min = \Math::$POSITIVE_INFINITY;
		#src/verb/core/Mesh.hx:118: characters 13-50
		$coord = (($points->arr[($tri->arr[0] ?? null)] ?? null)->arr[$axis] ?? null);
		#src/verb/core/Mesh.hx:119: characters 13-41
		if ($coord < $min) {
			#src/verb/core/Mesh.hx:119: characters 30-41
			$min = $coord;
		}
		#src/verb/core/Mesh.hx:118: characters 13-50
		$coord = (($points->arr[($tri->arr[1] ?? null)] ?? null)->arr[$axis] ?? null);
		#src/verb/core/Mesh.hx:119: characters 13-41
		if ($coord < $min) {
			#src/verb/core/Mesh.hx:119: characters 30-41
			$min = $coord;
		}
		#src/verb/core/Mesh.hx:118: characters 13-50
		$coord = (($points->arr[($tri->arr[2] ?? null)] ?? null)->arr[$axis] ?? null);
		#src/verb/core/Mesh.hx:119: characters 13-41
		if ($coord < $min) {
			#src/verb/core/Mesh.hx:119: characters 30-41
			$min = $coord;
		}
		#src/verb/core/Mesh.hx:122: characters 9-19
		return $min;
	}

	/**
	 * @param \Array_hx $points
	 * @param \Array_hx $tri
	 * 
	 * @return \Array_hx
	 */
	public static function getTriangleCentroid ($points, $tri) {
		#src/verb/core/Mesh.hx:139: characters 9-38
		$centroid = \Array_hx::wrap([
			0.0,
			0.0,
			0.0,
		]);
		#src/verb/core/Mesh.hx:143: characters 17-51
		$centroid[0] += (($points->arr[($tri->arr[0] ?? null)] ?? null)->arr[0] ?? null);
		$centroid[1] += (($points->arr[($tri->arr[0] ?? null)] ?? null)->arr[1] ?? null);
		$centroid[2] += (($points->arr[($tri->arr[0] ?? null)] ?? null)->arr[2] ?? null);
		$centroid[0] += (($points->arr[($tri->arr[1] ?? null)] ?? null)->arr[0] ?? null);
		$centroid[1] += (($points->arr[($tri->arr[1] ?? null)] ?? null)->arr[1] ?? null);
		$centroid[2] += (($points->arr[($tri->arr[1] ?? null)] ?? null)->arr[2] ?? null);
		$centroid[0] += (($points->arr[($tri->arr[2] ?? null)] ?? null)->arr[0] ?? null);
		$centroid[1] += (($points->arr[($tri->arr[2] ?? null)] ?? null)->arr[1] ?? null);
		$centroid[2] += (($points->arr[($tri->arr[2] ?? null)] ?? null)->arr[2] ?? null);
		#src/verb/core/Mesh.hx:148: characters 13-29
		$centroid[0] /= 3;
		$centroid[1] /= 3;
		$centroid[2] /= 3;
		#src/verb/core/Mesh.hx:151: characters 9-24
		return $centroid;
	}

	/**
	 * @param \Array_hx $points
	 * @param \Array_hx $tri
	 * 
	 * @return \Array_hx
	 */
	public static function getTriangleNorm ($points, $tri) {
		#src/verb/core/Mesh.hx:27: lines 27-32
		$v0 = ($points->arr[($tri->arr[0] ?? null)] ?? null);
		$v1 = ($points->arr[($tri->arr[1] ?? null)] ?? null);
		$v2 = ($points->arr[($tri->arr[2] ?? null)] ?? null);
		$u = Vec::sub($v1, $v0);
		$v = Vec::sub($v2, $v0);
		$n = Vec::cross($u, $v);
		#src/verb/core/Mesh.hx:34: characters 9-47
		return Vec::mul(1 / Vec::norm($n), $n);
	}

	/**
	 * @param MeshData $mesh
	 * @param \Array_hx $faceIndices
	 * 
	 * @return BoundingBox
	 */
	public static function makeMeshAabb ($mesh, $faceIndices) {
		#src/verb/core/Mesh.hx:52: characters 9-46
		$bb = new BoundingBox();
		#src/verb/core/Mesh.hx:54: lines 54-58
		$_g = 0;
		while ($_g < $faceIndices->length) {
			#src/verb/core/Mesh.hx:54: characters 15-16
			$x = ($faceIndices->arr[$_g] ?? null);
			#src/verb/core/Mesh.hx:54: lines 54-58
			++$_g;
			#src/verb/core/Mesh.hx:55: characters 13-56
			$bb->add(($mesh->points->arr[(($mesh->faces->arr[$x] ?? null)->arr[0] ?? null)] ?? null));
			#src/verb/core/Mesh.hx:56: characters 13-56
			$bb->add(($mesh->points->arr[(($mesh->faces->arr[$x] ?? null)->arr[1] ?? null)] ?? null));
			#src/verb/core/Mesh.hx:57: characters 13-56
			$bb->add(($mesh->points->arr[(($mesh->faces->arr[$x] ?? null)->arr[2] ?? null)] ?? null));
		}
		#src/verb/core/Mesh.hx:60: characters 9-18
		return $bb;
	}

	/**
	 * @param BoundingBox $bb
	 * @param MeshData $mesh
	 * @param \Array_hx $faceIndices
	 * 
	 * @return \Array_hx
	 */
	public static function sortTrianglesOnLongestAxis ($bb, $mesh, $faceIndices) {
		#src/verb/core/Mesh.hx:78: characters 9-44
		$longAxis = $bb->getLongestAxis();
		#src/verb/core/Mesh.hx:80: characters 9-61
		$minCoordFaceMap = new \Array_hx();
		#src/verb/core/Mesh.hx:81: lines 81-84
		$_g = 0;
		while ($_g < $faceIndices->length) {
			#src/verb/core/Mesh.hx:81: characters 15-24
			$faceIndex = ($faceIndices->arr[$_g] ?? null);
			#src/verb/core/Mesh.hx:81: lines 81-84
			++$_g;
			#src/verb/core/Mesh.hx:82: characters 13-95
			$tri_min = Mesh::getMinCoordOnAxis($mesh->points, ($mesh->faces->arr[$faceIndex] ?? null), $longAxis);
			#src/verb/core/Mesh.hx:83: characters 13-76
			$x = new Pair($tri_min, $faceIndex);
			$minCoordFaceMap->arr[$minCoordFaceMap->length++] = $x;
		}
		#src/verb/core/Mesh.hx:86: lines 86-91
		\usort($minCoordFaceMap->arr, function ($a, $b) {
			#src/verb/core/Mesh.hx:87: characters 13-30
			$a0 = $a->item0;
			#src/verb/core/Mesh.hx:88: characters 13-30
			$b0 = $b->item0;
			#src/verb/core/Mesh.hx:90: characters 13-77
			if (Boot::equal($a0, $b0)) {
				#src/verb/core/Mesh.hx:90: characters 27-35
				return 0;
			} else if ($a0 > $b0) {
				#src/verb/core/Mesh.hx:90: characters 54-62
				return 1;
			} else {
				#src/verb/core/Mesh.hx:90: characters 68-77
				return -1;
			}
		});
		#src/verb/core/Mesh.hx:93: characters 9-50
		$sortedFaceIndices = new \Array_hx();
		#src/verb/core/Mesh.hx:94: characters 20-24
		$_g = 0;
		#src/verb/core/Mesh.hx:94: characters 24-46
		$_g1 = $minCoordFaceMap->length;
		#src/verb/core/Mesh.hx:94: lines 94-96
		while ($_g < $_g1) {
			#src/verb/core/Mesh.hx:94: characters 20-46
			$i = $_g++;
			#src/verb/core/Mesh.hx:95: characters 13-63
			$x = ($minCoordFaceMap->arr[$i] ?? null)->item1;
			$sortedFaceIndices->arr[$sortedFaceIndices->length++] = $x;
		}
		#src/verb/core/Mesh.hx:98: characters 9-33
		return $sortedFaceIndices;
	}

	/**
	 * @param MeshData $mesh
	 * @param int $faceIndex
	 * @param \Array_hx $f
	 * 
	 * @return \Array_hx
	 */
	public static function triangleUVFromPoint ($mesh, $faceIndex, $f) {
		#src/verb/core/Mesh.hx:168: characters 9-41
		$tri = ($mesh->faces->arr[$faceIndex] ?? null);
		#src/verb/core/Mesh.hx:170: characters 9-40
		$p1 = ($mesh->points->arr[($tri->arr[0] ?? null)] ?? null);
		#src/verb/core/Mesh.hx:171: characters 9-40
		$p2 = ($mesh->points->arr[($tri->arr[1] ?? null)] ?? null);
		#src/verb/core/Mesh.hx:172: characters 9-40
		$p3 = ($mesh->points->arr[($tri->arr[2] ?? null)] ?? null);
		#src/verb/core/Mesh.hx:174: characters 9-38
		$uv1 = ($mesh->uvs->arr[($tri->arr[0] ?? null)] ?? null);
		#src/verb/core/Mesh.hx:175: characters 9-38
		$uv2 = ($mesh->uvs->arr[($tri->arr[1] ?? null)] ?? null);
		#src/verb/core/Mesh.hx:176: characters 9-38
		$uv3 = ($mesh->uvs->arr[($tri->arr[2] ?? null)] ?? null);
		#src/verb/core/Mesh.hx:178: characters 9-33
		$f1 = Vec::sub($p1, $f);
		#src/verb/core/Mesh.hx:179: characters 9-33
		$f2 = Vec::sub($p2, $f);
		#src/verb/core/Mesh.hx:180: characters 9-33
		$f3 = Vec::sub($p3, $f);
		#src/verb/core/Mesh.hx:183: characters 9-75
		$a = Vec::norm(Vec::cross(Vec::sub($p1, $p2), Vec::sub($p1, $p3)));
		#src/verb/core/Mesh.hx:184: characters 9-52
		$a1 = Vec::norm(Vec::cross($f2, $f3)) / $a;
		#src/verb/core/Mesh.hx:185: characters 9-52
		$a2 = Vec::norm(Vec::cross($f3, $f1)) / $a;
		#src/verb/core/Mesh.hx:186: characters 9-52
		$a3 = Vec::norm(Vec::cross($f1, $f2)) / $a;
		#src/verb/core/Mesh.hx:189: characters 9-91
		return Vec::add(Vec::mul($a1, $uv1), Vec::add(Vec::mul($a2, $uv2), Vec::mul($a3, $uv3)));
	}
}

Boot::registerClass(Mesh::class, 'verb.core.Mesh');
