<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace verb\core;

use \php\Boot;
use \haxe\Exception;

class BinaryHeap {
	/**
	 * @var \Array_hx
	 */
	public $content;
	/**
	 * @var \Closure
	 */
	public $scoreFunction;

	/**
	 * @param \Closure $scoreFunction
	 * 
	 * @return void
	 */
	public function __construct ($scoreFunction) {
		#src/verb/core/KdTree.hx:161: characters 9-26
		$this->content = new \Array_hx();
		#src/verb/core/KdTree.hx:162: characters 9-43
		$this->scoreFunction = $scoreFunction;
	}

	/**
	 * @param int $n
	 * 
	 * @return void
	 */
	public function bubbleUp ($n) {
		#src/verb/core/KdTree.hx:218: characters 9-39
		$element = ($this->content->arr[$n] ?? null);
		#src/verb/core/KdTree.hx:220: lines 220-235
		while ($n > 0) {
			#src/verb/core/KdTree.hx:222: lines 222-223
			$parentN = (int)(\floor(($n + 1.0) / 2)) - 1;
			$parent = ($this->content->arr[$parentN] ?? null);
			#src/verb/core/KdTree.hx:225: lines 225-234
			if (($this->scoreFunction)($element) < ($this->scoreFunction)($parent)) {
				#src/verb/core/KdTree.hx:226: characters 17-48
				$this->content->offsetSet($parentN, $element);
				#src/verb/core/KdTree.hx:227: characters 17-41
				$this->content->offsetSet($n, $parent);
				#src/verb/core/KdTree.hx:229: characters 17-28
				$n = $parentN;
			} else {
				#src/verb/core/KdTree.hx:233: characters 17-22
				break;
			}
		}
	}

	/**
	 * @return HeapElement
	 */
	public function peek () {
		#src/verb/core/KdTree.hx:187: characters 9-31
		return ($this->content->arr[0] ?? null);
	}

	/**
	 * @return HeapElement
	 */
	public function pop () {
		#src/verb/core/KdTree.hx:174: characters 9-38
		$result = ($this->content->arr[0] ?? null);
		#src/verb/core/KdTree.hx:176: characters 19-37
		$_this = $this->content;
		if ($_this->length > 0) {
			$_this->length--;
		}
		#src/verb/core/KdTree.hx:176: characters 9-38
		$end = \array_pop($_this->arr);
		#src/verb/core/KdTree.hx:179: lines 179-182
		if ($this->content->length > 0) {
			#src/verb/core/KdTree.hx:180: characters 13-34
			$this->content->offsetSet(0, $end);
			#src/verb/core/KdTree.hx:181: characters 13-29
			$this->sinkDown(0);
		}
		#src/verb/core/KdTree.hx:183: characters 9-22
		return $result;
	}

	/**
	 * @param HeapElement $element
	 * 
	 * @return void
	 */
	public function push ($element) {
		#src/verb/core/KdTree.hx:167: characters 9-35
		$_this = $this->content;
		$_this->arr[$_this->length++] = $element;
		#src/verb/core/KdTree.hx:169: characters 9-47
		$this->bubbleUp($this->content->length - 1);
	}

	/**
	 * @param HeapElement $node
	 * 
	 * @return void
	 */
	public function remove ($node) {
		#src/verb/core/KdTree.hx:191: characters 9-39
		$len = $this->content->length;
		#src/verb/core/KdTree.hx:194: characters 19-23
		$_g = 0;
		#src/verb/core/KdTree.hx:194: characters 23-26
		$_g1 = $len;
		#src/verb/core/KdTree.hx:194: lines 194-208
		while ($_g < $_g1) {
			#src/verb/core/KdTree.hx:194: characters 19-26
			$i = $_g++;
			#src/verb/core/KdTree.hx:195: lines 195-207
			if (($this->content->arr[$i] ?? null) === $node) {
				#src/verb/core/KdTree.hx:198: characters 27-45
				$_this = $this->content;
				if ($_this->length > 0) {
					$_this->length--;
				}
				#src/verb/core/KdTree.hx:198: characters 17-46
				$end = \array_pop($_this->arr);
				#src/verb/core/KdTree.hx:199: lines 199-205
				if ($i !== ($len - 1)) {
					#src/verb/core/KdTree.hx:200: characters 21-42
					$this->content->offsetSet($i, $end);
					#src/verb/core/KdTree.hx:201: lines 201-204
					if (($this->scoreFunction)($end) < ($this->scoreFunction)($node)) {
						#src/verb/core/KdTree.hx:202: characters 25-41
						$this->bubbleUp($i);
					} else {
						#src/verb/core/KdTree.hx:204: characters 25-41
						$this->sinkDown($i);
					}
				}
				#src/verb/core/KdTree.hx:206: characters 17-23
				return;
			}
		}
		#src/verb/core/KdTree.hx:209: characters 9-14
		throw Exception::thrown("Node not found.");
	}

	/**
	 * @param int $n
	 * 
	 * @return void
	 */
	public function sinkDown ($n) {
		#src/verb/core/KdTree.hx:240: lines 240-242
		$length = $this->content->length;
		$element = ($this->content->arr[$n] ?? null);
		$elemScore = ($this->scoreFunction)($element);
		#src/verb/core/KdTree.hx:244: lines 244-281
		while (true) {
			#src/verb/core/KdTree.hx:246: characters 13-39
			$child2N = ($n + 1) * 2;
			#src/verb/core/KdTree.hx:247: characters 13-39
			$child1N = $child2N - 1;
			#src/verb/core/KdTree.hx:250: characters 13-27
			$swap = -1;
			#src/verb/core/KdTree.hx:251: characters 13-43
			$child1Score = 0.0;
			#src/verb/core/KdTree.hx:254: lines 254-261
			if ($child1N < $length) {
				#src/verb/core/KdTree.hx:256: characters 17-52
				$child1 = ($this->content->arr[$child1N] ?? null);
				#src/verb/core/KdTree.hx:257: characters 17-57
				$child1Score = ($this->scoreFunction)($child1);
				#src/verb/core/KdTree.hx:259: lines 259-260
				if ($child1Score < $elemScore) {
					#src/verb/core/KdTree.hx:260: characters 21-35
					$swap = $child1N;
				}
			}
			#src/verb/core/KdTree.hx:263: lines 263-269
			if ($child2N < $length) {
				#src/verb/core/KdTree.hx:264: characters 17-52
				$child2 = ($this->content->arr[$child2N] ?? null);
				#src/verb/core/KdTree.hx:265: characters 17-62
				$child2Score = ($this->scoreFunction)($child2);
				#src/verb/core/KdTree.hx:266: lines 266-268
				if ($child2Score < (($swap === -1 ? $elemScore : $child1Score))) {
					#src/verb/core/KdTree.hx:267: characters 21-35
					$swap = $child2N;
				}
			}
			#src/verb/core/KdTree.hx:272: lines 272-280
			if ($swap !== -1) {
				#src/verb/core/KdTree.hx:273: characters 17-53
				$this->content->offsetSet($n, ($this->content->arr[$swap] ?? null));
				#src/verb/core/KdTree.hx:274: characters 17-45
				$this->content->offsetSet($swap, $element);
				#src/verb/core/KdTree.hx:275: characters 17-25
				$n = $swap;
			} else {
				#src/verb/core/KdTree.hx:279: characters 17-22
				break;
			}
		}
	}

	/**
	 * @return int
	 */
	public function size () {
		#src/verb/core/KdTree.hx:213: characters 9-35
		return $this->content->length;
	}
}

Boot::registerClass(BinaryHeap::class, 'verb.core.BinaryHeap');
