<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace verb\core;

use \php\Boot;
use \verb\eval_hx\IBoundingBoxTree;

class LazyMeshBoundingBoxTree implements IBoundingBoxTree {
	/**
	 * @var BoundingBox
	 */
	public $_boundingBox;
	/**
	 * @var \Array_hx
	 */
	public $_faceIndices;
	/**
	 * @var MeshData
	 */
	public $_mesh;

	/**
	 * @param MeshData $mesh
	 * @param \Array_hx $faceIndices
	 * 
	 * @return void
	 */
	public function __construct ($mesh, $faceIndices = null) {
		#src/verb/core/LazyMeshBoundingBoxTree.hx:11: characters 38-42
		$this->_boundingBox = null;
		#src/verb/core/LazyMeshBoundingBoxTree.hx:14: characters 9-21
		$this->_mesh = $mesh;
		#src/verb/core/LazyMeshBoundingBoxTree.hx:15: lines 15-17
		if ($faceIndices === null) {
			#src/verb/core/LazyMeshBoundingBoxTree.hx:16: characters 27-65
			$_g = new \Array_hx();
			#src/verb/core/LazyMeshBoundingBoxTree.hx:16: characters 39-43
			$_g1 = 0;
			#src/verb/core/LazyMeshBoundingBoxTree.hx:16: characters 43-60
			$_g2 = $mesh->faces->length;
			#src/verb/core/LazyMeshBoundingBoxTree.hx:16: characters 29-63
			while ($_g1 < $_g2) {
				#src/verb/core/LazyMeshBoundingBoxTree.hx:16: characters 39-60
				$i = $_g1++;
				#src/verb/core/LazyMeshBoundingBoxTree.hx:16: characters 62-63
				$_g->arr[$_g->length++] = $i;
			}
			#src/verb/core/LazyMeshBoundingBoxTree.hx:16: characters 27-65
			$faceIndices = $_g;
		}
		#src/verb/core/LazyMeshBoundingBoxTree.hx:18: characters 9-35
		$this->_faceIndices = $faceIndices;
	}

	/**
	 * @return BoundingBox
	 */
	public function boundingBox () {
		#src/verb/core/LazyMeshBoundingBoxTree.hx:32: lines 32-34
		if ($this->_boundingBox === null) {
			#src/verb/core/LazyMeshBoundingBoxTree.hx:33: characters 13-68
			$this->_boundingBox = Mesh::makeMeshAabb($this->_mesh, $this->_faceIndices);
		}
		#src/verb/core/LazyMeshBoundingBoxTree.hx:35: characters 9-28
		return $this->_boundingBox;
	}

	/**
	 * @return bool
	 */
	public function empty () {
		#src/verb/core/LazyMeshBoundingBoxTree.hx:47: characters 9-40
		return $this->_faceIndices->length === 0;
	}

	/**
	 * @param float $tolerance
	 * 
	 * @return bool
	 */
	public function indivisible ($tolerance) {
		#src/verb/core/LazyMeshBoundingBoxTree.hx:43: characters 9-40
		return $this->_faceIndices->length === 1;
	}

	/**
	 * @return Pair
	 */
	public function split () {
		#src/verb/core/LazyMeshBoundingBoxTree.hx:22: lines 22-24
		$as = Mesh::sortTrianglesOnLongestAxis($this->boundingBox(), $this->_mesh, $this->_faceIndices);
		$l = ArrayExtensions::left($as);
		$r = ArrayExtensions::right($as);
		#src/verb/core/LazyMeshBoundingBoxTree.hx:27: characters 13-51
		$tmp = new LazyMeshBoundingBoxTree($this->_mesh, $l);
		#src/verb/core/LazyMeshBoundingBoxTree.hx:26: lines 26-28
		return new Pair($tmp, new LazyMeshBoundingBoxTree($this->_mesh, $r));
	}

	/**
	 * @return int
	 */
	public function yield () {
		#src/verb/core/LazyMeshBoundingBoxTree.hx:39: characters 9-31
		return ($this->_faceIndices->arr[0] ?? null);
	}
}

Boot::registerClass(LazyMeshBoundingBoxTree::class, 'verb.core.LazyMeshBoundingBoxTree');
