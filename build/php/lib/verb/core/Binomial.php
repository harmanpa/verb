<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace verb\core;

use \php\Boot;
use \haxe\ds\IntMap;

class Binomial {
	/**
	 * @var IntMap
	 */
	static public $memo;

	/**
	 * @param int $n
	 * @param int $k
	 * 
	 * @return float
	 */
	public static function get ($n, $k) {
		#src/verb/core/Binomial.hx:10: lines 10-12
		if (Boot::equal($k, 0.0)) {
			#src/verb/core/Binomial.hx:11: characters 13-23
			return 1.0;
		}
		#src/verb/core/Binomial.hx:14: lines 14-16
		if (($n === 0) || ($k > $n)) {
			#src/verb/core/Binomial.hx:15: characters 13-23
			return 0.0;
		}
		#src/verb/core/Binomial.hx:18: lines 18-20
		if ($k > ($n - $k)) {
			#src/verb/core/Binomial.hx:19: characters 13-22
			$k = $n - $k;
		}
		#src/verb/core/Binomial.hx:22: lines 22-24
		if (Binomial::memo_exists($n, $k)) {
			#src/verb/core/Binomial.hx:23: characters 13-33
			return Binomial::get_memo($n, $k);
		}
		#src/verb/core/Binomial.hx:26: lines 26-27
		$r = 1;
		$n_o = $n;
		#src/verb/core/Binomial.hx:29: characters 19-23
		$_g = 1;
		#src/verb/core/Binomial.hx:29: characters 23-26
		$_g1 = $k + 1;
		#src/verb/core/Binomial.hx:29: lines 29-42
		while ($_g < $_g1) {
			#src/verb/core/Binomial.hx:29: characters 19-26
			$d = $_g++;
			#src/verb/core/Binomial.hx:31: lines 31-35
			if (Binomial::memo_exists($n_o, $d)) {
				#src/verb/core/Binomial.hx:32: characters 17-20
				--$n;
				#src/verb/core/Binomial.hx:33: characters 17-37
				$r = Binomial::get_memo($n_o, $d);
				#src/verb/core/Binomial.hx:34: characters 17-25
				continue;
			}
			#src/verb/core/Binomial.hx:37: characters 13-21
			$r *= $n--;
			#src/verb/core/Binomial.hx:38: characters 13-19
			$r /= $d;
			#src/verb/core/Binomial.hx:40: characters 13-31
			Binomial::memoize($n_o, $d, $r);
		}
		#src/verb/core/Binomial.hx:44: characters 9-17
		return $r;
	}

	/**
	 * @param int $n
	 * @param int $k
	 * 
	 * @return float
	 */
	public static function get_memo ($n, $k) {
		#src/verb/core/Binomial.hx:76: characters 16-34
		return ((Binomial::$memo->data[$n] ?? null)->data[$k] ?? null);
	}

	/**
	 * @param int $n
	 * @param int $k
	 * 
	 * @return float
	 */
	public static function get_no_memo ($n, $k) {
		#src/verb/core/Binomial.hx:48: lines 48-50
		if ($k === 0) {
			#src/verb/core/Binomial.hx:49: characters 13-21
			return 1;
		}
		#src/verb/core/Binomial.hx:52: lines 52-54
		if (($n === 0) || ($k > $n)) {
			#src/verb/core/Binomial.hx:53: characters 13-21
			return 0;
		}
		#src/verb/core/Binomial.hx:56: lines 56-58
		if ($k > ($n - $k)) {
			#src/verb/core/Binomial.hx:57: characters 13-22
			$k = $n - $k;
		}
		#src/verb/core/Binomial.hx:60: lines 60-61
		$r = 1;
		$n_o = $n;
		#src/verb/core/Binomial.hx:63: characters 19-23
		$_g = 1;
		#src/verb/core/Binomial.hx:63: characters 23-26
		$_g1 = $k + 1;
		#src/verb/core/Binomial.hx:63: lines 63-66
		while ($_g < $_g1) {
			#src/verb/core/Binomial.hx:63: characters 19-26
			$d = $_g++;
			#src/verb/core/Binomial.hx:64: characters 13-21
			$r *= $n--;
			#src/verb/core/Binomial.hx:65: characters 13-19
			$r /= $d;
		}
		#src/verb/core/Binomial.hx:68: characters 9-17
		return $r;
	}

	/**
	 * @param int $n
	 * @param int $k
	 * 
	 * @return bool
	 */
	public static function memo_exists ($n, $k) {
		#src/verb/core/Binomial.hx:72: characters 16-59
		if (\array_key_exists($n, Binomial::$memo->data)) {
			#src/verb/core/Binomial.hx:72: characters 36-57
			return \array_key_exists($k, (Binomial::$memo->data[$n] ?? null)->data);
		} else {
			#src/verb/core/Binomial.hx:72: characters 16-59
			return false;
		}
	}

	/**
	 * @param int $n
	 * @param int $k
	 * @param float $val
	 * 
	 * @return void
	 */
	public static function memoize ($n, $k, $val) {
		#src/verb/core/Binomial.hx:80: lines 80-82
		if (!\array_key_exists($n, Binomial::$memo->data)) {
			#src/verb/core/Binomial.hx:81: characters 13-47
			$_this = Binomial::$memo;
			$value = new IntMap();
			$_this->data[$n] = $value;
		}
		#src/verb/core/Binomial.hx:84: characters 9-36
		Boot::deref((Binomial::$memo->data[$n] ?? null))->data[$k] = $val;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$memo = new IntMap();
	}
}

Boot::registerClass(Binomial::class, 'verb.core.Binomial');
Binomial::__hx__init();
