<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace verb\core;

use \php\Boot;
use \verb\eval_hx\Divide;
use \verb\eval_hx\Eval_hx;
use \verb\eval_hx\IBoundingBoxTree;

class LazySurfaceBoundingBoxTree implements IBoundingBoxTree {
	/**
	 * @var BoundingBox
	 */
	public $_boundingBox;
	/**
	 * @var float
	 */
	public $_knotTolU;
	/**
	 * @var float
	 */
	public $_knotTolV;
	/**
	 * @var bool
	 */
	public $_splitV;
	/**
	 * @var NurbsSurfaceData
	 */
	public $_surface;

	/**
	 * @param NurbsSurfaceData $surface
	 * @param bool $splitV
	 * @param float $knotTolU
	 * @param float $knotTolV
	 * 
	 * @return void
	 */
	public function __construct ($surface, $splitV = false, $knotTolU = null, $knotTolV = null) {
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:11: lines 11-78
		if ($splitV === null) {
			$splitV = false;
		}
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:14: characters 38-42
		$this->_boundingBox = null;
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:20: characters 9-27
		$this->_surface = $surface;
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:21: characters 9-25
		$this->_splitV = $splitV;
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:23: lines 23-25
		if ($knotTolU === null) {
			#src/verb/core/LazySurfaceBoundingBoxTree.hx:24: characters 25-48
			$a = $surface->knotsU;
			#src/verb/core/LazySurfaceBoundingBoxTree.hx:24: characters 13-54
			$knotTolU = (ArrayExtensions::last($a) - ArrayExtensions::first($a)) / 16;
		}
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:27: lines 27-29
		if ($knotTolV === null) {
			#src/verb/core/LazySurfaceBoundingBoxTree.hx:28: characters 25-48
			$a = $surface->knotsV;
			#src/verb/core/LazySurfaceBoundingBoxTree.hx:28: characters 13-54
			$knotTolV = (ArrayExtensions::last($a) - ArrayExtensions::first($a)) / 16;
		}
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:31: characters 9-29
		$this->_knotTolU = $knotTolU;
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:32: characters 9-29
		$this->_knotTolV = $knotTolV;
	}

	/**
	 * @return BoundingBox
	 */
	public function boundingBox () {
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:58: lines 58-63
		if ($this->_boundingBox === null) {
			#src/verb/core/LazySurfaceBoundingBoxTree.hx:59: characters 13-45
			$this->_boundingBox = new BoundingBox();
			#src/verb/core/LazySurfaceBoundingBoxTree.hx:60: lines 60-62
			$_g = 0;
			$_g1 = $this->_surface->controlPoints;
			while ($_g < $_g1->length) {
				#src/verb/core/LazySurfaceBoundingBoxTree.hx:60: characters 18-21
				$row = ($_g1->arr[$_g] ?? null);
				#src/verb/core/LazySurfaceBoundingBoxTree.hx:60: lines 60-62
				++$_g;
				#src/verb/core/LazySurfaceBoundingBoxTree.hx:61: characters 17-66
				$this->_boundingBox->addRange(Eval_hx::dehomogenize1d($row));
			}
		}
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:64: characters 9-28
		return $this->_boundingBox;
	}

	/**
	 * @return bool
	 */
	public function empty () {
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:76: characters 9-21
		return false;
	}

	/**
	 * @param float $tolerance
	 * 
	 * @return bool
	 */
	public function indivisible ($tolerance) {
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:72: characters 16-40
		$a = $this->_surface->knotsV;
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:72: characters 16-92
		if ((ArrayExtensions::last($a) - ArrayExtensions::first($a)) < $this->_knotTolV) {
			#src/verb/core/LazySurfaceBoundingBoxTree.hx:72: characters 56-80
			$a = $this->_surface->knotsU;
			#src/verb/core/LazySurfaceBoundingBoxTree.hx:72: characters 56-92
			return (ArrayExtensions::last($a) - ArrayExtensions::first($a)) < $this->_knotTolU;
		} else {
			#src/verb/core/LazySurfaceBoundingBoxTree.hx:72: characters 16-92
			return false;
		}
	}

	/**
	 * @return Pair
	 */
	public function split () {
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:36: characters 9-25
		$min = null;
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:37: characters 9-25
		$max = null;
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:39: lines 39-45
		if ($this->_splitV) {
			#src/verb/core/LazySurfaceBoundingBoxTree.hx:40: characters 13-42
			$min = ArrayExtensions::first($this->_surface->knotsV);
			#src/verb/core/LazySurfaceBoundingBoxTree.hx:41: characters 13-41
			$max = ArrayExtensions::last($this->_surface->knotsV);
		} else {
			#src/verb/core/LazySurfaceBoundingBoxTree.hx:43: characters 13-42
			$min = ArrayExtensions::first($this->_surface->knotsU);
			#src/verb/core/LazySurfaceBoundingBoxTree.hx:44: characters 13-41
			$max = ArrayExtensions::last($this->_surface->knotsU);
		}
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:47: characters 9-29
		$dom = $max - $min;
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:48: characters 9-39
		$pivot = ($min + $max) / 2.0;
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:50: characters 9-68
		$srfs = Divide::surfaceSplit($this->_surface, $pivot, $this->_splitV);
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:53: characters 13-86
		$tmp = new LazySurfaceBoundingBoxTree(($srfs->arr[0] ?? null), !$this->_splitV, $this->_knotTolU, $this->_knotTolV);
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:52: lines 52-54
		return new Pair($tmp, new LazySurfaceBoundingBoxTree(($srfs->arr[1] ?? null), !$this->_splitV, $this->_knotTolU, $this->_knotTolV));
	}

	/**
	 * @return NurbsSurfaceData
	 */
	public function yield () {
		#src/verb/core/LazySurfaceBoundingBoxTree.hx:68: characters 9-24
		return $this->_surface;
	}
}

Boot::registerClass(LazySurfaceBoundingBoxTree::class, 'verb.core.LazySurfaceBoundingBoxTree');
