<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace verb\core;

use \php\Boot;
use \verb\core\_Mat\LUDecomp;

class Mat {
	/**
	 * @param \Array_hx $A
	 * 
	 * @return LUDecomp
	 */
	public static function LU ($A) {
		#src/verb/core/Mat.hx:160: characters 9-28
		$abs = Boot::getStaticClosure(\Math::class, 'abs');
		#src/verb/core/Mat.hx:161: characters 9-46
		$i = null;
		$j = null;
		$absAjk = null;
		$Akk = null;
		$Ak = null;
		$Pk = null;
		$Ai = null;
		#src/verb/core/Mat.hx:162: characters 9-17
		$max = null;
		#src/verb/core/Mat.hx:164: characters 13-52
		$_g = new \Array_hx();
		#src/verb/core/Mat.hx:164: characters 25-29
		$_g1 = 0;
		#src/verb/core/Mat.hx:164: characters 29-37
		$_g2 = $A->length;
		#src/verb/core/Mat.hx:164: characters 15-50
		while ($_g1 < $_g2) {
			#src/verb/core/Mat.hx:164: characters 25-37
			$i1 = $_g1++;
			#src/verb/core/Mat.hx:164: characters 39-50
			$x = (clone ($A->arr[$i1] ?? null));
			$_g->arr[$_g->length++] = $x;
		}
		#src/verb/core/Mat.hx:164: characters 13-52
		$A = $_g;
		#src/verb/core/Mat.hx:165: characters 9-36
		$n = $A->length;
		$n1 = $n - 1;
		#src/verb/core/Mat.hx:166: characters 9-34
		$P = new \Array_hx();
		#src/verb/core/Mat.hx:161: characters 9-46
		$k = 0;
		#src/verb/core/Mat.hx:169: lines 169-214
		while ($k < $n) {
			#src/verb/core/Mat.hx:170: characters 13-19
			$Pk = $k;
			#src/verb/core/Mat.hx:171: characters 13-22
			$Ak = ($A->arr[$k] ?? null);
			#src/verb/core/Mat.hx:172: characters 13-34
			$max = \abs(($Ak->arr[$k] ?? null));
			#src/verb/core/Mat.hx:174: characters 13-20
			$j = $k + 1;
			#src/verb/core/Mat.hx:175: lines 175-182
			while ($j < $n) {
				#src/verb/core/Mat.hx:176: characters 17-43
				$absAjk = \abs((($A->arr[$j] ?? null)->arr[$k] ?? null));
				#src/verb/core/Mat.hx:177: lines 177-180
				if ($max < $absAjk) {
					#src/verb/core/Mat.hx:178: characters 21-33
					$max = $absAjk;
					#src/verb/core/Mat.hx:179: characters 21-27
					$Pk = $j;
				}
				#src/verb/core/Mat.hx:181: characters 17-20
				++$j;
			}
			#src/verb/core/Mat.hx:183: characters 13-22
			$P->offsetSet($k, $Pk);
			#src/verb/core/Mat.hx:185: lines 185-189
			if ($Pk !== $k) {
				#src/verb/core/Mat.hx:186: characters 17-29
				$A->offsetSet($k, ($A->arr[$Pk] ?? null));
				#src/verb/core/Mat.hx:187: characters 17-27
				$A->offsetSet($Pk, $Ak);
				#src/verb/core/Mat.hx:188: characters 17-26
				$Ak = ($A->arr[$k] ?? null);
			}
			#src/verb/core/Mat.hx:191: characters 13-24
			$Akk = ($Ak->arr[$k] ?? null);
			#src/verb/core/Mat.hx:193: characters 13-20
			$i = $k + 1;
			#src/verb/core/Mat.hx:194: lines 194-197
			while ($i < $n) {
				#src/verb/core/Mat.hx:195: characters 17-31
				$A[$i][$k] /= $Akk;
				#src/verb/core/Mat.hx:196: characters 17-20
				++$i;
			}
			#src/verb/core/Mat.hx:199: characters 13-20
			$i = $k + 1;
			#src/verb/core/Mat.hx:200: lines 200-211
			while ($i < $n) {
				#src/verb/core/Mat.hx:201: characters 17-26
				$Ai = ($A->arr[$i] ?? null);
				#src/verb/core/Mat.hx:202: characters 17-24
				$j = $k + 1;
				#src/verb/core/Mat.hx:203: lines 203-208
				while ($j < $n1) {
					#src/verb/core/Mat.hx:204: characters 21-43
					$Ai[$j] -= ($Ai->arr[$k] ?? null) * ($Ak->arr[$j] ?? null);
					#src/verb/core/Mat.hx:205: characters 21-24
					++$j;
					#src/verb/core/Mat.hx:206: characters 21-43
					$Ai[$j] -= ($Ai->arr[$k] ?? null) * ($Ak->arr[$j] ?? null);
					#src/verb/core/Mat.hx:207: characters 21-24
					++$j;
				}
				#src/verb/core/Mat.hx:209: characters 17-49
				if ($j === $n1) {
					#src/verb/core/Mat.hx:209: characters 27-49
					$Ai[$j] -= ($Ai->arr[$k] ?? null) * ($Ak->arr[$j] ?? null);
				}
				#src/verb/core/Mat.hx:210: characters 17-20
				++$i;
			}
			#src/verb/core/Mat.hx:213: characters 13-16
			++$k;
		}
		#src/verb/core/Mat.hx:216: characters 9-34
		return new LUDecomp($A, $P);
	}

	/**
	 * @param LUDecomp $LUP
	 * @param \Array_hx $b
	 * 
	 * @return \Array_hx
	 */
	public static function LUsolve ($LUP, $b) {
		#src/verb/core/Mat.hx:109: characters 9-18
		$j = null;
		#src/verb/core/Mat.hx:110: characters 9-25
		$LU = $LUP->LU;
		#src/verb/core/Mat.hx:111: characters 9-29
		$n = $LU->length;
		#src/verb/core/Mat.hx:112: characters 9-26
		$x = (clone $b);
		#src/verb/core/Mat.hx:113: characters 9-25
		$P = $LUP->P;
		#src/verb/core/Mat.hx:114: characters 9-32
		$Pi = null;
		$LUi = null;
		$LUii = null;
		$tmp = null;
		#src/verb/core/Mat.hx:109: characters 9-18
		$i = $n - 1;
		#src/verb/core/Mat.hx:117: lines 117-120
		while ($i !== -1) {
			#src/verb/core/Mat.hx:118: characters 13-24
			$x->offsetSet($i, ($b->arr[$i] ?? null));
			#src/verb/core/Mat.hx:119: characters 13-16
			--$i;
		}
		#src/verb/core/Mat.hx:122: characters 9-14
		$i = 0;
		#src/verb/core/Mat.hx:123: lines 123-138
		while ($i < $n) {
			#src/verb/core/Mat.hx:124: characters 13-22
			$Pi = ($P->arr[$i] ?? null);
			#src/verb/core/Mat.hx:125: lines 125-129
			if (($P->arr[$i] ?? null) !== $i) {
				#src/verb/core/Mat.hx:126: characters 17-27
				$tmp = ($x->arr[$i] ?? null);
				#src/verb/core/Mat.hx:127: characters 17-29
				$x->offsetSet($i, ($x->arr[$Pi] ?? null));
				#src/verb/core/Mat.hx:128: characters 17-28
				$x->offsetSet($Pi, $tmp);
			}
			#src/verb/core/Mat.hx:131: characters 13-24
			$LUi = ($LU->arr[$i] ?? null);
			#src/verb/core/Mat.hx:132: characters 13-18
			$j = 0;
			#src/verb/core/Mat.hx:133: lines 133-136
			while ($j < $i) {
				#src/verb/core/Mat.hx:134: characters 17-38
				$x[$i] -= ($x->arr[$j] ?? null) * ($LUi->arr[$j] ?? null);
				#src/verb/core/Mat.hx:135: characters 17-20
				++$j;
			}
			#src/verb/core/Mat.hx:137: characters 13-16
			++$i;
		}
		#src/verb/core/Mat.hx:140: characters 9-16
		$i = $n - 1;
		#src/verb/core/Mat.hx:141: lines 141-151
		while ($i >= 0) {
			#src/verb/core/Mat.hx:142: characters 13-24
			$LUi = ($LU->arr[$i] ?? null);
			#src/verb/core/Mat.hx:143: characters 13-20
			$j = $i + 1;
			#src/verb/core/Mat.hx:144: lines 144-147
			while ($j < $n) {
				#src/verb/core/Mat.hx:145: characters 17-38
				$x[$i] -= ($x->arr[$j] ?? null) * ($LUi->arr[$j] ?? null);
				#src/verb/core/Mat.hx:146: characters 17-20
				++$j;
			}
			#src/verb/core/Mat.hx:149: characters 13-27
			$x[$i] /= ($LUi->arr[$i] ?? null);
			#src/verb/core/Mat.hx:150: characters 13-16
			--$i;
		}
		#src/verb/core/Mat.hx:153: characters 9-17
		return $x;
	}

	/**
	 * @param \Array_hx $a
	 * @param \Array_hx $b
	 * 
	 * @return \Array_hx
	 */
	public static function add ($a, $b) {
		#src/verb/core/Mat.hx:59: characters 16-63
		$_g = new \Array_hx();
		#src/verb/core/Mat.hx:59: characters 28-32
		$_g1 = 0;
		#src/verb/core/Mat.hx:59: characters 32-40
		$_g2 = $a->length;
		#src/verb/core/Mat.hx:59: characters 18-61
		while ($_g1 < $_g2) {
			#src/verb/core/Mat.hx:59: characters 28-40
			$i = $_g1++;
			#src/verb/core/Mat.hx:59: characters 42-61
			$x = Vec::add(($a->arr[$i] ?? null), ($b->arr[$i] ?? null));
			$_g->arr[$_g->length++] = $x;
		}
		#src/verb/core/Mat.hx:59: characters 16-63
		return $_g;
	}

	/**
	 * @param \Array_hx $a
	 * @param float $b
	 * 
	 * @return \Array_hx
	 */
	public static function div ($a, $b) {
		#src/verb/core/Mat.hx:65: characters 16-60
		$_g = new \Array_hx();
		#src/verb/core/Mat.hx:65: characters 28-32
		$_g1 = 0;
		#src/verb/core/Mat.hx:65: characters 32-40
		$_g2 = $a->length;
		#src/verb/core/Mat.hx:65: characters 18-58
		while ($_g1 < $_g2) {
			#src/verb/core/Mat.hx:65: characters 28-40
			$i = $_g1++;
			#src/verb/core/Mat.hx:65: characters 42-58
			$x = Vec::div(($a->arr[$i] ?? null), $b);
			$_g->arr[$_g->length++] = $x;
		}
		#src/verb/core/Mat.hx:65: characters 16-60
		return $_g;
	}

	/**
	 * @param \Array_hx $a
	 * @param \Array_hx $b
	 * 
	 * @return \Array_hx
	 */
	public static function dot ($a, $b) {
		#src/verb/core/Mat.hx:77: characters 16-60
		$_g = new \Array_hx();
		#src/verb/core/Mat.hx:77: characters 28-32
		$_g1 = 0;
		#src/verb/core/Mat.hx:77: characters 32-40
		$_g2 = $a->length;
		#src/verb/core/Mat.hx:77: characters 18-58
		while ($_g1 < $_g2) {
			#src/verb/core/Mat.hx:77: characters 28-40
			$i = $_g1++;
			#src/verb/core/Mat.hx:77: characters 42-58
			$x = Vec::dot(($a->arr[$i] ?? null), $b);
			$_g->arr[$_g->length++] = $x;
		}
		#src/verb/core/Mat.hx:77: characters 16-60
		return $_g;
	}

	/**
	 * @param int $n
	 * 
	 * @return \Array_hx
	 */
	public static function identity ($n) {
		#src/verb/core/Mat.hx:83: characters 9-39
		$zeros = Vec::zeros2d($n, $n);
		#src/verb/core/Mat.hx:84: characters 19-23
		$_g = 0;
		#src/verb/core/Mat.hx:84: characters 23-24
		$_g1 = $n;
		#src/verb/core/Mat.hx:84: characters 9-47
		while ($_g < $_g1) {
			#src/verb/core/Mat.hx:84: characters 19-24
			$i = $_g++;
			#src/verb/core/Mat.hx:84: characters 27-44
			($zeros->arr[$i] ?? null)->offsetSet($i, 1.0);
		}
		#src/verb/core/Mat.hx:85: characters 9-21
		return $zeros;
	}

	/**
	 * @param float $a
	 * @param \Array_hx $b
	 * 
	 * @return \Array_hx
	 */
	public static function mul ($a, $b) {
		#src/verb/core/Mat.hx:14: characters 16-60
		$_g = new \Array_hx();
		#src/verb/core/Mat.hx:14: characters 28-32
		$_g1 = 0;
		#src/verb/core/Mat.hx:14: characters 32-40
		$_g2 = $b->length;
		#src/verb/core/Mat.hx:14: characters 18-58
		while ($_g1 < $_g2) {
			#src/verb/core/Mat.hx:14: characters 28-40
			$i = $_g1++;
			#src/verb/core/Mat.hx:14: characters 42-58
			$x = Vec::mul($a, ($b->arr[$i] ?? null));
			$_g->arr[$_g->length++] = $x;
		}
		#src/verb/core/Mat.hx:14: characters 16-60
		return $_g;
	}

	/**
	 * @param \Array_hx $x
	 * @param \Array_hx $y
	 * 
	 * @return \Array_hx
	 */
	public static function mult ($x, $y) {
		#src/verb/core/Mat.hx:23: characters 9-47
		$foo = null;
		$bar = null;
		$woo = null;
		$i0 = null;
		$k0 = null;
		$p0 = null;
		$r0 = null;
		$p = $x->length;
		$q = $y->length;
		$r = ($y->arr[0] ?? null)->length;
		$ret = new \Array_hx();
		#src/verb/core/Mat.hx:28: characters 9-21
		$i = $p - 1;
		#src/verb/core/Mat.hx:29: characters 9-19
		$j = 0;
		#src/verb/core/Mat.hx:30: characters 9-19
		$k = 0;
		#src/verb/core/Mat.hx:32: lines 32-52
		while ($i >= 0) {
			#src/verb/core/Mat.hx:33: characters 13-31
			$foo = new \Array_hx();
			#src/verb/core/Mat.hx:34: characters 13-23
			$bar = ($x->arr[$i] ?? null);
			#src/verb/core/Mat.hx:36: characters 13-20
			$k = $r - 1;
			#src/verb/core/Mat.hx:37: lines 37-49
			while ($k >= 0) {
				#src/verb/core/Mat.hx:38: characters 17-41
				$woo = ($bar->arr[$q - 1] ?? null) * (($y->arr[$q - 1] ?? null)->arr[$k] ?? null);
				#src/verb/core/Mat.hx:40: characters 17-24
				$j = $q - 2;
				#src/verb/core/Mat.hx:41: lines 41-45
				while ($j >= 1) {
					#src/verb/core/Mat.hx:42: characters 21-29
					$i0 = $j - 1;
					#src/verb/core/Mat.hx:43: characters 21-61
					$woo += ($bar->arr[$j] ?? null) * (($y->arr[$j] ?? null)->arr[$k] ?? null) + ($bar->arr[$i0] ?? null) * (($y->arr[$i0] ?? null)->arr[$k] ?? null);
					#src/verb/core/Mat.hx:44: characters 21-27
					$j -= 2;
				}
				#src/verb/core/Mat.hx:46: characters 17-52
				if ($j === 0) {
					#src/verb/core/Mat.hx:46: characters 28-49
					$woo += ($bar->arr[0] ?? null) * (($y->arr[0] ?? null)->arr[$k] ?? null);
				}
				#src/verb/core/Mat.hx:47: characters 17-29
				$foo->offsetSet($k, $woo);
				#src/verb/core/Mat.hx:48: characters 17-20
				--$k;
			}
			#src/verb/core/Mat.hx:50: characters 13-25
			$ret->offsetSet($i, $foo);
			#src/verb/core/Mat.hx:51: characters 13-16
			--$i;
		}
		#src/verb/core/Mat.hx:53: characters 9-19
		return $ret;
	}

	/**
	 * @param \Array_hx $A
	 * @param \Array_hx $b
	 * 
	 * @return \Array_hx
	 */
	public static function solve ($A, $b) {
		#src/verb/core/Mat.hx:103: characters 9-35
		return Mat::LUsolve(Mat::LU($A), $b);
	}

	/**
	 * @param \Array_hx $a
	 * @param \Array_hx $b
	 * 
	 * @return \Array_hx
	 */
	public static function sub ($a, $b) {
		#src/verb/core/Mat.hx:71: characters 16-63
		$_g = new \Array_hx();
		#src/verb/core/Mat.hx:71: characters 28-32
		$_g1 = 0;
		#src/verb/core/Mat.hx:71: characters 32-40
		$_g2 = $a->length;
		#src/verb/core/Mat.hx:71: characters 18-61
		while ($_g1 < $_g2) {
			#src/verb/core/Mat.hx:71: characters 28-40
			$i = $_g1++;
			#src/verb/core/Mat.hx:71: characters 42-61
			$x = Vec::sub(($a->arr[$i] ?? null), ($b->arr[$i] ?? null));
			$_g->arr[$_g->length++] = $x;
		}
		#src/verb/core/Mat.hx:71: characters 16-63
		return $_g;
	}

	/**
	 * @param \Array_hx $a
	 * 
	 * @return \Array_hx
	 */
	public static function transpose ($a) {
		#src/verb/core/Mat.hx:91: characters 9-37
		if ($a->length === 0) {
			#src/verb/core/Mat.hx:91: characters 28-37
			return new \Array_hx();
		}
		#src/verb/core/Mat.hx:92: characters 16-82
		$_g = new \Array_hx();
		#src/verb/core/Mat.hx:92: characters 28-32
		$_g1 = 0;
		#src/verb/core/Mat.hx:92: characters 32-43
		$_g2 = ($a->arr[0] ?? null)->length;
		#src/verb/core/Mat.hx:92: characters 18-79
		while ($_g1 < $_g2) {
			#src/verb/core/Mat.hx:92: characters 28-43
			$i = $_g1++;
			#src/verb/core/Mat.hx:92: characters 45-79
			$_g3 = new \Array_hx();
			#src/verb/core/Mat.hx:92: characters 56-60
			$_g4 = 0;
			#src/verb/core/Mat.hx:92: characters 60-68
			$_g5 = $a->length;
			#src/verb/core/Mat.hx:92: characters 46-77
			while ($_g4 < $_g5) {
				#src/verb/core/Mat.hx:92: characters 56-68
				$j = $_g4++;
				#src/verb/core/Mat.hx:92: characters 70-77
				$a1 = (($a->arr[$j] ?? null)->arr[$i] ?? null);
				$_g3->arr[$_g3->length++] = $a1;
			}
			#src/verb/core/Mat.hx:92: characters 45-79
			$_g->arr[$_g->length++] = $_g3;
		}
		#src/verb/core/Mat.hx:92: characters 16-82
		return $_g;
	}

	/**
	 * @param \Array_hx $a
	 * 
	 * @return \Array_hx
	 */
	public static function transposeN ($a) {
		#src/verb/core/Mat.hx:96: characters 9-37
		if ($a->length === 0) {
			#src/verb/core/Mat.hx:96: characters 28-37
			return new \Array_hx();
		}
		#src/verb/core/Mat.hx:97: characters 16-82
		$_g = new \Array_hx();
		#src/verb/core/Mat.hx:97: characters 28-32
		$_g1 = 0;
		#src/verb/core/Mat.hx:97: characters 32-43
		$_g2 = ($a->arr[0] ?? null)->length;
		#src/verb/core/Mat.hx:97: characters 18-79
		while ($_g1 < $_g2) {
			#src/verb/core/Mat.hx:97: characters 28-43
			$i = $_g1++;
			#src/verb/core/Mat.hx:97: characters 45-79
			$_g3 = new \Array_hx();
			#src/verb/core/Mat.hx:97: characters 56-60
			$_g4 = 0;
			#src/verb/core/Mat.hx:97: characters 60-68
			$_g5 = $a->length;
			#src/verb/core/Mat.hx:97: characters 46-77
			while ($_g4 < $_g5) {
				#src/verb/core/Mat.hx:97: characters 56-68
				$j = $_g4++;
				#src/verb/core/Mat.hx:97: characters 70-77
				$a1 = (($a->arr[$j] ?? null)->arr[$i] ?? null);
				$_g3->arr[$_g3->length++] = $a1;
			}
			#src/verb/core/Mat.hx:97: characters 45-79
			$_g->arr[$_g->length++] = $_g3;
		}
		#src/verb/core/Mat.hx:97: characters 16-82
		return $_g;
	}
}

Boot::registerClass(Mat::class, 'verb.core.Mat');
