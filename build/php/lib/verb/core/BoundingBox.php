<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace verb\core;

use \php\Boot;

class BoundingBox {
	/**
	 * @var int
	 */
	public $dim;
	/**
	 * @var bool
	 */
	public $initialized;
	/**
	 * @var \Array_hx
	 */
	public $max;
	/**
	 * @var \Array_hx
	 */
	public $min;

	/**
	 * @param float $a1
	 * @param float $a2
	 * @param float $b1
	 * @param float $b2
	 * @param float $tol
	 * 
	 * @return bool
	 */
	public static function intervalsOverlap ($a1, $a2, $b1, $b2, $tol = -1) {
		#src/verb/core/BoundingBox.hx:137: lines 137-146
		if ($tol === null) {
			$tol = -1;
		}
		#src/verb/core/BoundingBox.hx:139: lines 139-143
		$tol1 = ($tol < -0.5 ? Constants::$TOLERANCE : $tol);
		$x1 = ((\is_nan($a1) || \is_nan($a2) ? \Math::$NaN : \min($a1, $a2))) - $tol1;
		$x2 = ((\is_nan($a1) || \is_nan($a2) ? \Math::$NaN : \max($a1, $a2))) + $tol1;
		$y1 = ((\is_nan($b1) || \is_nan($b2) ? \Math::$NaN : \min($b1, $b2))) - $tol1;
		$y2 = ((\is_nan($b1) || \is_nan($b2) ? \Math::$NaN : \max($b1, $b2))) + $tol1;
		#src/verb/core/BoundingBox.hx:145: characters 16-116
		if (!((($x1 >= $y1) && ($x1 <= $y2)) || (($x2 >= $y1) && ($x2 <= $y2)) || (($y1 >= $x1) && ($y1 <= $x2)))) {
			#src/verb/core/BoundingBox.hx:145: characters 94-116
			if ($y2 >= $x1) {
				#src/verb/core/BoundingBox.hx:145: characters 107-115
				return $y2 <= $x2;
			} else {
				#src/verb/core/BoundingBox.hx:145: characters 94-116
				return false;
			}
		} else {
			#src/verb/core/BoundingBox.hx:145: characters 16-116
			return true;
		}
	}

	/**
	 * @param \Array_hx $pts
	 * 
	 * @return void
	 */
	public function __construct ($pts = null) {
		#src/verb/core/BoundingBox.hx:34: characters 30-34
		$this->max = null;
		#src/verb/core/BoundingBox.hx:31: characters 30-34
		$this->min = null;
		#src/verb/core/BoundingBox.hx:16: characters 21-22
		$this->dim = 3;
		#src/verb/core/BoundingBox.hx:15: characters 30-35
		$this->initialized = false;
		#src/verb/core/BoundingBox.hx:25: lines 25-27
		if ($pts !== null) {
			#src/verb/core/BoundingBox.hx:26: characters 13-33
			$this->addRange($pts);
		}
	}

	/**
	 * @param \Array_hx $point
	 * 
	 * @return BoundingBox
	 */
	public function add ($point) {
		#src/verb/core/BoundingBox.hx:63: lines 63-71
		if (!$this->initialized) {
			#src/verb/core/BoundingBox.hx:65: characters 13-36
			$this->dim = $point->length;
			#src/verb/core/BoundingBox.hx:66: characters 13-38
			$this->min = $point->slice(0);
			#src/verb/core/BoundingBox.hx:67: characters 13-38
			$this->max = $point->slice(0);
			#src/verb/core/BoundingBox.hx:68: characters 13-36
			$this->initialized = true;
			#src/verb/core/BoundingBox.hx:70: characters 13-24
			return $this;
		}
		#src/verb/core/BoundingBox.hx:73: characters 19-23
		$_g = 0;
		#src/verb/core/BoundingBox.hx:73: characters 23-31
		$_g1 = $this->dim;
		#src/verb/core/BoundingBox.hx:73: lines 73-76
		while ($_g < $_g1) {
			#src/verb/core/BoundingBox.hx:73: characters 19-31
			$i = $_g++;
			#src/verb/core/BoundingBox.hx:74: characters 13-64
			if (($point->arr[$i] ?? null) > ($this->max->arr[$i] ?? null)) {
				#src/verb/core/BoundingBox.hx:74: characters 42-64
				$this->max->offsetSet($i, ($point->arr[$i] ?? null));
			}
			#src/verb/core/BoundingBox.hx:75: characters 13-64
			if (($point->arr[$i] ?? null) < ($this->min->arr[$i] ?? null)) {
				#src/verb/core/BoundingBox.hx:75: characters 42-64
				$this->min->offsetSet($i, ($point->arr[$i] ?? null));
			}
		}
		#src/verb/core/BoundingBox.hx:78: characters 9-20
		return $this;
	}

	/**
	 * @param \Array_hx $points
	 * 
	 * @return BoundingBox
	 */
	public function addRange ($points) {
		#src/verb/core/BoundingBox.hx:94: characters 9-31
		$l = $points->length;
		#src/verb/core/BoundingBox.hx:96: characters 19-23
		$_g = 0;
		#src/verb/core/BoundingBox.hx:96: characters 23-24
		$_g1 = $l;
		#src/verb/core/BoundingBox.hx:96: lines 96-98
		while ($_g < $_g1) {
			#src/verb/core/BoundingBox.hx:96: characters 19-24
			$i = $_g++;
			#src/verb/core/BoundingBox.hx:97: characters 13-32
			$this->add(($points->arr[$i] ?? null));
		}
		#src/verb/core/BoundingBox.hx:100: characters 9-20
		return $this;
	}

	/**
	 * @return BoundingBox
	 */
	public function clear () {
		#src/verb/core/BoundingBox.hx:182: characters 9-33
		$this->initialized = false;
		#src/verb/core/BoundingBox.hx:183: characters 9-20
		return $this;
	}

	/**
	 * @param \Array_hx $point
	 * @param float $tol
	 * 
	 * @return bool
	 */
	public function contains ($point, $tol = -1) {
		#src/verb/core/BoundingBox.hx:114: lines 114-122
		if ($tol === null) {
			$tol = -1;
		}
		#src/verb/core/BoundingBox.hx:116: lines 116-119
		if (!$this->initialized) {
			#src/verb/core/BoundingBox.hx:118: characters 13-25
			return false;
		}
		#src/verb/core/BoundingBox.hx:121: characters 9-64
		return $this->intersects(new BoundingBox(\Array_hx::wrap([$point])), $tol);
	}

	/**
	 * @param \Array_hx $pt
	 * 
	 * @return BoundingBox
	 */
	public function fromPoint ($pt) {
		#src/verb/core/BoundingBox.hx:47: characters 9-41
		return new BoundingBox(\Array_hx::wrap([$pt]));
	}

	/**
	 * @param int $i
	 * 
	 * @return float
	 */
	public function getAxisLength ($i) {
		#src/verb/core/BoundingBox.hx:219: characters 9-48
		if (($i < 0) || ($i > ($this->dim - 1))) {
			#src/verb/core/BoundingBox.hx:219: characters 38-48
			return 0.0;
		}
		#src/verb/core/BoundingBox.hx:220: characters 16-53
		return \abs(($this->min->arr[$i] ?? null) - ($this->max->arr[$i] ?? null));
	}

	/**
	 * @return int
	 */
	public function getLongestAxis () {
		#src/verb/core/BoundingBox.hx:194: characters 9-23
		$max = 0.0;
		#src/verb/core/BoundingBox.hx:195: characters 9-20
		$id = 0;
		#src/verb/core/BoundingBox.hx:197: characters 20-24
		$_g = 0;
		#src/verb/core/BoundingBox.hx:197: characters 24-27
		$_g1 = $this->dim;
		#src/verb/core/BoundingBox.hx:197: lines 197-203
		while ($_g < $_g1) {
			#src/verb/core/BoundingBox.hx:197: characters 20-27
			$i = $_g++;
			#src/verb/core/BoundingBox.hx:198: characters 13-43
			$l = $this->getAxisLength($i);
			#src/verb/core/BoundingBox.hx:199: lines 199-202
			if ($l > $max) {
				#src/verb/core/BoundingBox.hx:200: characters 17-24
				$max = $l;
				#src/verb/core/BoundingBox.hx:201: characters 17-23
				$id = $i;
			}
		}
		#src/verb/core/BoundingBox.hx:205: characters 9-18
		return $id;
	}

	/**
	 * @param BoundingBox $bb
	 * @param float $tol
	 * 
	 * @return BoundingBox
	 */
	public function intersect ($bb, $tol) {
		#src/verb/core/BoundingBox.hx:236: characters 9-45
		if (!$this->initialized) {
			#src/verb/core/BoundingBox.hx:236: characters 34-45
			return null;
		}
		#src/verb/core/BoundingBox.hx:238: lines 238-241
		$a1 = $this->min;
		$a2 = $this->max;
		$b1 = $bb->min;
		$b2 = $bb->max;
		#src/verb/core/BoundingBox.hx:243: characters 9-55
		if (!$this->intersects($bb, $tol)) {
			#src/verb/core/BoundingBox.hx:243: characters 44-55
			return null;
		}
		#src/verb/core/BoundingBox.hx:245: lines 245-246
		$maxbb = new \Array_hx();
		$minbb = new \Array_hx();
		#src/verb/core/BoundingBox.hx:248: characters 19-23
		$_g = 0;
		#src/verb/core/BoundingBox.hx:248: characters 23-26
		$_g1 = $this->dim;
		#src/verb/core/BoundingBox.hx:248: lines 248-251
		while ($_g < $_g1) {
			#src/verb/core/BoundingBox.hx:248: characters 19-26
			$i = $_g++;
			#src/verb/core/BoundingBox.hx:249: characters 25-49
			$a = ($a2->arr[$i] ?? null);
			$b = ($b2->arr[$i] ?? null);
			#src/verb/core/BoundingBox.hx:249: characters 13-51
			$x = (\is_nan($a) || \is_nan($b) ? \Math::$NaN : \min($a, $b));
			$maxbb->arr[$maxbb->length++] = $x;
			#src/verb/core/BoundingBox.hx:250: characters 25-49
			$a3 = ($a1->arr[$i] ?? null);
			$b3 = ($b1->arr[$i] ?? null);
			#src/verb/core/BoundingBox.hx:250: characters 13-51
			$x1 = (\is_nan($a3) || \is_nan($b3) ? \Math::$NaN : \max($a3, $b3));
			$minbb->arr[$minbb->length++] = $x1;
		}
		#src/verb/core/BoundingBox.hx:253: characters 9-47
		return new BoundingBox(\Array_hx::wrap([
			$minbb,
			$maxbb,
		]));
	}

	/**
	 * @param BoundingBox $bb
	 * @param float $tol
	 * 
	 * @return bool
	 */
	public function intersects ($bb, $tol = -1) {
		#src/verb/core/BoundingBox.hx:158: lines 158-172
		if ($tol === null) {
			$tol = -1;
		}
		#src/verb/core/BoundingBox.hx:160: characters 9-65
		if (!$this->initialized || !$bb->initialized) {
			#src/verb/core/BoundingBox.hx:160: characters 53-65
			return false;
		}
		#src/verb/core/BoundingBox.hx:162: lines 162-165
		$a1 = $this->min;
		$a2 = $this->max;
		$b1 = $bb->min;
		$b2 = $bb->max;
		#src/verb/core/BoundingBox.hx:167: characters 19-23
		$_g = 0;
		#src/verb/core/BoundingBox.hx:167: characters 23-26
		$_g1 = $this->dim;
		#src/verb/core/BoundingBox.hx:167: lines 167-169
		while ($_g < $_g1) {
			#src/verb/core/BoundingBox.hx:167: characters 19-26
			$i = $_g++;
			#src/verb/core/BoundingBox.hx:168: characters 13-82
			if (!BoundingBox::intervalsOverlap(($a1->arr[$i] ?? null), ($a2->arr[$i] ?? null), ($b1->arr[$i] ?? null), ($b2->arr[$i] ?? null), $tol)) {
				#src/verb/core/BoundingBox.hx:168: characters 70-82
				return false;
			}
		}
		#src/verb/core/BoundingBox.hx:171: characters 9-20
		return true;
	}
}

Boot::registerClass(BoundingBox::class, 'verb.core.BoundingBox');
