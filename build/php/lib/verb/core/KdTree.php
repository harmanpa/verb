<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace verb\core;

use \php\Boot;

class KdTree {
	/**
	 * @var int
	 */
	public $dim;
	/**
	 * @var \Closure
	 */
	public $distanceFunction;
	/**
	 * @var \Array_hx
	 */
	public $points;
	/**
	 * @var KdNode
	 */
	public $root;

	/**
	 * @param \Array_hx $points
	 * @param \Closure $distanceFunction
	 * 
	 * @return void
	 */
	public function __construct ($points, $distanceFunction) {
		#src/verb/core/KdTree.hx:21: characters 29-30
		$this->dim = 3;
		#src/verb/core/KdTree.hx:25: characters 9-29
		$this->points = $points;
		#src/verb/core/KdTree.hx:26: characters 9-49
		$this->distanceFunction = $distanceFunction;
		#src/verb/core/KdTree.hx:27: characters 9-42
		$this->dim = ($points->arr[0] ?? null)->point->length;
		#src/verb/core/KdTree.hx:29: characters 9-47
		$this->root = $this->buildTree($points, 0, null);
	}

	/**
	 * @param \Array_hx $points
	 * @param int $depth
	 * @param KdNode $parent
	 * 
	 * @return KdNode
	 */
	public function buildTree ($points, $depth, $parent) {
		#src/verb/core/KdTree.hx:33: lines 33-35
		$dim = $depth % $this->dim;
		#src/verb/core/KdTree.hx:37: characters 9-44
		if ($points->length === 0) {
			#src/verb/core/KdTree.hx:37: characters 33-44
			return null;
		}
		#src/verb/core/KdTree.hx:38: characters 9-77
		if ($points->length === 1) {
			#src/verb/core/KdTree.hx:38: characters 33-77
			return new KdNode(($points->arr[0] ?? null), $dim, $parent);
		}
		#src/verb/core/KdTree.hx:40: lines 40-49
		\usort($points->arr, function ($a, $b) use (&$dim) {
			#src/verb/core/KdTree.hx:41: characters 13-52
			$diff = ($a->point->arr[$dim] ?? null) - ($b->point->arr[$dim] ?? null);
			#src/verb/core/KdTree.hx:42: lines 42-48
			if (Boot::equal($diff, 0.0)) {
				#src/verb/core/KdTree.hx:43: characters 17-25
				return 0;
			} else if ($diff > 0) {
				#src/verb/core/KdTree.hx:45: characters 17-25
				return 1;
			} else {
				#src/verb/core/KdTree.hx:47: characters 17-26
				return -1;
			}
		});
		#src/verb/core/KdTree.hx:33: lines 33-35
		$median = (int)(\floor($points->length / 2));
		$node = new KdNode(($points->arr[$median] ?? null), $dim, $parent);
		#src/verb/core/KdTree.hx:55: characters 9-73
		$node->left = $this->buildTree($points->slice(0, $median), $depth + 1, $node);
		#src/verb/core/KdTree.hx:56: characters 9-75
		$node->right = $this->buildTree($points->slice($median + 1), $depth + 1, $node);
		#src/verb/core/KdTree.hx:58: characters 9-20
		return $node;
	}

	/**
	 * @param \Array_hx $point
	 * @param int $maxNodes
	 * @param float $maxDistance
	 * 
	 * @return \Array_hx
	 */
	public function nearest ($point, $maxNodes, $maxDistance) {
		#src/verb/core/KdTree.hx:61: lines 61-146
		$_gthis = $this;
		#src/verb/core/KdTree.hx:63: lines 63-65
		$bestNodes = new BinaryHeap(function ($e) {
			#src/verb/core/KdTree.hx:64: characters 53-68
			return -$e->value;
		});
		#src/verb/core/KdTree.hx:67: lines 67-129
		$nearestSearch = null;
		$nearestSearch = function ($node) use (&$bestNodes, &$nearestSearch, &$point, &$_gthis, &$maxNodes) {
			#src/verb/core/KdTree.hx:69: lines 69-75
			$bestChild = null;
			$dimension = $node->dimension;
			$ownDistance = ($_gthis->distanceFunction)($point, $node->kdPoint->point);
			#src/verb/core/KdTree.hx:72: characters 31-55
			$_g = new \Array_hx();
			#src/verb/core/KdTree.hx:72: characters 42-46
			$_g1 = 0;
			#src/verb/core/KdTree.hx:72: characters 46-49
			$_g2 = $_gthis->dim;
			#src/verb/core/KdTree.hx:72: characters 32-54
			while ($_g1 < $_g2) {
				#src/verb/core/KdTree.hx:72: characters 42-49
				$i = $_g1++;
				#src/verb/core/KdTree.hx:72: characters 51-54
				$_g->arr[$_g->length++] = 0.0;
			}
			#src/verb/core/KdTree.hx:69: lines 69-75
			$linearPoint = $_g;
			$otherChild = null;
			$i = null;
			#src/verb/core/KdTree.hx:77: lines 77-82
			$saveNode = function ($node, $distance) use (&$bestNodes, &$maxNodes) {
				#src/verb/core/KdTree.hx:78: characters 17-75
				$bestNodes->push(new HeapElement($node, $distance));
				#src/verb/core/KdTree.hx:79: lines 79-81
				if ($bestNodes->size() > $maxNodes) {
					#src/verb/core/KdTree.hx:80: characters 21-36
					$bestNodes->pop();
				}
			};
			#src/verb/core/KdTree.hx:84: characters 23-27
			$_g = 0;
			#src/verb/core/KdTree.hx:84: characters 27-30
			$_g1 = $_gthis->dim;
			#src/verb/core/KdTree.hx:84: lines 84-90
			while ($_g < $_g1) {
				#src/verb/core/KdTree.hx:84: characters 23-30
				$i = $_g++;
				#src/verb/core/KdTree.hx:85: lines 85-89
				if ($i === $node->dimension) {
					#src/verb/core/KdTree.hx:86: characters 21-46
					$linearPoint->offsetSet($i, ($point->arr[$i] ?? null));
				} else {
					#src/verb/core/KdTree.hx:88: characters 21-59
					$linearPoint->offsetSet($i, ($node->kdPoint->point->arr[$i] ?? null));
				}
			}
			#src/verb/core/KdTree.hx:69: lines 69-75
			$linearDistance = ($_gthis->distanceFunction)($linearPoint, $node->kdPoint->point);
			#src/verb/core/KdTree.hx:94: lines 94-99
			if (($node->right === null) && ($node->left === null)) {
				#src/verb/core/KdTree.hx:95: lines 95-97
				if (($bestNodes->size() < $maxNodes) || ($ownDistance < $bestNodes->peek()->value)) {
					#src/verb/core/KdTree.hx:96: characters 21-48
					$saveNode($node, $ownDistance);
				}
				#src/verb/core/KdTree.hx:98: characters 17-23
				return;
			}
			#src/verb/core/KdTree.hx:101: lines 101-111
			if ($node->right === null) {
				#src/verb/core/KdTree.hx:102: characters 17-38
				$bestChild = $node->left;
			} else if ($node->left === null) {
				#src/verb/core/KdTree.hx:104: characters 17-39
				$bestChild = $node->right;
			} else if (($point->arr[$dimension] ?? null) < ($node->kdPoint->point->arr[$dimension] ?? null)) {
				#src/verb/core/KdTree.hx:107: characters 21-42
				$bestChild = $node->left;
			} else {
				#src/verb/core/KdTree.hx:109: characters 21-43
				$bestChild = $node->right;
			}
			#src/verb/core/KdTree.hx:113: characters 13-39
			$nearestSearch($bestChild);
			#src/verb/core/KdTree.hx:115: lines 115-117
			if (($bestNodes->size() < $maxNodes) || ($ownDistance < $bestNodes->peek()->value)) {
				#src/verb/core/KdTree.hx:116: characters 17-44
				$saveNode($node, $ownDistance);
			}
			#src/verb/core/KdTree.hx:119: lines 119-128
			if (($bestNodes->size() < $maxNodes) || (\abs($linearDistance) < $bestNodes->peek()->value)) {
				#src/verb/core/KdTree.hx:120: lines 120-124
				if ($bestChild === $node->left) {
					#src/verb/core/KdTree.hx:121: characters 21-44
					$otherChild = $node->right;
				} else {
					#src/verb/core/KdTree.hx:123: characters 21-43
					$otherChild = $node->left;
				}
				#src/verb/core/KdTree.hx:125: lines 125-127
				if ($otherChild !== null) {
					#src/verb/core/KdTree.hx:126: characters 21-46
					$nearestSearch($otherChild);
				}
			}
		};
		#src/verb/core/KdTree.hx:131: characters 19-23
		$_g = 0;
		#src/verb/core/KdTree.hx:131: characters 23-31
		$_g1 = $maxNodes;
		#src/verb/core/KdTree.hx:131: lines 131-133
		while ($_g < $_g1) {
			#src/verb/core/KdTree.hx:131: characters 19-31
			$i = $_g++;
			#src/verb/core/KdTree.hx:132: characters 13-74
			$bestNodes->push(new HeapElement(null, $maxDistance));
		}
		#src/verb/core/KdTree.hx:135: characters 9-35
		$nearestSearch($this->root);
		#src/verb/core/KdTree.hx:137: characters 9-91
		$result = new \Array_hx();
		#src/verb/core/KdTree.hx:139: characters 19-23
		$_g = 0;
		#src/verb/core/KdTree.hx:139: characters 23-31
		$_g1 = $maxNodes;
		#src/verb/core/KdTree.hx:139: lines 139-143
		while ($_g < $_g1) {
			#src/verb/core/KdTree.hx:139: characters 19-31
			$i = $_g++;
			#src/verb/core/KdTree.hx:140: lines 140-142
			if (($bestNodes->content->arr[$i] ?? null)->obj !== null) {
				#src/verb/core/KdTree.hx:141: characters 17-119
				$x = new HeapElement(($bestNodes->content->arr[$i] ?? null)->obj->kdPoint, ($bestNodes->content->arr[$i] ?? null)->value);
				$result->arr[$result->length++] = $x;
			}
		}
		#src/verb/core/KdTree.hx:145: characters 9-22
		return $result;
	}
}

Boot::registerClass(KdTree::class, 'verb.core.KdTree');
