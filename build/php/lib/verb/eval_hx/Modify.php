<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace verb\eval_hx;

use \verb\core\NurbsSurfaceData;
use \php\Boot;
use \verb\core\Constants;
use \verb\core\Mat;
use \verb\core\Interval;
use \verb\core\Binomial;
use \verb\core\Vec;
use \verb\core\NurbsCurveData;
use \verb\core\ArrayExtensions;

class Modify {
	/**
	 * @param NurbsCurveData $curve
	 * @param int $finalDegree
	 * 
	 * @return NurbsCurveData
	 */
	public static function curveElevateDegree ($curve, $finalDegree) {
		#src/verb/eval/Modify.hx:163: characters 9-54
		if ($finalDegree <= $curve->degree) {
			#src/verb/eval/Modify.hx:163: characters 42-54
			return $curve;
		}
		#src/verb/eval/Modify.hx:166: characters 9-55
		$n = $curve->knots->length - $curve->degree - 2;
		#src/verb/eval/Modify.hx:167: characters 9-38
		$newDegree = $curve->degree;
		#src/verb/eval/Modify.hx:168: characters 9-33
		$knots = $curve->knots;
		#src/verb/eval/Modify.hx:169: characters 9-49
		$controlPoints = $curve->controlPoints;
		#src/verb/eval/Modify.hx:170: characters 9-52
		$degreeInc = $finalDegree - $curve->degree;
		#src/verb/eval/Modify.hx:172: characters 9-49
		$dim = ($curve->controlPoints->arr[0] ?? null)->length;
		#src/verb/eval/Modify.hx:175: characters 9-78
		$bezalfs = Vec::zeros2d($newDegree + $degreeInc + 1, $newDegree + 1);
		#src/verb/eval/Modify.hx:176: characters 9-23
		$bpts = new \Array_hx();
		#src/verb/eval/Modify.hx:177: characters 9-24
		$ebpts = new \Array_hx();
		#src/verb/eval/Modify.hx:178: characters 9-27
		$Nextbpts = new \Array_hx();
		#src/verb/eval/Modify.hx:181: characters 9-35
		$m = $n + $newDegree + 1;
		#src/verb/eval/Modify.hx:182: characters 9-30
		$ph = $finalDegree;
		#src/verb/eval/Modify.hx:183: characters 9-38
		$ph2 = (int)(\floor($ph / 2));
		#src/verb/eval/Modify.hx:186: characters 9-21
		$Qw = new \Array_hx();
		#src/verb/eval/Modify.hx:187: characters 9-21
		$Uh = new \Array_hx();
		#src/verb/eval/Modify.hx:190: characters 9-22
		($bezalfs->arr[0] ?? null)->offsetSet(0, 1.0);
		#src/verb/eval/Modify.hx:191: characters 9-31
		($bezalfs->arr[$ph] ?? null)->offsetSet($newDegree, 1.0);
		#src/verb/eval/Modify.hx:193: characters 19-23
		$_g = 1;
		#src/verb/eval/Modify.hx:193: characters 23-28
		$_g1 = $ph2 + 1;
		#src/verb/eval/Modify.hx:193: lines 193-199
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:193: characters 19-28
			$i = $_g++;
			#src/verb/eval/Modify.hx:194: characters 13-51
			$inv = 1.0 / Binomial::get($ph, $i);
			#src/verb/eval/Modify.hx:195: characters 13-41
			$mpi = Modify::imin($newDegree, $i);
			#src/verb/eval/Modify.hx:196: characters 23-42
			$_g2 = Modify::imax(0, $i - $degreeInc);
			#src/verb/eval/Modify.hx:196: characters 45-50
			$_g3 = $mpi + 1;
			#src/verb/eval/Modify.hx:196: lines 196-198
			while ($_g2 < $_g3) {
				#src/verb/eval/Modify.hx:196: characters 23-50
				$j = $_g2++;
				#src/verb/eval/Modify.hx:197: characters 17-30
				($bezalfs->arr[$i] ?? null)->offsetSet($j, $inv * Binomial::get($newDegree, $j) * Binomial::get($degreeInc, $i - $j));
			}
		}
		#src/verb/eval/Modify.hx:200: characters 19-27
		$_g = $ph2 + 1;
		#src/verb/eval/Modify.hx:200: characters 27-29
		$_g1 = $ph;
		#src/verb/eval/Modify.hx:200: lines 200-205
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:200: characters 19-29
			$i = $_g++;
			#src/verb/eval/Modify.hx:201: characters 13-41
			$mpi = Modify::imin($newDegree, $i);
			#src/verb/eval/Modify.hx:202: characters 23-42
			$_g2 = Modify::imax(0, $i - $degreeInc);
			#src/verb/eval/Modify.hx:202: characters 45-50
			$_g3 = $mpi + 1;
			#src/verb/eval/Modify.hx:202: lines 202-204
			while ($_g2 < $_g3) {
				#src/verb/eval/Modify.hx:202: characters 23-50
				$j = $_g2++;
				#src/verb/eval/Modify.hx:203: characters 17-30
				($bezalfs->arr[$i] ?? null)->offsetSet($j, (($bezalfs->arr[$ph - $i] ?? null)->arr[$newDegree - $j] ?? null));
			}
		}
		#src/verb/eval/Modify.hx:206: characters 9-21
		$mh = $ph;
		#src/verb/eval/Modify.hx:207: characters 9-25
		$kind = $ph + 1;
		#src/verb/eval/Modify.hx:208: characters 9-20
		$r = -1;
		#src/verb/eval/Modify.hx:209: characters 9-27
		$a = $newDegree;
		#src/verb/eval/Modify.hx:210: characters 9-29
		$b = $newDegree + 1;
		#src/verb/eval/Modify.hx:211: characters 9-22
		$cind = 1;
		#src/verb/eval/Modify.hx:212: characters 9-27
		$ua = ($knots->arr[0] ?? null);
		#src/verb/eval/Modify.hx:213: characters 9-14
		$Qw->offsetSet(0, ($controlPoints->arr[0] ?? null));
		#src/verb/eval/Modify.hx:214: characters 19-23
		$_g = 0;
		#src/verb/eval/Modify.hx:214: characters 23-27
		$_g1 = $ph + 1;
		#src/verb/eval/Modify.hx:214: lines 214-216
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:214: characters 19-27
			$i = $_g++;
			#src/verb/eval/Modify.hx:215: characters 13-18
			$Uh->offsetSet($i, $ua);
		}
		#src/verb/eval/Modify.hx:217: characters 19-23
		$_g = 0;
		#src/verb/eval/Modify.hx:217: characters 23-34
		$_g1 = $newDegree + 1;
		#src/verb/eval/Modify.hx:217: lines 217-219
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:217: characters 19-34
			$i = $_g++;
			#src/verb/eval/Modify.hx:218: characters 13-20
			$bpts->offsetSet($i, ($controlPoints->arr[$i] ?? null));
		}
		#src/verb/eval/Modify.hx:220: lines 220-320
		while ($b < $m) {
			#src/verb/eval/Modify.hx:221: characters 13-23
			$i = $b;
			#src/verb/eval/Modify.hx:222: lines 222-224
			while (($b < $m) && Boot::equal(($knots->arr[$b] ?? null), ($knots->arr[$b + 1] ?? null))) {
				#src/verb/eval/Modify.hx:223: characters 17-18
				++$b;
			}
			#src/verb/eval/Modify.hx:225: characters 13-29
			$mul = $b - $i + 1;
			#src/verb/eval/Modify.hx:226: characters 13-39
			$mh1 = $mh + $mul + $degreeInc;
			#src/verb/eval/Modify.hx:227: characters 13-31
			$ub = ($knots->arr[$b] ?? null);
			#src/verb/eval/Modify.hx:228: characters 13-26
			$oldr = $r;
			#src/verb/eval/Modify.hx:229: characters 13-14
			$r = $newDegree - $mul;
			#src/verb/eval/Modify.hx:231: characters 13-61
			$lbz = ($oldr > 0 ? (int)(\floor(($oldr + 2) / 2)) : 1);
			#src/verb/eval/Modify.hx:232: characters 13-59
			$rbz = ($r > 0 ? (int)(\floor($ph - ($r + 1) / 2)) : $ph);
			#src/verb/eval/Modify.hx:233: lines 233-251
			if ($r > 0) {
				#src/verb/eval/Modify.hx:234: characters 17-35
				$numer = $ub - $ua;
				#src/verb/eval/Modify.hx:235: characters 17-31
				$alfs = new \Array_hx();
				#src/verb/eval/Modify.hx:236: characters 17-35
				$k = $newDegree;
				#src/verb/eval/Modify.hx:237: lines 237-240
				while ($k > $mul) {
					#src/verb/eval/Modify.hx:238: characters 21-34
					$alfs->offsetSet($k - $mul - 1, $numer / (($knots->arr[$a + $k] ?? null) - $ua));
					#src/verb/eval/Modify.hx:239: characters 21-24
					--$k;
				}
				#src/verb/eval/Modify.hx:241: characters 27-31
				$_g = 1;
				#src/verb/eval/Modify.hx:241: characters 31-34
				$_g1 = $r + 1;
				#src/verb/eval/Modify.hx:241: lines 241-250
				while ($_g < $_g1) {
					#src/verb/eval/Modify.hx:241: characters 27-34
					$j = $_g++;
					#src/verb/eval/Modify.hx:242: characters 21-36
					$save = $r - $j;
					#src/verb/eval/Modify.hx:243: characters 21-35
					$s = $mul + $j;
					#src/verb/eval/Modify.hx:244: characters 21-39
					$k1 = $newDegree;
					#src/verb/eval/Modify.hx:245: lines 245-248
					while ($k1 >= $s) {
						#src/verb/eval/Modify.hx:246: characters 25-32
						$bpts->offsetSet($k1, Vec::add(Vec::mul(($alfs->arr[$k1 - $s] ?? null), ($bpts->arr[$k1] ?? null)), Vec::mul(1.0 - ($alfs->arr[$k1 - $s] ?? null), ($bpts->arr[$k1 - 1] ?? null))));
						#src/verb/eval/Modify.hx:247: characters 25-28
						--$k1;
					}
					#src/verb/eval/Modify.hx:249: characters 21-35
					$Nextbpts->offsetSet($save, ($bpts->arr[$newDegree] ?? null));
				}
			}
			#src/verb/eval/Modify.hx:253: characters 23-26
			$_g2 = $lbz;
			#src/verb/eval/Modify.hx:253: characters 29-33
			$_g3 = $ph + 1;
			#src/verb/eval/Modify.hx:253: lines 253-259
			while ($_g2 < $_g3) {
				#src/verb/eval/Modify.hx:253: characters 23-33
				$i1 = $_g2++;
				#src/verb/eval/Modify.hx:254: characters 17-25
				$ebpts->offsetSet($i1, Vec::zeros1d($dim));
				#src/verb/eval/Modify.hx:255: characters 17-45
				$mpi = Modify::imin($newDegree, $i1);
				#src/verb/eval/Modify.hx:256: characters 27-46
				$_g4 = Modify::imax(0, $i1 - $degreeInc);
				#src/verb/eval/Modify.hx:256: characters 49-54
				$_g5 = $mpi + 1;
				#src/verb/eval/Modify.hx:256: lines 256-258
				while ($_g4 < $_g5) {
					#src/verb/eval/Modify.hx:256: characters 27-54
					$j1 = $_g4++;
					#src/verb/eval/Modify.hx:257: characters 21-29
					$ebpts->offsetSet($i1, Vec::add(($ebpts->arr[$i1] ?? null), Vec::mul((($bezalfs->arr[$i1] ?? null)->arr[$j1] ?? null), ($bpts->arr[$j1] ?? null))));
				}
			}
			#src/verb/eval/Modify.hx:261: lines 261-290
			if ($oldr > 1) {
				#src/verb/eval/Modify.hx:262: characters 17-36
				$first = $kind - 2;
				#src/verb/eval/Modify.hx:263: characters 17-33
				$last = $kind;
				#src/verb/eval/Modify.hx:264: characters 17-33
				$den = $ub - $ua;
				#src/verb/eval/Modify.hx:265: characters 17-47
				$bet = ($ub - ($Uh->arr[$kind - 1] ?? null)) / $den;
				#src/verb/eval/Modify.hx:266: characters 28-32
				$_g6 = 1;
				#src/verb/eval/Modify.hx:266: characters 32-36
				$_g7 = $oldr;
				#src/verb/eval/Modify.hx:266: lines 266-289
				while ($_g6 < $_g7) {
					#src/verb/eval/Modify.hx:266: characters 28-36
					$tr = $_g6++;
					#src/verb/eval/Modify.hx:267: characters 21-35
					$i2 = $first;
					#src/verb/eval/Modify.hx:268: characters 21-34
					$j2 = $last;
					#src/verb/eval/Modify.hx:269: characters 21-39
					$kj = $j2 - $kind + 1;
					#src/verb/eval/Modify.hx:270: lines 270-286
					while (($j2 - $i2) > $tr) {
						#src/verb/eval/Modify.hx:271: lines 271-274
						if ($i2 < $cind) {
							#src/verb/eval/Modify.hx:272: characters 29-61
							$alf = ($ub - ($Uh->arr[$i2] ?? null)) / ($ua - ($Uh->arr[$i2] ?? null));
							#src/verb/eval/Modify.hx:273: characters 29-34
							$Qw->offsetSet($i2, Vec::lerp($alf, ($Qw->arr[$i2] ?? null), ($Qw->arr[$i2 - 1] ?? null)));
						}
						#src/verb/eval/Modify.hx:275: lines 275-282
						if ($j2 >= $lbz) {
							#src/verb/eval/Modify.hx:276: lines 276-279
							if (($j2 - $tr) <= ($kind - $ph + $oldr)) {
								#src/verb/eval/Modify.hx:277: characters 33-61
								$gam = ($ub - ($Uh->arr[$j2 - $tr] ?? null)) / $den;
								#src/verb/eval/Modify.hx:278: characters 33-42
								$ebpts->offsetSet($kj, Vec::lerp($gam, ($ebpts->arr[$kj] ?? null), ($ebpts->arr[$kj + 1] ?? null)));
							}
						} else {
							#src/verb/eval/Modify.hx:281: characters 29-38
							$ebpts->offsetSet($kj, Vec::lerp($bet, ($ebpts->arr[$kj] ?? null), ($ebpts->arr[$kj + 1] ?? null)));
						}
						#src/verb/eval/Modify.hx:283: characters 25-26
						++$i2;
						#src/verb/eval/Modify.hx:284: characters 25-26
						--$j2;
						#src/verb/eval/Modify.hx:285: characters 25-27
						--$kj;
					}
					#src/verb/eval/Modify.hx:287: characters 21-26
					--$first;
					#src/verb/eval/Modify.hx:288: characters 21-25
					++$last;
				}
			}
			#src/verb/eval/Modify.hx:292: lines 292-297
			if ($a !== $newDegree) {
				#src/verb/eval/Modify.hx:293: characters 27-31
				$_g8 = 0;
				#src/verb/eval/Modify.hx:293: characters 31-38
				$_g9 = $ph - $oldr;
				#src/verb/eval/Modify.hx:293: lines 293-296
				while ($_g8 < $_g9) {
					#src/verb/eval/Modify.hx:293: characters 27-38
					$i3 = $_g8++;
					#src/verb/eval/Modify.hx:294: characters 21-29
					$Uh->offsetSet($kind, $ua);
					#src/verb/eval/Modify.hx:295: characters 21-25
					++$kind;
				}
			}
			#src/verb/eval/Modify.hx:299: characters 23-26
			$_g10 = $lbz;
			#src/verb/eval/Modify.hx:299: characters 29-34
			$_g11 = $rbz + 1;
			#src/verb/eval/Modify.hx:299: lines 299-302
			while ($_g10 < $_g11) {
				#src/verb/eval/Modify.hx:299: characters 23-34
				$j3 = $_g10++;
				#src/verb/eval/Modify.hx:300: characters 17-25
				$Qw->offsetSet($cind, ($ebpts->arr[$j3] ?? null));
				#src/verb/eval/Modify.hx:301: characters 17-21
				++$cind;
			}
			#src/verb/eval/Modify.hx:304: lines 304-319
			if ($b < $m) {
				#src/verb/eval/Modify.hx:305: characters 27-31
				$_g12 = 0;
				#src/verb/eval/Modify.hx:305: characters 31-32
				$_g13 = $r;
				#src/verb/eval/Modify.hx:305: lines 305-307
				while ($_g12 < $_g13) {
					#src/verb/eval/Modify.hx:305: characters 27-32
					$j4 = $_g12++;
					#src/verb/eval/Modify.hx:306: characters 21-28
					$bpts->offsetSet($j4, ($Nextbpts->arr[$j4] ?? null));
				}
				#src/verb/eval/Modify.hx:308: characters 27-28
				$_g14 = $r;
				#src/verb/eval/Modify.hx:308: characters 31-42
				$_g15 = $newDegree + 1;
				#src/verb/eval/Modify.hx:308: lines 308-310
				while ($_g14 < $_g15) {
					#src/verb/eval/Modify.hx:308: characters 27-42
					$j5 = $_g14++;
					#src/verb/eval/Modify.hx:309: characters 21-28
					$bpts->offsetSet($j5, ($controlPoints->arr[$b - $newDegree + $j5] ?? null));
				}
				#src/verb/eval/Modify.hx:311: characters 17-18
				$a = $b;
				#src/verb/eval/Modify.hx:312: characters 17-18
				++$b;
				#src/verb/eval/Modify.hx:313: characters 17-19
				$ua = $ub;
			} else {
				#src/verb/eval/Modify.hx:316: characters 27-31
				$_g16 = 0;
				#src/verb/eval/Modify.hx:316: characters 31-35
				$_g17 = $ph + 1;
				#src/verb/eval/Modify.hx:316: lines 316-318
				while ($_g16 < $_g17) {
					#src/verb/eval/Modify.hx:316: characters 27-35
					$i4 = $_g16++;
					#src/verb/eval/Modify.hx:317: characters 21-31
					$Uh->offsetSet($kind + $i4, $ub);
				}
			}
		}
		#src/verb/eval/Modify.hx:188: characters 9-16
		$nh = $mh - $ph - 1;
		#src/verb/eval/Modify.hx:323: characters 9-57
		return new NurbsCurveData($finalDegree, $Uh, $Qw);
	}

	/**
	 * @param NurbsCurveData $curve
	 * @param float $u
	 * @param int $r
	 * 
	 * @return NurbsCurveData
	 */
	public static function curveKnotInsert ($curve, $u, $r) {
		#src/verb/eval/Modify.hx:600: lines 600-602
		$degree = $curve->degree;
		$controlPoints = $curve->controlPoints;
		$knots = $curve->knots;
		#src/verb/eval/Modify.hx:610: characters 9-19
		$s = 0;
		#src/verb/eval/Modify.hx:612: lines 612-618
		$num_pts = $controlPoints->length;
		$k = Eval_hx::knotSpan($degree, $u, $knots);
		$num_pts_post = $num_pts + $r;
		$controlPoints_temp = new \Array_hx();
		$knots_post = new \Array_hx();
		$controlPoints_post = new \Array_hx();
		$i = 0;
		#src/verb/eval/Modify.hx:623: characters 19-23
		$_g = 1;
		#src/verb/eval/Modify.hx:623: characters 23-26
		$_g1 = $k + 1;
		#src/verb/eval/Modify.hx:623: lines 623-625
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:623: characters 19-26
			$i = $_g++;
			#src/verb/eval/Modify.hx:624: characters 13-37
			$knots_post->offsetSet($i, ($knots->arr[$i] ?? null));
		}
		#src/verb/eval/Modify.hx:628: characters 19-23
		$_g = 1;
		#src/verb/eval/Modify.hx:628: characters 23-26
		$_g1 = $r + 1;
		#src/verb/eval/Modify.hx:628: lines 628-630
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:628: characters 19-26
			$i = $_g++;
			#src/verb/eval/Modify.hx:629: characters 13-32
			$knots_post->offsetSet($k + $i, $u);
		}
		#src/verb/eval/Modify.hx:633: characters 19-25
		$_g = $k + 1;
		#src/verb/eval/Modify.hx:633: characters 25-37
		$_g1 = $knots->length;
		#src/verb/eval/Modify.hx:633: lines 633-635
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:633: characters 19-37
			$i = $_g++;
			#src/verb/eval/Modify.hx:634: characters 13-39
			$knots_post->offsetSet($i + $r, ($knots->arr[$i] ?? null));
		}
		#src/verb/eval/Modify.hx:640: characters 19-23
		$_g = 0;
		#src/verb/eval/Modify.hx:640: characters 23-37
		$_g1 = $k - $degree + 1;
		#src/verb/eval/Modify.hx:640: lines 640-642
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:640: characters 19-37
			$i = $_g++;
			#src/verb/eval/Modify.hx:641: characters 13-53
			$controlPoints_post->offsetSet($i, ($controlPoints->arr[$i] ?? null));
		}
		#src/verb/eval/Modify.hx:645: characters 19-22
		$_g = $k - $s;
		#src/verb/eval/Modify.hx:645: characters 25-32
		$_g1 = $num_pts;
		#src/verb/eval/Modify.hx:645: lines 645-647
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:645: characters 19-32
			$i = $_g++;
			#src/verb/eval/Modify.hx:646: characters 13-55
			$controlPoints_post->offsetSet($i + $r, ($controlPoints->arr[$i] ?? null));
		}
		#src/verb/eval/Modify.hx:650: characters 19-23
		$_g = 0;
		#src/verb/eval/Modify.hx:650: characters 23-33
		$_g1 = $degree - $s + 1;
		#src/verb/eval/Modify.hx:650: lines 650-652
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:650: characters 19-33
			$i = $_g++;
			#src/verb/eval/Modify.hx:651: characters 13-62
			$controlPoints_temp->offsetSet($i, ($controlPoints->arr[$k - $degree + $i] ?? null));
		}
		#src/verb/eval/Modify.hx:654: lines 654-655
		$L = 0;
		$alpha = 0;
		#src/verb/eval/Modify.hx:658: characters 19-23
		$_g = 1;
		#src/verb/eval/Modify.hx:658: characters 23-26
		$_g1 = $r + 1;
		#src/verb/eval/Modify.hx:658: lines 658-675
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:658: characters 19-26
			$j = $_g++;
			#src/verb/eval/Modify.hx:660: characters 13-27
			$L = $k - $degree + $j;
			#src/verb/eval/Modify.hx:662: characters 23-27
			$_g2 = 0;
			#src/verb/eval/Modify.hx:662: characters 27-39
			$_g3 = $degree - $j - $s + 1;
			#src/verb/eval/Modify.hx:662: lines 662-670
			while ($_g2 < $_g3) {
				#src/verb/eval/Modify.hx:662: characters 23-39
				$i = $_g2++;
				#src/verb/eval/Modify.hx:664: characters 17-75
				$alpha = ($u - ($knots->arr[$L + $i] ?? null)) / (($knots->arr[$i + $k + 1] ?? null) - ($knots->arr[$L + $i] ?? null));
				#src/verb/eval/Modify.hx:666: lines 666-669
				$controlPoints_temp->offsetSet($i, Vec::add(Vec::mul($alpha, ($controlPoints_temp->arr[$i + 1] ?? null)), Vec::mul(1.0 - $alpha, ($controlPoints_temp->arr[$i] ?? null))));
			}
			#src/verb/eval/Modify.hx:672: characters 13-60
			$controlPoints_post->offsetSet($L, ($controlPoints_temp->arr[0] ?? null));
			#src/verb/eval/Modify.hx:673: characters 13-73
			$controlPoints_post->offsetSet($k + $r - $j - $s, ($controlPoints_temp->arr[$degree - $j - $s] ?? null));
		}
		#src/verb/eval/Modify.hx:678: characters 19-25
		$_g = $L + 1;
		#src/verb/eval/Modify.hx:678: characters 25-28
		$_g1 = $k - $s;
		#src/verb/eval/Modify.hx:678: lines 678-680
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:678: characters 19-28
			$i = $_g++;
			#src/verb/eval/Modify.hx:679: characters 13-64
			$controlPoints_post->offsetSet($i, ($controlPoints_temp->arr[$i - $L] ?? null));
		}
		#src/verb/eval/Modify.hx:682: characters 9-74
		return new NurbsCurveData($degree, $knots_post, $controlPoints_post);
	}

	/**
	 * @param NurbsCurveData $curve
	 * @param \Array_hx $knotsToInsert
	 * 
	 * @return NurbsCurveData
	 */
	public static function curveKnotRefine ($curve, $knotsToInsert) {
		#src/verb/eval/Modify.hx:504: characters 9-72
		if ($knotsToInsert->length === 0) {
			#src/verb/eval/Modify.hx:504: characters 42-72
			return Make::clonedCurve($curve);
		}
		#src/verb/eval/Modify.hx:506: lines 506-508
		$degree = $curve->degree;
		$controlPoints = $curve->controlPoints;
		$knots = $curve->knots;
		#src/verb/eval/Modify.hx:510: lines 510-516
		$n = $controlPoints->length - 1;
		$m = $n + $degree + 1;
		$r = $knotsToInsert->length - 1;
		$a = Eval_hx::knotSpan($degree, ($knotsToInsert->arr[0] ?? null), $knots);
		$b = Eval_hx::knotSpan($degree, ($knotsToInsert->arr[$r] ?? null), $knots);
		$controlPoints_post = new \Array_hx();
		$knots_post = new \Array_hx();
		#src/verb/eval/Modify.hx:519: characters 19-23
		$_g = 0;
		#src/verb/eval/Modify.hx:519: characters 23-33
		$_g1 = $a - $degree + 1;
		#src/verb/eval/Modify.hx:519: lines 519-521
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:519: characters 19-33
			$i = $_g++;
			#src/verb/eval/Modify.hx:520: characters 13-53
			$controlPoints_post->offsetSet($i, ($controlPoints->arr[$i] ?? null));
		}
		#src/verb/eval/Modify.hx:523: characters 19-25
		$_g = $b - 1;
		#src/verb/eval/Modify.hx:523: characters 25-28
		$_g1 = $n + 1;
		#src/verb/eval/Modify.hx:523: lines 523-525
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:523: characters 19-28
			$i = $_g++;
			#src/verb/eval/Modify.hx:524: characters 13-57
			$controlPoints_post->offsetSet($i + $r + 1, ($controlPoints->arr[$i] ?? null));
		}
		#src/verb/eval/Modify.hx:528: characters 19-23
		$_g = 0;
		#src/verb/eval/Modify.hx:528: characters 23-26
		$_g1 = $a + 1;
		#src/verb/eval/Modify.hx:528: lines 528-530
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:528: characters 19-26
			$i = $_g++;
			#src/verb/eval/Modify.hx:529: characters 13-37
			$knots_post->offsetSet($i, ($knots->arr[$i] ?? null));
		}
		#src/verb/eval/Modify.hx:532: characters 19-27
		$_g = $b + $degree;
		#src/verb/eval/Modify.hx:532: characters 30-33
		$_g1 = $m + 1;
		#src/verb/eval/Modify.hx:532: lines 532-534
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:532: characters 19-33
			$i = $_g++;
			#src/verb/eval/Modify.hx:533: characters 13-41
			$knots_post->offsetSet($i + $r + 1, ($knots->arr[$i] ?? null));
		}
		#src/verb/eval/Modify.hx:536: characters 9-32
		$i = $b + $degree - 1;
		#src/verb/eval/Modify.hx:537: characters 9-32
		$k = $b + $degree + $r;
		#src/verb/eval/Modify.hx:538: characters 9-19
		$j = $r;
		#src/verb/eval/Modify.hx:540: lines 540-573
		while ($j >= 0) {
			#src/verb/eval/Modify.hx:542: lines 542-547
			while ((($knotsToInsert->arr[$j] ?? null) <= ($knots->arr[$i] ?? null)) && ($i > $a)) {
				#src/verb/eval/Modify.hx:543: characters 17-75
				$controlPoints_post->offsetSet($k - $degree - 1, ($controlPoints->arr[$i - $degree - 1] ?? null));
				#src/verb/eval/Modify.hx:544: characters 17-41
				$knots_post->offsetSet($k, ($knots->arr[$i] ?? null));
				#src/verb/eval/Modify.hx:545: characters 17-24
				--$k;
				#src/verb/eval/Modify.hx:546: characters 17-24
				--$i;
			}
			#src/verb/eval/Modify.hx:549: characters 13-74
			$controlPoints_post->offsetSet($k - $degree - 1, ($controlPoints_post->arr[$k - $degree] ?? null));
			#src/verb/eval/Modify.hx:551: characters 24-28
			$_g = 1;
			#src/verb/eval/Modify.hx:551: characters 28-36
			$_g1 = $degree + 1;
			#src/verb/eval/Modify.hx:551: lines 551-566
			while ($_g < $_g1) {
				#src/verb/eval/Modify.hx:551: characters 24-36
				$l = $_g++;
				#src/verb/eval/Modify.hx:553: characters 17-38
				$ind = $k - $degree + $l;
				#src/verb/eval/Modify.hx:554: characters 17-63
				$alfa = ($knots_post->arr[$k + $l] ?? null) - ($knotsToInsert->arr[$j] ?? null);
				#src/verb/eval/Modify.hx:556: lines 556-564
				if (\abs($alfa) < Constants::$EPSILON) {
					#src/verb/eval/Modify.hx:557: characters 21-72
					$controlPoints_post->offsetSet($ind - 1, ($controlPoints_post->arr[$ind] ?? null));
				} else {
					#src/verb/eval/Modify.hx:559: characters 21-72
					$alfa /= ($knots_post->arr[$k + $l] ?? null) - ($knots->arr[$i - $degree + $l] ?? null);
					#src/verb/eval/Modify.hx:561: lines 561-563
					$controlPoints_post->offsetSet($ind - 1, Vec::add(Vec::mul($alfa, ($controlPoints_post->arr[$ind - 1] ?? null)), Vec::mul(1.0 - $alfa, ($controlPoints_post->arr[$ind] ?? null))));
				}
			}
			#src/verb/eval/Modify.hx:568: characters 13-45
			$knots_post->offsetSet($k, ($knotsToInsert->arr[$j] ?? null));
			#src/verb/eval/Modify.hx:569: characters 13-22
			--$k;
			#src/verb/eval/Modify.hx:571: characters 13-16
			--$j;
		}
		#src/verb/eval/Modify.hx:575: characters 9-75
		return new NurbsCurveData($degree, $knots_post, $controlPoints_post);
	}

	/**
	 * @param NurbsCurveData $curve
	 * 
	 * @return NurbsCurveData
	 */
	public static function curveReverse ($curve) {
		#src/verb/eval/Modify.hx:39: characters 36-48
		$curve1 = $curve->degree;
		#src/verb/eval/Modify.hx:39: characters 50-77
		$tmp = Modify::knotsReverse($curve->knots);
		#src/verb/eval/Modify.hx:39: characters 9-111
		return new NurbsCurveData($curve1, $tmp, ArrayExtensions::reversed($curve->controlPoints));
	}

	/**
	 * @param NurbsCurveData $curve
	 * 
	 * @return \Array_hx
	 */
	public static function decomposeCurveIntoBeziers ($curve) {
		#src/verb/eval/Modify.hx:447: lines 447-449
		$degree = $curve->degree;
		$controlPoints = $curve->controlPoints;
		$knots = $curve->knots;
		#src/verb/eval/Modify.hx:454: characters 9-61
		$knotmults = Analyze::knotMultiplicities($knots);
		#src/verb/eval/Modify.hx:455: characters 9-34
		$reqMult = $degree + 1;
		#src/verb/eval/Modify.hx:458: lines 458-467
		$_g = 0;
		while ($_g < $knotmults->length) {
			#src/verb/eval/Modify.hx:458: characters 14-22
			$knotmult = ($knotmults->arr[$_g] ?? null);
			#src/verb/eval/Modify.hx:458: lines 458-467
			++$_g;
			#src/verb/eval/Modify.hx:459: lines 459-466
			if ($knotmult->mult < $reqMult) {
				#src/verb/eval/Modify.hx:461: characters 17-85
				$knotsInsert = Vec::rep($reqMult - $knotmult->mult, $knotmult->knot);
				#src/verb/eval/Modify.hx:462: characters 17-108
				$res = Modify::curveKnotRefine(new NurbsCurveData($degree, $knots, $controlPoints), $knotsInsert);
				#src/verb/eval/Modify.hx:464: characters 17-34
				$knots = $res->knots;
				#src/verb/eval/Modify.hx:465: characters 17-50
				$controlPoints = $res->controlPoints;
			}
		}
		#src/verb/eval/Modify.hx:469: characters 9-50
		$numCrvs = $knots->length / $reqMult - 1;
		#src/verb/eval/Modify.hx:470: characters 9-41
		$crvKnotLength = $reqMult * 2;
		#src/verb/eval/Modify.hx:472: characters 9-23
		$crvs = new \Array_hx();
		#src/verb/eval/Modify.hx:474: characters 9-19
		$i = 0;
		#src/verb/eval/Modify.hx:475: lines 475-482
		while ($i < $controlPoints->length) {
			#src/verb/eval/Modify.hx:476: characters 13-59
			$kts = $knots->slice($i, $i + $crvKnotLength);
			#src/verb/eval/Modify.hx:477: characters 13-61
			$pts = $controlPoints->slice($i, $i + $reqMult);
			#src/verb/eval/Modify.hx:479: characters 13-63
			$x = new NurbsCurveData($degree, $kts, $pts);
			$crvs->arr[$crvs->length++] = $x;
			#src/verb/eval/Modify.hx:481: characters 13-25
			$i += $reqMult;
		}
		#src/verb/eval/Modify.hx:484: characters 9-20
		return $crvs;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function imax ($a, $b) {
		#src/verb/eval/Modify.hx:147: characters 16-29
		if ($a > $b) {
			#src/verb/eval/Modify.hx:147: characters 24-25
			return $a;
		} else {
			#src/verb/eval/Modify.hx:147: characters 28-29
			return $b;
		}
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function imin ($a, $b) {
		#src/verb/eval/Modify.hx:143: characters 16-29
		if ($a < $b) {
			#src/verb/eval/Modify.hx:143: characters 24-25
			return $a;
		} else {
			#src/verb/eval/Modify.hx:143: characters 28-29
			return $b;
		}
	}

	/**
	 * @param \Array_hx $knots
	 * 
	 * @return \Array_hx
	 */
	public static function knotsReverse ($knots) {
		#src/verb/eval/Modify.hx:75: characters 9-33
		$min = ArrayExtensions::first($knots);
		#src/verb/eval/Modify.hx:76: characters 9-32
		$max = ArrayExtensions::last($knots);
		#src/verb/eval/Modify.hx:78: characters 9-25
		$l = \Array_hx::wrap([$min]);
		#src/verb/eval/Modify.hx:79: characters 9-32
		$len = $knots->length;
		#src/verb/eval/Modify.hx:80: characters 19-23
		$_g = 1;
		#src/verb/eval/Modify.hx:80: characters 23-26
		$_g1 = $len;
		#src/verb/eval/Modify.hx:80: lines 80-82
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:80: characters 19-26
			$i = $_g++;
			#src/verb/eval/Modify.hx:81: characters 21-63
			$tmp = ($l->arr[$i - 1] ?? null) + (($knots->arr[$len - $i] ?? null) - ($knots->arr[$len - $i - 1] ?? null));
			#src/verb/eval/Modify.hx:81: characters 13-65
			$l->arr[$l->length++] = $tmp;
		}
		#src/verb/eval/Modify.hx:84: characters 9-17
		return $l;
	}

	/**
	 * @param NurbsCurveData $curve
	 * @param \Array_hx $mat
	 * 
	 * @return NurbsCurveData
	 */
	public static function rationalCurveTransform ($curve, $mat) {
		#src/verb/eval/Modify.hx:366: characters 9-62
		$pts = Eval_hx::dehomogenize1d($curve->controlPoints);
		#src/verb/eval/Modify.hx:368: characters 19-23
		$_g = 0;
		#src/verb/eval/Modify.hx:368: characters 23-33
		$_g1 = $pts->length;
		#src/verb/eval/Modify.hx:368: lines 368-374
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:368: characters 19-33
			$i = $_g++;
			#src/verb/eval/Modify.hx:370: characters 13-33
			$homoPt = ($pts->arr[$i] ?? null);
			#src/verb/eval/Modify.hx:371: characters 13-29
			$homoPt->arr[$homoPt->length++] = 1.0;
			#src/verb/eval/Modify.hx:373: characters 13-74
			$pts->offsetSet($i, Mat::dot($mat, $homoPt)->slice(0, $homoPt->length - 1));
		}
		#src/verb/eval/Modify.hx:376: characters 36-48
		$curve1 = $curve->degree;
		#src/verb/eval/Modify.hx:376: characters 50-68
		$tmp = (clone $curve->knots);
		#src/verb/eval/Modify.hx:376: characters 9-133
		return new NurbsCurveData($curve1, $tmp, Eval_hx::homogenize1d($pts, Eval_hx::weight1d($curve->controlPoints)));
	}

	/**
	 * @param NurbsSurfaceData $surface
	 * @param \Array_hx $mat
	 * 
	 * @return NurbsSurfaceData
	 */
	public static function rationalSurfaceTransform ($surface, $mat) {
		#src/verb/eval/Modify.hx:339: characters 9-64
		$pts = Eval_hx::dehomogenize2d($surface->controlPoints);
		#src/verb/eval/Modify.hx:341: characters 19-23
		$_g = 0;
		#src/verb/eval/Modify.hx:341: characters 23-33
		$_g1 = $pts->length;
		#src/verb/eval/Modify.hx:341: lines 341-348
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:341: characters 19-33
			$i = $_g++;
			#src/verb/eval/Modify.hx:342: characters 23-27
			$_g2 = 0;
			#src/verb/eval/Modify.hx:342: characters 27-40
			$_g3 = ($pts->arr[$i] ?? null)->length;
			#src/verb/eval/Modify.hx:342: lines 342-347
			while ($_g2 < $_g3) {
				#src/verb/eval/Modify.hx:342: characters 23-40
				$j = $_g2++;
				#src/verb/eval/Modify.hx:343: characters 17-40
				$homoPt = (($pts->arr[$i] ?? null)->arr[$j] ?? null);
				#src/verb/eval/Modify.hx:344: characters 17-33
				$homoPt->arr[$homoPt->length++] = 1.0;
				#src/verb/eval/Modify.hx:346: characters 17-81
				($pts->arr[$i] ?? null)->offsetSet($j, Mat::dot($mat, $homoPt)->slice(0, $homoPt->length - 1));
			}
		}
		#src/verb/eval/Modify.hx:350: characters 38-53
		$surface1 = $surface->degreeU;
		#src/verb/eval/Modify.hx:350: characters 55-70
		$surface2 = $surface->degreeV;
		#src/verb/eval/Modify.hx:350: characters 72-93
		$tmp = (clone $surface->knotsU);
		#src/verb/eval/Modify.hx:350: characters 95-116
		$tmp1 = (clone $surface->knotsV);
		#src/verb/eval/Modify.hx:350: characters 9-181
		return new NurbsSurfaceData($surface1, $surface2, $tmp, $tmp1, Eval_hx::homogenize2d($pts, Eval_hx::weight2d($surface->controlPoints)));
	}

	/**
	 * @param NurbsSurfaceData $surface
	 * @param \Array_hx $knotsToInsert
	 * @param bool $useV
	 * 
	 * @return NurbsSurfaceData
	 */
	public static function surfaceKnotRefine ($surface, $knotsToInsert, $useV) {
		#src/verb/eval/Modify.hx:397: lines 397-400
		$newPts = new \Array_hx();
		$knots = null;
		$degree = null;
		$ctrlPts = null;
		#src/verb/eval/Modify.hx:403: lines 403-412
		if (!$useV) {
			#src/verb/eval/Modify.hx:404: characters 13-62
			$ctrlPts = Mat::transposeN($surface->controlPoints);
			#src/verb/eval/Modify.hx:405: characters 13-35
			$knots = $surface->knotsU;
			#src/verb/eval/Modify.hx:406: characters 13-37
			$degree = $surface->degreeU;
		} else {
			#src/verb/eval/Modify.hx:409: characters 13-44
			$ctrlPts = $surface->controlPoints;
			#src/verb/eval/Modify.hx:410: characters 13-35
			$knots = $surface->knotsV;
			#src/verb/eval/Modify.hx:411: characters 13-37
			$degree = $surface->degreeV;
		}
		#src/verb/eval/Modify.hx:415: characters 9-39
		$c = null;
		#src/verb/eval/Modify.hx:416: lines 416-419
		$_g = 0;
		while ($_g < $ctrlPts->length) {
			#src/verb/eval/Modify.hx:416: characters 14-20
			$cptrow = ($ctrlPts->arr[$_g] ?? null);
			#src/verb/eval/Modify.hx:416: lines 416-419
			++$_g;
			#src/verb/eval/Modify.hx:417: characters 13-92
			$c = Modify::curveKnotRefine(new NurbsCurveData($degree, $knots, $cptrow), $knotsToInsert);
			#src/verb/eval/Modify.hx:418: characters 13-43
			$newPts->arr[$newPts->length++] = $c->controlPoints;
		}
		#src/verb/eval/Modify.hx:421: characters 9-32
		$newknots = $c->knots;
		#src/verb/eval/Modify.hx:424: lines 424-430
		if (!$useV) {
			#src/verb/eval/Modify.hx:425: characters 13-46
			$newPts = Mat::transposeN($newPts);
			#src/verb/eval/Modify.hx:426: characters 42-57
			$surface1 = $surface->degreeU;
			#src/verb/eval/Modify.hx:426: characters 59-74
			$surface2 = $surface->degreeV;
			#src/verb/eval/Modify.hx:426: characters 13-117
			return new NurbsSurfaceData($surface1, $surface2, $newknots, (clone $surface->knotsV), $newPts);
		} else {
			#src/verb/eval/Modify.hx:429: characters 42-57
			$surface1 = $surface->degreeU;
			#src/verb/eval/Modify.hx:429: characters 59-74
			$surface2 = $surface->degreeV;
			#src/verb/eval/Modify.hx:429: characters 13-117
			return new NurbsSurfaceData($surface1, $surface2, (clone $surface->knotsU), $newknots, $newPts);
		}
	}

	/**
	 * @param NurbsSurfaceData $surface
	 * @param bool $useV
	 * 
	 * @return NurbsSurfaceData
	 */
	public static function surfaceReverse ($surface, $useV = false) {
		#src/verb/eval/Modify.hx:53: lines 53-62
		if ($useV === null) {
			$useV = false;
		}
		#src/verb/eval/Modify.hx:54: lines 54-58
		if ($useV) {
			#src/verb/eval/Modify.hx:55: characters 42-57
			$surface1 = $surface->degreeU;
			#src/verb/eval/Modify.hx:55: characters 59-74
			$surface2 = $surface->degreeV;
			#src/verb/eval/Modify.hx:55: characters 76-90
			$surface3 = $surface->knotsU;
			#src/verb/eval/Modify.hx:55: characters 92-120
			$tmp = Modify::knotsReverse($surface->knotsV);
			#src/verb/eval/Modify.hx:56: characters 17-69
			$_g = new \Array_hx();
			#src/verb/eval/Modify.hx:56: characters 18-67
			$_g1 = 0;
			$_g2 = $surface->controlPoints;
			while ($_g1 < $_g2->length) {
				#src/verb/eval/Modify.hx:56: characters 23-26
				$row = ($_g2->arr[$_g1] ?? null);
				#src/verb/eval/Modify.hx:56: characters 18-67
				++$_g1;
				#src/verb/eval/Modify.hx:56: characters 53-67
				$x = ArrayExtensions::reversed($row);
				$_g->arr[$_g->length++] = $x;
			}
			#src/verb/eval/Modify.hx:55: lines 55-56
			return new NurbsSurfaceData($surface1, $surface2, $surface3, $tmp, $_g);
		}
		#src/verb/eval/Modify.hx:60: characters 38-53
		$surface1 = $surface->degreeU;
		#src/verb/eval/Modify.hx:60: characters 55-70
		$surface2 = $surface->degreeV;
		#src/verb/eval/Modify.hx:60: characters 72-100
		$tmp = Modify::knotsReverse($surface->knotsU);
		#src/verb/eval/Modify.hx:60: characters 102-116
		$surface3 = $surface->knotsV;
		#src/verb/eval/Modify.hx:60: lines 60-61
		return new NurbsSurfaceData($surface1, $surface2, $tmp, $surface3, ArrayExtensions::reversed($surface->controlPoints));
	}

	/**
	 * @param \Array_hx $curves
	 * 
	 * @return \Array_hx
	 */
	public static function unifyCurveKnotVectors ($curves) {
		#src/verb/eval/Modify.hx:98: characters 18-46
		$f = Boot::getStaticClosure(Make::class, 'clonedCurve');
		$result = [];
		$data = $curves->arr;
		$_g_current = 0;
		$_g_length = \count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			$result[] = $f($item);
		}
		$curves = \Array_hx::wrap($result);
		#src/verb/eval/Modify.hx:100: characters 9-92
		$maxDegree = \Lambda::fold($curves, function ($x, $a) {
			#src/verb/eval/Modify.hx:100: characters 52-83
			return Modify::imax($x->degree, $a);
		}, 0);
		#src/verb/eval/Modify.hx:103: characters 19-23
		$_g = 0;
		#src/verb/eval/Modify.hx:103: characters 23-36
		$_g1 = $curves->length;
		#src/verb/eval/Modify.hx:103: lines 103-107
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:103: characters 19-36
			$i = $_g++;
			#src/verb/eval/Modify.hx:104: lines 104-106
			if (($curves->arr[$i] ?? null)->degree < $maxDegree) {
				#src/verb/eval/Modify.hx:105: characters 17-26
				$curves->offsetSet($i, Modify::curveElevateDegree(($curves->arr[$i] ?? null), $maxDegree));
			}
		}
		#src/verb/eval/Modify.hx:109: characters 29-98
		$_g = new \Array_hx();
		#src/verb/eval/Modify.hx:109: characters 31-96
		$_g1 = 0;
		while ($_g1 < $curves->length) {
			#src/verb/eval/Modify.hx:109: characters 36-37
			$c = ($curves->arr[$_g1] ?? null);
			#src/verb/eval/Modify.hx:109: characters 31-96
			++$_g1;
			#src/verb/eval/Modify.hx:109: characters 63-78
			$x = ArrayExtensions::first($c->knots);
			#src/verb/eval/Modify.hx:109: characters 49-96
			$x1 = new Interval($x, ArrayExtensions::last($c->knots));
			$_g->arr[$_g->length++] = $x1;
		}
		#src/verb/eval/Modify.hx:109: characters 9-99
		$knotIntervals = $_g;
		#src/verb/eval/Modify.hx:112: characters 19-23
		$_g = 0;
		#src/verb/eval/Modify.hx:112: characters 23-36
		$_g1 = $curves->length;
		#src/verb/eval/Modify.hx:112: lines 112-115
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:112: characters 19-36
			$i = $_g++;
			#src/verb/eval/Modify.hx:113: characters 13-44
			$min = ($knotIntervals->arr[$i] ?? null)->min;
			#src/verb/eval/Modify.hx:114: characters 31-82
			$_this = ($curves->arr[$i] ?? null)->knots;
			$result = [];
			$data = $_this->arr;
			$_g_current = 0;
			$_g_length = \count($data);
			$_g_data = $data;
			while ($_g_current < $_g_length) {
				$item = $_g_data[$_g_current++];
				$result[] = ($item - $min);
			}
			$tmp = \Array_hx::wrap($result);
			#src/verb/eval/Modify.hx:114: characters 13-28
			$curves[$i]->knots = $tmp;
		}
		#src/verb/eval/Modify.hx:118: characters 25-80
		$result = [];
		$data = $knotIntervals->arr;
		$_g_current = 0;
		$_g_length = \count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			$result[] = ($item->max - $item->min);
		}
		#src/verb/eval/Modify.hx:118: characters 9-81
		$knotSpans = \Array_hx::wrap($result);
		#src/verb/eval/Modify.hx:119: characters 9-89
		$maxKnotSpan = \Lambda::fold($knotSpans, function ($x, $a) {
			#src/verb/eval/Modify.hx:119: characters 64-78
			if (\is_nan($x) || \is_nan($a)) {
				return \Math::$NaN;
			} else {
				return \max($x, $a);
			}
		}, 0.0);
		#src/verb/eval/Modify.hx:122: characters 19-23
		$_g = 0;
		#src/verb/eval/Modify.hx:122: characters 23-36
		$_g1 = $curves->length;
		#src/verb/eval/Modify.hx:122: lines 122-125
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:122: characters 19-36
			$i = $_g++;
			#src/verb/eval/Modify.hx:123: characters 13-52
			$scale = $maxKnotSpan / ($knotSpans->arr[$i] ?? null);
			#src/verb/eval/Modify.hx:124: characters 31-84
			$_this = ($curves->arr[$i] ?? null)->knots;
			$result = [];
			$data = $_this->arr;
			$_g_current = 0;
			$_g_length = \count($data);
			$_g_data = $data;
			while ($_g_current < $_g_length) {
				$item = $_g_data[$_g_current++];
				$result[] = ($item * $scale);
			}
			$tmp = \Array_hx::wrap($result);
			#src/verb/eval/Modify.hx:124: characters 13-28
			$curves[$i]->knots = $tmp;
		}
		#src/verb/eval/Modify.hx:128: characters 9-99
		$mergedKnots = \Lambda::fold($curves, function ($x, $a) {
			#src/verb/eval/Modify.hx:128: characters 54-90
			return Vec::sortedSetUnion($x->knots, $a);
		}, new \Array_hx());
		#src/verb/eval/Modify.hx:131: characters 19-23
		$_g = 0;
		#src/verb/eval/Modify.hx:131: characters 23-36
		$_g1 = $curves->length;
		#src/verb/eval/Modify.hx:131: lines 131-137
		while ($_g < $_g1) {
			#src/verb/eval/Modify.hx:131: characters 19-36
			$i = $_g++;
			#src/verb/eval/Modify.hx:132: characters 13-72
			$rem = Vec::sortedSetSub($mergedKnots, ($curves->arr[$i] ?? null)->knots);
			#src/verb/eval/Modify.hx:133: lines 133-135
			if ($rem->length === 0) {
				#src/verb/eval/Modify.hx:134: characters 17-26
				$curves->offsetSet($i, ($curves->arr[$i] ?? null));
			}
			#src/verb/eval/Modify.hx:136: characters 13-22
			$curves->offsetSet($i, Modify::curveKnotRefine(($curves->arr[$i] ?? null), $rem));
		}
		#src/verb/eval/Modify.hx:139: characters 9-22
		return $curves;
	}
}

Boot::registerClass(Modify::class, 'verb.eval.Modify');
