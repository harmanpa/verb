<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace verb\eval_hx;

use \verb\core\NurbsSurfaceData;
use \php\Boot;
use \verb\core\Constants;
use \verb\core\Vec;
use \verb\core\MeshData;
use \verb\core\SurfacePoint;
use \verb\core\ArrayExtensions;

class AdaptiveRefinementNode {
	/**
	 * @var SurfacePoint
	 */
	public $centerPoint;
	/**
	 * @var \Array_hx
	 */
	public $children;
	/**
	 * @var \Array_hx
	 */
	public $corners;
	/**
	 * @var bool
	 */
	public $horizontal;
	/**
	 * @var \Array_hx
	 */
	public $midPoints;
	/**
	 * @var \Array_hx
	 */
	public $neighbors;
	/**
	 * @var bool
	 */
	public $splitHoriz;
	/**
	 * @var bool
	 */
	public $splitVert;
	/**
	 * @var NurbsSurfaceData
	 */
	public $srf;
	/**
	 * @var float
	 */
	public $u05;
	/**
	 * @var float
	 */
	public $v05;

	/**
	 * @param NurbsSurfaceData $srf
	 * @param \Array_hx $corners
	 * @param \Array_hx $neighbors
	 * 
	 * @return void
	 */
	public function __construct ($srf, $corners, $neighbors = null) {
		#src/verb/eval/Tess.hx:413: characters 9-23
		$this->srf = $srf;
		#src/verb/eval/Tess.hx:414: characters 9-82
		$this->neighbors = ($neighbors === null ? \Array_hx::wrap([
			null,
			null,
			null,
			null,
		]) : $neighbors);
		#src/verb/eval/Tess.hx:416: characters 9-31
		$this->corners = $corners;
		#src/verb/eval/Tess.hx:419: lines 419-430
		if ($this->corners === null) {
			#src/verb/eval/Tess.hx:420: characters 13-44
			$u0 = ($srf->knotsU->arr[0] ?? null);
			#src/verb/eval/Tess.hx:421: characters 13-48
			$u1 = ArrayExtensions::last($srf->knotsU);
			#src/verb/eval/Tess.hx:422: characters 13-44
			$v0 = ($srf->knotsV->arr[0] ?? null);
			#src/verb/eval/Tess.hx:423: characters 13-48
			$v1 = ArrayExtensions::last($srf->knotsV);
			#src/verb/eval/Tess.hx:426: characters 13-42
			$tmp = SurfacePoint::fromUv($u0, $v0);
			#src/verb/eval/Tess.hx:427: characters 13-42
			$tmp1 = SurfacePoint::fromUv($u1, $v0);
			#src/verb/eval/Tess.hx:428: characters 13-42
			$tmp2 = SurfacePoint::fromUv($u1, $v1);
			#src/verb/eval/Tess.hx:425: lines 425-429
			$this->corners = \Array_hx::wrap([
				$tmp,
				$tmp1,
				$tmp2,
				SurfacePoint::fromUv($u0, $v1),
			]);
		}
	}

	/**
	 * @param AdaptiveRefinementOptions $options
	 * @param int $currentDepth
	 * @param bool $horiz
	 * 
	 * @return void
	 */
	public function _divide ($options, $currentDepth, $horiz) {
		#src/verb/eval/Tess.hx:623: characters 9-27
		$this->evalCorners();
		#src/verb/eval/Tess.hx:625: characters 9-67
		if (!$this->shouldDivide($options, $currentDepth)) {
			#src/verb/eval/Tess.hx:625: characters 61-67
			return;
		}
		#src/verb/eval/Tess.hx:627: characters 9-23
		++$currentDepth;
		#src/verb/eval/Tess.hx:630: lines 630-634
		if ($this->splitVert && !$this->splitHoriz) {
			#src/verb/eval/Tess.hx:631: characters 13-26
			$horiz = false;
		} else if (!$this->splitVert && $this->splitHoriz) {
			#src/verb/eval/Tess.hx:633: characters 13-25
			$horiz = true;
		}
		#src/verb/eval/Tess.hx:636: characters 9-32
		$this->horizontal = $horiz;
		#src/verb/eval/Tess.hx:638: lines 638-661
		if ($this->horizontal) {
			#src/verb/eval/Tess.hx:640: characters 27-42
			$bott = ($this->corners->arr[0] ?? null);
			#src/verb/eval/Tess.hx:640: characters 44-59
			$bott1 = ($this->corners->arr[1] ?? null);
			#src/verb/eval/Tess.hx:640: characters 61-77
			$bott2 = $this->midpoint(1);
			#src/verb/eval/Tess.hx:640: characters 13-99
			$bott3 = \Array_hx::wrap([
				$bott,
				$bott1,
				$bott2,
				$this->midpoint(3),
			]);
			#src/verb/eval/Tess.hx:641: characters 26-42
			$top = $this->midpoint(3);
			#src/verb/eval/Tess.hx:641: characters 44-60
			$top1 = $this->midpoint(1);
			#src/verb/eval/Tess.hx:641: characters 13-98
			$top2 = \Array_hx::wrap([
				$top,
				$top1,
				($this->corners->arr[2] ?? null),
				($this->corners->arr[3] ?? null),
			]);
			#src/verb/eval/Tess.hx:643: characters 31-75
			$tmp = new AdaptiveRefinementNode($this->srf, $bott3);
			#src/verb/eval/Tess.hx:643: characters 13-122
			$this->children = \Array_hx::wrap([
				$tmp,
				new AdaptiveRefinementNode($this->srf, $top2),
			]);
			#src/verb/eval/Tess.hx:646: characters 13-119
			$this->children[0]->neighbors = \Array_hx::wrap([
				($this->neighbors->arr[0] ?? null),
				($this->neighbors->arr[1] ?? null),
				($this->children->arr[1] ?? null),
				($this->neighbors->arr[3] ?? null),
			]);
			#src/verb/eval/Tess.hx:649: characters 13-119
			$this->children[1]->neighbors = \Array_hx::wrap([
				($this->children->arr[0] ?? null),
				($this->neighbors->arr[1] ?? null),
				($this->neighbors->arr[2] ?? null),
				($this->neighbors->arr[3] ?? null),
			]);
		} else {
			#src/verb/eval/Tess.hx:653: characters 26-41
			$left = ($this->corners->arr[0] ?? null);
			#src/verb/eval/Tess.hx:653: characters 43-59
			$left1 = $this->midpoint(0);
			#src/verb/eval/Tess.hx:653: characters 61-77
			$left2 = $this->midpoint(2);
			#src/verb/eval/Tess.hx:653: characters 13-98
			$left3 = \Array_hx::wrap([
				$left,
				$left1,
				$left2,
				($this->corners->arr[3] ?? null),
			]);
			#src/verb/eval/Tess.hx:654: characters 27-43
			$right = $this->midpoint(0);
			#src/verb/eval/Tess.hx:654: characters 45-60
			$right1 = ($this->corners->arr[1] ?? null);
			#src/verb/eval/Tess.hx:654: characters 62-77
			$right2 = ($this->corners->arr[2] ?? null);
			#src/verb/eval/Tess.hx:654: characters 13-99
			$right3 = \Array_hx::wrap([
				$right,
				$right1,
				$right2,
				$this->midpoint(2),
			]);
			#src/verb/eval/Tess.hx:656: characters 31-75
			$tmp = new AdaptiveRefinementNode($this->srf, $left3);
			#src/verb/eval/Tess.hx:656: characters 13-125
			$this->children = \Array_hx::wrap([
				$tmp,
				new AdaptiveRefinementNode($this->srf, $right3),
			]);
			#src/verb/eval/Tess.hx:658: characters 13-119
			$this->children[0]->neighbors = \Array_hx::wrap([
				($this->neighbors->arr[0] ?? null),
				($this->children->arr[1] ?? null),
				($this->neighbors->arr[2] ?? null),
				($this->neighbors->arr[3] ?? null),
			]);
			#src/verb/eval/Tess.hx:659: characters 13-119
			$this->children[1]->neighbors = \Array_hx::wrap([
				($this->neighbors->arr[0] ?? null),
				($this->neighbors->arr[1] ?? null),
				($this->neighbors->arr[2] ?? null),
				($this->children->arr[0] ?? null),
			]);
		}
		#src/verb/eval/Tess.hx:664: lines 664-666
		$_g = 0;
		$_g1 = $this->children;
		while ($_g < $_g1->length) {
			#src/verb/eval/Tess.hx:664: characters 14-19
			$child = ($_g1->arr[$_g] ?? null);
			#src/verb/eval/Tess.hx:664: lines 664-666
			++$_g;
			#src/verb/eval/Tess.hx:665: characters 13-59
			$child->_divide($options, $currentDepth, !$horiz);
		}
	}

	/**
	 * @return SurfacePoint
	 */
	public function center () {
		#src/verb/eval/Tess.hx:439: characters 16-96
		if ($this->centerPoint !== null) {
			#src/verb/eval/Tess.hx:439: characters 43-59
			return $this->centerPoint;
		} else {
			#src/verb/eval/Tess.hx:439: characters 62-96
			return $this->evalSrf($this->u05, $this->v05);
		}
	}

	/**
	 * @param AdaptiveRefinementOptions $options
	 * 
	 * @return void
	 */
	public function divide ($options = null) {
		#src/verb/eval/Tess.hx:611: characters 9-71
		if ($options === null) {
			#src/verb/eval/Tess.hx:611: characters 30-71
			$options = new AdaptiveRefinementOptions();
		}
		#src/verb/eval/Tess.hx:613: characters 13-66
		if ($options->normTol === null) {
			#src/verb/eval/Tess.hx:613: characters 42-66
			$options->normTol = 8.5e-2;
		}
		#src/verb/eval/Tess.hx:614: characters 9-59
		if ($options->minDepth === null) {
			#src/verb/eval/Tess.hx:614: characters 39-59
			$options->minDepth = 0;
		}
		#src/verb/eval/Tess.hx:615: characters 9-60
		if ($options->maxDepth === null) {
			#src/verb/eval/Tess.hx:615: characters 39-60
			$options->maxDepth = 10;
		}
		#src/verb/eval/Tess.hx:618: characters 9-41
		$this->_divide($options, 0, true);
	}

	/**
	 * @return void
	 */
	public function evalCorners () {
		#src/verb/eval/Tess.hx:445: characters 9-71
		$this->u05 = ((($this->corners->arr[0] ?? null)->uv->arr[0] ?? null) + (($this->corners->arr[2] ?? null)->uv->arr[0] ?? null)) / 2;
		#src/verb/eval/Tess.hx:446: characters 9-71
		$this->v05 = ((($this->corners->arr[0] ?? null)->uv->arr[1] ?? null) + (($this->corners->arr[2] ?? null)->uv->arr[1] ?? null)) / 2;
		#src/verb/eval/Tess.hx:451: lines 451-455
		if (($this->corners->arr[0] ?? null)->point === null) {
			#src/verb/eval/Tess.hx:453: characters 17-41
			$c = ($this->corners->arr[0] ?? null);
			#src/verb/eval/Tess.hx:454: characters 17-52
			$this->evalSrf(($c->uv->arr[0] ?? null), ($c->uv->arr[1] ?? null), $c);
		}
		#src/verb/eval/Tess.hx:451: lines 451-455
		if (($this->corners->arr[1] ?? null)->point === null) {
			#src/verb/eval/Tess.hx:453: characters 17-41
			$c = ($this->corners->arr[1] ?? null);
			#src/verb/eval/Tess.hx:454: characters 17-52
			$this->evalSrf(($c->uv->arr[0] ?? null), ($c->uv->arr[1] ?? null), $c);
		}
		#src/verb/eval/Tess.hx:451: lines 451-455
		if (($this->corners->arr[2] ?? null)->point === null) {
			#src/verb/eval/Tess.hx:453: characters 17-41
			$c = ($this->corners->arr[2] ?? null);
			#src/verb/eval/Tess.hx:454: characters 17-52
			$this->evalSrf(($c->uv->arr[0] ?? null), ($c->uv->arr[1] ?? null), $c);
		}
		#src/verb/eval/Tess.hx:451: lines 451-455
		if (($this->corners->arr[3] ?? null)->point === null) {
			#src/verb/eval/Tess.hx:453: characters 17-41
			$c = ($this->corners->arr[3] ?? null);
			#src/verb/eval/Tess.hx:454: characters 17-52
			$this->evalSrf(($c->uv->arr[0] ?? null), ($c->uv->arr[1] ?? null), $c);
		}
	}

	/**
	 * @param float $u
	 * @param float $v
	 * @param SurfacePoint $srfPt
	 * 
	 * @return SurfacePoint
	 */
	public function evalSrf ($u, $v, $srfPt = null) {
		#src/verb/eval/Tess.hx:461: characters 9-75
		$derivs = Eval_hx::rationalSurfaceDerivatives($this->srf, $u, $v, 1);
		#src/verb/eval/Tess.hx:462: characters 9-31
		$pt = (($derivs->arr[0] ?? null)->arr[0] ?? null);
		#src/verb/eval/Tess.hx:463: characters 9-61
		$norm = Vec::cross((($derivs->arr[0] ?? null)->arr[1] ?? null), (($derivs->arr[1] ?? null)->arr[0] ?? null));
		#src/verb/eval/Tess.hx:464: characters 9-40
		$degen = Vec::isZero($norm);
		#src/verb/eval/Tess.hx:466: characters 9-50
		if (!$degen) {
			#src/verb/eval/Tess.hx:466: characters 21-50
			$norm = Vec::normalized($norm);
		}
		#src/verb/eval/Tess.hx:468: lines 468-475
		if ($srfPt !== null) {
			#src/verb/eval/Tess.hx:469: characters 13-32
			$srfPt->degen = $degen;
			#src/verb/eval/Tess.hx:470: characters 13-29
			$srfPt->point = $pt;
			#src/verb/eval/Tess.hx:471: characters 13-32
			$srfPt->normal = $norm;
			#src/verb/eval/Tess.hx:472: characters 13-25
			return $srfPt;
		} else {
			#src/verb/eval/Tess.hx:474: characters 13-66
			return new SurfacePoint($pt, $norm, \Array_hx::wrap([
				$u,
				$v,
			]), -1, $degen);
		}
	}

	/**
	 * @return void
	 */
	public function fixNormals () {
		#src/verb/eval/Tess.hx:567: characters 9-37
		$l = $this->corners->length;
		#src/verb/eval/Tess.hx:569: characters 19-23
		$_g = 0;
		#src/verb/eval/Tess.hx:569: characters 23-24
		$_g1 = $l;
		#src/verb/eval/Tess.hx:569: lines 569-580
		while ($_g < $_g1) {
			#src/verb/eval/Tess.hx:569: characters 19-24
			$i = $_g++;
			#src/verb/eval/Tess.hx:570: characters 13-40
			$corn = ($this->corners->arr[$i] ?? null);
			#src/verb/eval/Tess.hx:572: lines 572-579
			if (($this->corners->arr[$i] ?? null)->degen) {
				#src/verb/eval/Tess.hx:574: characters 17-52
				$v1 = ($this->corners->arr[($i + 1) % $l] ?? null);
				#src/verb/eval/Tess.hx:575: characters 17-52
				$v2 = ($this->corners->arr[($i + 3) % $l] ?? null);
				#src/verb/eval/Tess.hx:578: characters 17-74
				$this->corners[$i]->normal = ($v1->degen ? $v2->normal : $v1->normal);
			}
		}
	}

	/**
	 * @param int $edgeIndex
	 * 
	 * @return \Array_hx
	 */
	public function getAllCorners ($edgeIndex) {
		#src/verb/eval/Tess.hx:515: characters 9-51
		$baseArr = \Array_hx::wrap([($this->corners->arr[$edgeIndex] ?? null)]);
		#src/verb/eval/Tess.hx:517: lines 517-519
		if (($this->neighbors->arr[$edgeIndex] ?? null) === null) {
			#src/verb/eval/Tess.hx:518: characters 13-27
			return $baseArr;
		}
		#src/verb/eval/Tess.hx:522: characters 9-89
		$corners = ($this->neighbors->arr[$edgeIndex] ?? null)->getEdgeCorners(($edgeIndex + 2) % 4);
		#src/verb/eval/Tess.hx:524: characters 9-39
		$funcIndex = $edgeIndex % 2;
		#src/verb/eval/Tess.hx:526: characters 9-45
		$e = Constants::$EPSILON;
		#src/verb/eval/Tess.hx:527: characters 9-25
		$that = $this;
		#src/verb/eval/Tess.hx:530: lines 530-533
		$rangeFuncMap = \Array_hx::wrap([
			function ($c) use (&$that, &$e) {
				#src/verb/eval/Tess.hx:531: characters 43-117
				if (($c->uv->arr[0] ?? null) > ((($that->corners->arr[0] ?? null)->uv->arr[0] ?? null) + $e)) {
					#src/verb/eval/Tess.hx:531: characters 82-117
					return ($c->uv->arr[0] ?? null) < ((($that->corners->arr[2] ?? null)->uv->arr[0] ?? null) - $e);
				} else {
					#src/verb/eval/Tess.hx:531: characters 43-117
					return false;
				}
			},
			function ($c) use (&$that, &$e) {
				#src/verb/eval/Tess.hx:532: characters 43-117
				if (($c->uv->arr[1] ?? null) > ((($that->corners->arr[0] ?? null)->uv->arr[1] ?? null) + $e)) {
					#src/verb/eval/Tess.hx:532: characters 82-117
					return ($c->uv->arr[1] ?? null) < ((($that->corners->arr[2] ?? null)->uv->arr[1] ?? null) - $e);
				} else {
					#src/verb/eval/Tess.hx:532: characters 43-117
					return false;
				}
			},
		]);
		#src/verb/eval/Tess.hx:536: characters 26-69
		$f = ($rangeFuncMap->arr[$funcIndex] ?? null);
		$result = [];
		$data = $corners->arr;
		$_g_current = 0;
		$_g_length = \count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			if ($f($item)) {
				$result[] = $item;
			}
		}
		#src/verb/eval/Tess.hx:536: characters 9-70
		$cornercopy = \Array_hx::wrap($result);
		#src/verb/eval/Tess.hx:537: characters 9-29
		$cornercopy->arr = \array_reverse($cornercopy->arr);
		#src/verb/eval/Tess.hx:538: characters 9-44
		return $baseArr->concat($cornercopy);
	}

	/**
	 * @param int $edgeIndex
	 * 
	 * @return \Array_hx
	 */
	public function getEdgeCorners ($edgeIndex) {
		#src/verb/eval/Tess.hx:481: characters 9-66
		if ($this->isLeaf()) {
			#src/verb/eval/Tess.hx:481: characters 30-66
			return \Array_hx::wrap([($this->corners->arr[$edgeIndex] ?? null)]);
		}
		#src/verb/eval/Tess.hx:483: lines 483-496
		if ($this->horizontal) {
			#src/verb/eval/Tess.hx:485: lines 485-494
			if ($edgeIndex === 0) {
				#src/verb/eval/Tess.hx:487: characters 21-64
				return ($this->children->arr[0] ?? null)->getEdgeCorners(0);
			} else if ($edgeIndex === 1) {
				#src/verb/eval/Tess.hx:489: characters 21-111
				return ($this->children->arr[0] ?? null)->getEdgeCorners(1)->concat(($this->children->arr[1] ?? null)->getEdgeCorners(1));
			} else if ($edgeIndex === 2) {
				#src/verb/eval/Tess.hx:491: characters 21-64
				return ($this->children->arr[1] ?? null)->getEdgeCorners(2);
			} else if ($edgeIndex === 3) {
				#src/verb/eval/Tess.hx:493: characters 21-111
				return ($this->children->arr[1] ?? null)->getEdgeCorners(3)->concat(($this->children->arr[0] ?? null)->getEdgeCorners(3));
			}
		}
		#src/verb/eval/Tess.hx:499: lines 499-508
		if ($edgeIndex === 0) {
			#src/verb/eval/Tess.hx:501: characters 17-107
			return ($this->children->arr[0] ?? null)->getEdgeCorners(0)->concat(($this->children->arr[1] ?? null)->getEdgeCorners(0));
		} else if ($edgeIndex === 1) {
			#src/verb/eval/Tess.hx:503: characters 17-60
			return ($this->children->arr[1] ?? null)->getEdgeCorners(1);
		} else if ($edgeIndex === 2) {
			#src/verb/eval/Tess.hx:505: characters 17-107
			return ($this->children->arr[1] ?? null)->getEdgeCorners(2)->concat(($this->children->arr[0] ?? null)->getEdgeCorners(2));
		} else if ($edgeIndex === 3) {
			#src/verb/eval/Tess.hx:507: characters 17-60
			return ($this->children->arr[0] ?? null)->getEdgeCorners(3);
		}
		#src/verb/eval/Tess.hx:510: characters 9-20
		return null;
	}

	/**
	 * @return bool
	 */
	public function hasBadNormals () {
		#src/verb/eval/Tess.hx:563: characters 16-112
		if (!(($this->corners->arr[0] ?? null)->degen || ($this->corners->arr[1] ?? null)->degen || ($this->corners->arr[2] ?? null)->degen)) {
			#src/verb/eval/Tess.hx:563: characters 91-112
			return ($this->corners->arr[3] ?? null)->degen;
		} else {
			#src/verb/eval/Tess.hx:563: characters 16-112
			return true;
		}
	}

	/**
	 * @return bool
	 */
	public function isLeaf () {
		#src/verb/eval/Tess.hx:435: characters 9-37
		return $this->children === null;
	}

	/**
	 * @param int $index
	 * 
	 * @return SurfacePoint
	 */
	public function midpoint ($index) {
		#src/verb/eval/Tess.hx:544: characters 9-78
		if ($this->midPoints === null) {
			#src/verb/eval/Tess.hx:544: characters 37-78
			$this->midPoints = \Array_hx::wrap([
				null,
				null,
				null,
				null,
			]);
		}
		#src/verb/eval/Tess.hx:545: characters 9-75
		if (($this->midPoints->arr[$index] ?? null) !== null) {
			#src/verb/eval/Tess.hx:545: characters 47-75
			return ($this->midPoints->arr[$index] ?? null);
		}
		#src/verb/eval/Tess.hx:547: lines 547-556
		if ($index === 0) {
			#src/verb/eval/Tess.hx:549: characters 17-84
			$this->midPoints->offsetSet(0, $this->evalSrf($this->u05, (($this->corners->arr[0] ?? null)->uv->arr[1] ?? null)));
		} else if ($index === 1) {
			#src/verb/eval/Tess.hx:551: characters 17-84
			$this->midPoints->offsetSet(1, $this->evalSrf((($this->corners->arr[1] ?? null)->uv->arr[0] ?? null), $this->v05));
		} else if ($index === 2) {
			#src/verb/eval/Tess.hx:553: characters 17-84
			$this->midPoints->offsetSet(2, $this->evalSrf($this->u05, (($this->corners->arr[2] ?? null)->uv->arr[1] ?? null)));
		} else if ($index === 3) {
			#src/verb/eval/Tess.hx:555: characters 17-84
			$this->midPoints->offsetSet(3, $this->evalSrf((($this->corners->arr[0] ?? null)->uv->arr[0] ?? null), $this->v05));
		}
		#src/verb/eval/Tess.hx:558: characters 9-37
		return ($this->midPoints->arr[$index] ?? null);
	}

	/**
	 * @param AdaptiveRefinementOptions $options
	 * @param int $currentDepth
	 * 
	 * @return bool
	 */
	public function shouldDivide ($options, $currentDepth) {
		#src/verb/eval/Tess.hx:585: characters 9-59
		if ($currentDepth < $options->minDepth) {
			#src/verb/eval/Tess.hx:585: characters 48-59
			return true;
		}
		#src/verb/eval/Tess.hx:586: characters 9-61
		if ($currentDepth >= $options->maxDepth) {
			#src/verb/eval/Tess.hx:586: characters 49-61
			return false;
		}
		#src/verb/eval/Tess.hx:588: lines 588-592
		if ($this->hasBadNormals()) {
			#src/verb/eval/Tess.hx:589: characters 13-30
			$this->fixNormals();
			#src/verb/eval/Tess.hx:591: characters 13-25
			return false;
		}
		#src/verb/eval/Tess.hx:594: lines 594-595
		$this->splitVert = (Vec::normSquared(Vec::sub(($this->corners->arr[0] ?? null)->normal, ($this->corners->arr[1] ?? null)->normal)) > $options->normTol) || (Vec::normSquared(Vec::sub(($this->corners->arr[2] ?? null)->normal, ($this->corners->arr[3] ?? null)->normal)) > $options->normTol);
		#src/verb/eval/Tess.hx:597: lines 597-598
		$this->splitHoriz = (Vec::normSquared(Vec::sub(($this->corners->arr[1] ?? null)->normal, ($this->corners->arr[2] ?? null)->normal)) > $options->normTol) || (Vec::normSquared(Vec::sub(($this->corners->arr[3] ?? null)->normal, ($this->corners->arr[0] ?? null)->normal)) > $options->normTol);
		#src/verb/eval/Tess.hx:600: characters 9-61
		if ($this->splitVert || $this->splitHoriz) {
			#src/verb/eval/Tess.hx:600: characters 50-61
			return true;
		}
		#src/verb/eval/Tess.hx:602: characters 9-36
		$center = $this->center();
		#src/verb/eval/Tess.hx:604: lines 604-607
		if (!((Vec::normSquared(Vec::sub($center->normal, ($this->corners->arr[0] ?? null)->normal)) > $options->normTol) || (Vec::normSquared(Vec::sub($center->normal, ($this->corners->arr[1] ?? null)->normal)) > $options->normTol) || (Vec::normSquared(Vec::sub($center->normal, ($this->corners->arr[2] ?? null)->normal)) > $options->normTol))) {
			#src/verb/eval/Tess.hx:607: characters 9-94
			return Vec::normSquared(Vec::sub($center->normal, ($this->corners->arr[3] ?? null)->normal)) > $options->normTol;
		} else {
			#src/verb/eval/Tess.hx:604: lines 604-607
			return true;
		}
	}

	/**
	 * @param MeshData $mesh
	 * 
	 * @return MeshData
	 */
	public function triangulate ($mesh = null) {
		#src/verb/eval/Tess.hx:672: characters 9-50
		if ($mesh === null) {
			#src/verb/eval/Tess.hx:672: characters 27-50
			$mesh = MeshData::empty();
		}
		#src/verb/eval/Tess.hx:674: characters 9-65
		if ($this->isLeaf()) {
			#src/verb/eval/Tess.hx:674: characters 30-65
			return $this->triangulateLeaf($mesh);
		}
		#src/verb/eval/Tess.hx:677: lines 677-680
		$_g = 0;
		$_g1 = $this->children;
		while ($_g < $_g1->length) {
			#src/verb/eval/Tess.hx:677: characters 14-15
			$x = ($_g1->arr[$_g] ?? null);
			#src/verb/eval/Tess.hx:677: lines 677-680
			++$_g;
			#src/verb/eval/Tess.hx:678: characters 13-33
			if ($x === null) {
				#src/verb/eval/Tess.hx:678: characters 28-33
				break;
			}
			#src/verb/eval/Tess.hx:679: characters 13-34
			$x->triangulate($mesh);
		}
		#src/verb/eval/Tess.hx:682: characters 9-20
		return $mesh;
	}

	/**
	 * @param MeshData $mesh
	 * 
	 * @return MeshData
	 */
	public function triangulateLeaf ($mesh) {
		#src/verb/eval/Tess.hx:687: lines 687-690
		$baseIndex = $mesh->points->length;
		$uvs = new \Array_hx();
		$ids = new \Array_hx();
		$splitid = 0;
		#src/verb/eval/Tess.hx:695: characters 13-53
		$edgeCorners = $this->getAllCorners(0);
		#src/verb/eval/Tess.hx:698: characters 13-58
		if ($edgeCorners->length === 2) {
			#src/verb/eval/Tess.hx:698: characters 43-58
			$splitid = 1;
		}
		#src/verb/eval/Tess.hx:700: characters 23-27
		$_g = 0;
		#src/verb/eval/Tess.hx:700: characters 27-45
		$_g1 = $edgeCorners->length;
		#src/verb/eval/Tess.hx:700: lines 700-702
		while ($_g < $_g1) {
			#src/verb/eval/Tess.hx:700: characters 23-45
			$j = $_g++;
			#src/verb/eval/Tess.hx:701: characters 26-40
			$edgeCorners1 = ($edgeCorners->arr[$j] ?? null);
			#src/verb/eval/Tess.hx:701: characters 17-41
			$uvs->arr[$uvs->length++] = $edgeCorners1;
		}
		#src/verb/eval/Tess.hx:695: characters 13-53
		$edgeCorners = $this->getAllCorners(1);
		#src/verb/eval/Tess.hx:698: characters 13-58
		if ($edgeCorners->length === 2) {
			#src/verb/eval/Tess.hx:698: characters 43-58
			$splitid = 2;
		}
		#src/verb/eval/Tess.hx:700: characters 23-27
		$_g = 0;
		#src/verb/eval/Tess.hx:700: characters 27-45
		$_g1 = $edgeCorners->length;
		#src/verb/eval/Tess.hx:700: lines 700-702
		while ($_g < $_g1) {
			#src/verb/eval/Tess.hx:700: characters 23-45
			$j = $_g++;
			#src/verb/eval/Tess.hx:701: characters 26-40
			$edgeCorners1 = ($edgeCorners->arr[$j] ?? null);
			#src/verb/eval/Tess.hx:701: characters 17-41
			$uvs->arr[$uvs->length++] = $edgeCorners1;
		}
		#src/verb/eval/Tess.hx:695: characters 13-53
		$edgeCorners = $this->getAllCorners(2);
		#src/verb/eval/Tess.hx:698: characters 13-58
		if ($edgeCorners->length === 2) {
			#src/verb/eval/Tess.hx:698: characters 43-58
			$splitid = 3;
		}
		#src/verb/eval/Tess.hx:700: characters 23-27
		$_g = 0;
		#src/verb/eval/Tess.hx:700: characters 27-45
		$_g1 = $edgeCorners->length;
		#src/verb/eval/Tess.hx:700: lines 700-702
		while ($_g < $_g1) {
			#src/verb/eval/Tess.hx:700: characters 23-45
			$j = $_g++;
			#src/verb/eval/Tess.hx:701: characters 26-40
			$edgeCorners1 = ($edgeCorners->arr[$j] ?? null);
			#src/verb/eval/Tess.hx:701: characters 17-41
			$uvs->arr[$uvs->length++] = $edgeCorners1;
		}
		#src/verb/eval/Tess.hx:695: characters 13-53
		$edgeCorners = $this->getAllCorners(3);
		#src/verb/eval/Tess.hx:698: characters 13-58
		if ($edgeCorners->length === 2) {
			#src/verb/eval/Tess.hx:698: characters 43-58
			$splitid = 4;
		}
		#src/verb/eval/Tess.hx:700: characters 23-27
		$_g = 0;
		#src/verb/eval/Tess.hx:700: characters 27-45
		$_g1 = $edgeCorners->length;
		#src/verb/eval/Tess.hx:700: lines 700-702
		while ($_g < $_g1) {
			#src/verb/eval/Tess.hx:700: characters 23-45
			$j = $_g++;
			#src/verb/eval/Tess.hx:701: characters 26-40
			$edgeCorners1 = ($edgeCorners->arr[$j] ?? null);
			#src/verb/eval/Tess.hx:701: characters 17-41
			$uvs->arr[$uvs->length++] = $edgeCorners1;
		}
		#src/verb/eval/Tess.hx:705: lines 705-721
		$_g = 0;
		while ($_g < $uvs->length) {
			#src/verb/eval/Tess.hx:705: characters 14-20
			$corner = ($uvs->arr[$_g] ?? null);
			#src/verb/eval/Tess.hx:705: lines 705-721
			++$_g;
			#src/verb/eval/Tess.hx:708: lines 708-711
			if ($corner->id !== -1) {
				#src/verb/eval/Tess.hx:709: characters 17-36
				$ids->arr[$ids->length++] = $corner->id;
				#src/verb/eval/Tess.hx:710: characters 17-25
				continue;
			}
			#src/verb/eval/Tess.hx:713: characters 13-39
			$_this = $mesh->uvs;
			$_this->arr[$_this->length++] = $corner->uv;
			#src/verb/eval/Tess.hx:714: characters 13-45
			$_this1 = $mesh->points;
			$_this1->arr[$_this1->length++] = $corner->point;
			#src/verb/eval/Tess.hx:715: characters 13-47
			$_this2 = $mesh->normals;
			$_this2->arr[$_this2->length++] = $corner->normal;
			#src/verb/eval/Tess.hx:717: characters 13-34
			$corner->id = $baseIndex;
			#src/verb/eval/Tess.hx:718: characters 13-34
			$ids->arr[$ids->length++] = $baseIndex;
			#src/verb/eval/Tess.hx:720: characters 13-24
			++$baseIndex;
		}
		#src/verb/eval/Tess.hx:723: lines 723-745
		if ($uvs->length === 4) {
			#src/verb/eval/Tess.hx:727: characters 13-58
			$_this = $mesh->faces;
			#src/verb/eval/Tess.hx:727: characters 32-38
			$ids1 = ($ids->arr[0] ?? null);
			#src/verb/eval/Tess.hx:727: characters 40-46
			$ids2 = ($ids->arr[3] ?? null);
			#src/verb/eval/Tess.hx:727: characters 48-54
			$ids3 = ($ids->arr[1] ?? null);
			#src/verb/eval/Tess.hx:727: characters 13-58
			$_this->arr[$_this->length++] = \Array_hx::wrap([
				$ids1,
				$ids2,
				$ids3,
			]);
			#src/verb/eval/Tess.hx:728: characters 13-58
			$_this = $mesh->faces;
			#src/verb/eval/Tess.hx:728: characters 32-38
			$ids1 = ($ids->arr[3] ?? null);
			#src/verb/eval/Tess.hx:728: characters 40-46
			$ids2 = ($ids->arr[2] ?? null);
			#src/verb/eval/Tess.hx:728: characters 48-54
			$ids3 = ($ids->arr[1] ?? null);
			#src/verb/eval/Tess.hx:728: characters 13-58
			$_this->arr[$_this->length++] = \Array_hx::wrap([
				$ids1,
				$ids2,
				$ids3,
			]);
			#src/verb/eval/Tess.hx:731: characters 13-24
			return $mesh;
		} else if ($uvs->length === 5) {
			#src/verb/eval/Tess.hx:736: characters 13-33
			$il = $ids->length;
			#src/verb/eval/Tess.hx:739: characters 13-104
			$_this = $mesh->faces;
			#src/verb/eval/Tess.hx:739: characters 32-46
			$ids1 = ($ids->arr[$splitid] ?? null);
			#src/verb/eval/Tess.hx:739: characters 48-73
			$ids2 = ($ids->arr[($splitid + 2) % $il] ?? null);
			#src/verb/eval/Tess.hx:739: characters 75-100
			$ids3 = ($ids->arr[($splitid + 1) % $il] ?? null);
			#src/verb/eval/Tess.hx:739: characters 13-104
			$_this->arr[$_this->length++] = \Array_hx::wrap([
				$ids1,
				$ids2,
				$ids3,
			]);
			#src/verb/eval/Tess.hx:740: characters 13-105
			$_this = $mesh->faces;
			#src/verb/eval/Tess.hx:740: characters 32-57
			$ids1 = ($ids->arr[($splitid + 4) % $il] ?? null);
			#src/verb/eval/Tess.hx:740: characters 60-85
			$ids2 = ($ids->arr[($splitid + 3) % $il] ?? null);
			#src/verb/eval/Tess.hx:740: characters 87-101
			$ids3 = ($ids->arr[$splitid] ?? null);
			#src/verb/eval/Tess.hx:740: characters 13-105
			$_this->arr[$_this->length++] = \Array_hx::wrap([
				$ids1,
				$ids2,
				$ids3,
			]);
			#src/verb/eval/Tess.hx:741: characters 13-102
			$_this = $mesh->faces;
			#src/verb/eval/Tess.hx:741: characters 32-46
			$ids1 = ($ids->arr[$splitid] ?? null);
			#src/verb/eval/Tess.hx:741: characters 48-73
			$ids2 = ($ids->arr[($splitid + 3) % $il] ?? null);
			#src/verb/eval/Tess.hx:741: characters 74-99
			$ids3 = ($ids->arr[($splitid + 2) % $il] ?? null);
			#src/verb/eval/Tess.hx:741: characters 13-102
			$_this->arr[$_this->length++] = \Array_hx::wrap([
				$ids1,
				$ids2,
				$ids3,
			]);
			#src/verb/eval/Tess.hx:743: characters 13-24
			return $mesh;
		}
		#src/verb/eval/Tess.hx:748: characters 9-36
		$center = $this->center();
		#src/verb/eval/Tess.hx:750: characters 9-35
		$_this = $mesh->uvs;
		$_this->arr[$_this->length++] = $center->uv;
		#src/verb/eval/Tess.hx:751: characters 9-41
		$_this = $mesh->points;
		$_this->arr[$_this->length++] = $center->point;
		#src/verb/eval/Tess.hx:752: characters 9-43
		$_this = $mesh->normals;
		$_this->arr[$_this->length++] = $center->normal;
		#src/verb/eval/Tess.hx:755: characters 9-50
		$centerIndex = $mesh->points->length - 1;
		#src/verb/eval/Tess.hx:758: characters 9-19
		$i = 0;
		#src/verb/eval/Tess.hx:759: characters 9-32
		$j = $uvs->length - 1;
		#src/verb/eval/Tess.hx:760: lines 760-763
		while ($i < $uvs->length) {
			#src/verb/eval/Tess.hx:761: characters 13-63
			$_this = $mesh->faces;
			#src/verb/eval/Tess.hx:761: characters 45-51
			$ids1 = ($ids->arr[$i] ?? null);
			#src/verb/eval/Tess.hx:761: characters 53-59
			$ids2 = ($ids->arr[$j] ?? null);
			#src/verb/eval/Tess.hx:761: characters 13-63
			$_this->arr[$_this->length++] = \Array_hx::wrap([
				$centerIndex,
				$ids1,
				$ids2,
			]);
			#src/verb/eval/Tess.hx:762: characters 17-20
			++$i;
			$j = $i - 1;
		}
		#src/verb/eval/Tess.hx:765: characters 9-20
		return $mesh;
	}
}

Boot::registerClass(AdaptiveRefinementNode::class, 'verb.eval.AdaptiveRefinementNode');
