<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace verb\eval_hx;

use \verb\core\NurbsSurfaceData;
use \php\Boot;
use \haxe\Exception;
use \verb\core\Constants;
use \verb\core\NurbsCurveData;
use \verb\core\ArrayExtensions;

class Check {
	/**
	 * @param \Array_hx $vec
	 * 
	 * @return bool
	 */
	public static function isNonDecreasing ($vec) {
		#src/verb/eval/Check.hx:68: characters 9-31
		$rep = ArrayExtensions::first($vec);
		#src/verb/eval/Check.hx:69: characters 20-24
		$_g = 0;
		#src/verb/eval/Check.hx:69: characters 24-34
		$_g1 = $vec->length;
		#src/verb/eval/Check.hx:69: lines 69-72
		while ($_g < $_g1) {
			#src/verb/eval/Check.hx:69: characters 20-34
			$i = $_g++;
			#src/verb/eval/Check.hx:70: characters 13-64
			if (($vec->arr[$i] ?? null) < ($rep - Constants::$EPSILON)) {
				#src/verb/eval/Check.hx:70: characters 52-64
				return false;
			}
			#src/verb/eval/Check.hx:71: characters 13-25
			$rep = ($vec->arr[$i] ?? null);
		}
		#src/verb/eval/Check.hx:73: characters 9-20
		return true;
	}

	/**
	 * @param \Array_hx $vec
	 * @param int $degree
	 * 
	 * @return bool
	 */
	public static function isValidKnotVector ($vec, $degree) {
		#src/verb/eval/Check.hx:38: characters 9-42
		if ($vec->length === 0) {
			#src/verb/eval/Check.hx:38: characters 30-42
			return false;
		}
		#src/verb/eval/Check.hx:39: characters 9-57
		if ($vec->length < (($degree + 1) * 2)) {
			#src/verb/eval/Check.hx:39: characters 45-57
			return false;
		}
		#src/verb/eval/Check.hx:41: characters 9-31
		$rep = ArrayExtensions::first($vec);
		#src/verb/eval/Check.hx:43: characters 19-23
		$_g = 0;
		#src/verb/eval/Check.hx:43: characters 23-31
		$_g1 = $degree + 1;
		#src/verb/eval/Check.hx:43: lines 43-45
		while ($_g < $_g1) {
			#src/verb/eval/Check.hx:43: characters 19-31
			$i = $_g++;
			#src/verb/eval/Check.hx:44: characters 13-71
			if (\abs(($vec->arr[$i] ?? null) - $rep) > Constants::$EPSILON) {
				#src/verb/eval/Check.hx:44: characters 59-71
				return false;
			}
		}
		#src/verb/eval/Check.hx:47: characters 9-25
		$rep = ArrayExtensions::last($vec);
		#src/verb/eval/Check.hx:49: characters 19-41
		$_g = $vec->length - $degree - 1;
		#src/verb/eval/Check.hx:49: characters 41-51
		$_g1 = $vec->length;
		#src/verb/eval/Check.hx:49: lines 49-51
		while ($_g < $_g1) {
			#src/verb/eval/Check.hx:49: characters 19-51
			$i = $_g++;
			#src/verb/eval/Check.hx:50: characters 13-71
			if (\abs(($vec->arr[$i] ?? null) - $rep) > Constants::$EPSILON) {
				#src/verb/eval/Check.hx:50: characters 59-71
				return false;
			}
		}
		#src/verb/eval/Check.hx:53: characters 9-38
		return Check::isNonDecreasing($vec);
	}

	/**
	 * @param NurbsCurveData $data
	 * 
	 * @return NurbsCurveData
	 */
	public static function isValidNurbsCurveData ($data) {
		#src/verb/eval/Check.hx:87: characters 9-48
		if ($data->controlPoints === null) {
			#src/verb/eval/Check.hx:87: characters 43-48
			throw Exception::thrown("Control points array cannot be null!");
		}
		#src/verb/eval/Check.hx:89: characters 13-45
		if ($data->degree === null) {
			#src/verb/eval/Check.hx:89: characters 40-45
			throw Exception::thrown("Degree cannot be null!");
		}
		#src/verb/eval/Check.hx:91: characters 9-37
		if ($data->degree < 1) {
			#src/verb/eval/Check.hx:91: characters 32-37
			throw Exception::thrown("Degree must be greater than 1!");
		}
		#src/verb/eval/Check.hx:92: characters 9-40
		if ($data->knots === null) {
			#src/verb/eval/Check.hx:92: characters 35-40
			throw Exception::thrown("Knots cannot be null!");
		}
		#src/verb/eval/Check.hx:94: lines 94-96
		if ($data->knots->length !== ($data->controlPoints->length + $data->degree + 1)) {
			#src/verb/eval/Check.hx:95: characters 13-18
			throw Exception::thrown("controlPoints.length + degree + 1 must equal knots.length!");
		}
		#src/verb/eval/Check.hx:98: lines 98-100
		if (!Check::isValidKnotVector($data->knots, $data->degree)) {
			#src/verb/eval/Check.hx:99: characters 13-18
			throw Exception::thrown("Invalid knot vector format!  Should begin with degree + 1 repeats and end with degree + 1 repeats!");
		}
		#src/verb/eval/Check.hx:102: characters 9-20
		return $data;
	}

	/**
	 * @param NurbsSurfaceData $data
	 * 
	 * @return NurbsSurfaceData
	 */
	public static function isValidNurbsSurfaceData ($data) {
		#src/verb/eval/Check.hx:116: characters 9-48
		if ($data->controlPoints === null) {
			#src/verb/eval/Check.hx:116: characters 43-48
			throw Exception::thrown("Control points array cannot be null!");
		}
		#src/verb/eval/Check.hx:118: characters 13-46
		if ($data->degreeU === null) {
			#src/verb/eval/Check.hx:118: characters 41-46
			throw Exception::thrown("DegreeU cannot be null!");
		}
		#src/verb/eval/Check.hx:119: characters 13-46
		if ($data->degreeV === null) {
			#src/verb/eval/Check.hx:119: characters 41-46
			throw Exception::thrown("DegreeV cannot be null!");
		}
		#src/verb/eval/Check.hx:121: characters 9-38
		if ($data->degreeU < 1) {
			#src/verb/eval/Check.hx:121: characters 33-38
			throw Exception::thrown("DegreeU must be greater than 1!");
		}
		#src/verb/eval/Check.hx:122: characters 9-38
		if ($data->degreeV < 1) {
			#src/verb/eval/Check.hx:122: characters 33-38
			throw Exception::thrown("DegreeV must be greater than 1!");
		}
		#src/verb/eval/Check.hx:123: characters 9-41
		if ($data->knotsU === null) {
			#src/verb/eval/Check.hx:123: characters 36-41
			throw Exception::thrown("KnotsU cannot be null!");
		}
		#src/verb/eval/Check.hx:124: characters 9-41
		if ($data->knotsV === null) {
			#src/verb/eval/Check.hx:124: characters 36-41
			throw Exception::thrown("KnotsV cannot be null!");
		}
		#src/verb/eval/Check.hx:126: lines 126-128
		if ($data->knotsU->length !== ($data->controlPoints->length + $data->degreeU + 1)) {
			#src/verb/eval/Check.hx:127: characters 13-18
			throw Exception::thrown("controlPointsU.length + degreeU + 1 must equal knotsU.length!");
		}
		#src/verb/eval/Check.hx:130: lines 130-132
		if ($data->knotsV->length !== (($data->controlPoints->arr[0] ?? null)->length + $data->degreeV + 1)) {
			#src/verb/eval/Check.hx:131: characters 13-18
			throw Exception::thrown("controlPointsV.length + degreeV + 1 must equal knotsV.length!");
		}
		#src/verb/eval/Check.hx:134: lines 134-136
		if (!Check::isValidKnotVector($data->knotsU, $data->degreeU) || !Check::isValidKnotVector($data->knotsV, $data->degreeV)) {
			#src/verb/eval/Check.hx:135: characters 13-18
			throw Exception::thrown("Invalid knot vector format!  Should begin with degree + 1 repeats and end with degree + 1 repeats!");
		}
		#src/verb/eval/Check.hx:138: characters 9-20
		return $data;
	}
}

Boot::registerClass(Check::class, 'verb.eval.Check');
