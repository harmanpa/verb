<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace verb\eval_hx;

use \verb\core\NurbsSurfaceData;
use \verb\core\Pair;
use \php\Boot;
use \haxe\Exception;
use \verb\core\Constants;
use \verb\core\VolumeData;
use \verb\core\Binomial;
use \verb\core\Vec;
use \verb\core\NurbsCurveData;
use \verb\core\ArrayExtensions;

class Eval_hx {
	/**
	 * @param int $degree
	 * @param int $num_controlPoints
	 * @param int $knots_length
	 * 
	 * @return bool
	 */
	public static function areValidRelations ($degree, $num_controlPoints, $knots_length) {
		#src/verb/eval/Eval.hx:806: characters 9-66
		return ($num_controlPoints + $degree + 1 - $knots_length) === 0;
	}

	/**
	 * @param float $u
	 * @param int $degree
	 * @param \Array_hx $knots
	 * 
	 * @return \Array_hx
	 */
	public static function basisFunctions ($u, $degree, $knots) {
		#src/verb/eval/Eval.hx:1087: characters 9-57
		$knotSpan_index = Eval_hx::knotSpan($degree, $u, $knots);
		#src/verb/eval/Eval.hx:1088: characters 9-84
		return Eval_hx::basisFunctionsGivenKnotSpanIndex($knotSpan_index, $u, $degree, $knots);
	}

	/**
	 * @param int $knotSpan_index
	 * @param float $u
	 * @param int $degree
	 * @param \Array_hx $knots
	 * 
	 * @return \Array_hx
	 */
	public static function basisFunctionsGivenKnotSpanIndex ($knotSpan_index, $u, $degree, $knots) {
		#src/verb/eval/Eval.hx:1111: characters 9-56
		$basisFunctions = Vec::zeros1d($degree + 1);
		#src/verb/eval/Eval.hx:1112: characters 9-46
		$left = Vec::zeros1d($degree + 1);
		#src/verb/eval/Eval.hx:1113: characters 9-47
		$right = Vec::zeros1d($degree + 1);
		#src/verb/eval/Eval.hx:1114: characters 9-31
		$saved = 0;
		#src/verb/eval/Eval.hx:1115: characters 9-30
		$temp = 0;
		#src/verb/eval/Eval.hx:1117: characters 9-32
		$basisFunctions->offsetSet(0, 1.0);
		#src/verb/eval/Eval.hx:1119: characters 19-23
		$_g = 1;
		#src/verb/eval/Eval.hx:1119: characters 23-31
		$_g1 = $degree + 1;
		#src/verb/eval/Eval.hx:1119: lines 1119-1131
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:1119: characters 19-31
			$j = $_g++;
			#src/verb/eval/Eval.hx:1120: characters 13-52
			$left->offsetSet($j, $u - ($knots->arr[$knotSpan_index + 1 - $j] ?? null));
			#src/verb/eval/Eval.hx:1121: characters 13-51
			$right->offsetSet($j, ($knots->arr[$knotSpan_index + $j] ?? null) - $u);
			#src/verb/eval/Eval.hx:1122: characters 13-24
			$saved = 0.0;
			#src/verb/eval/Eval.hx:1124: characters 23-27
			$_g2 = 0;
			#src/verb/eval/Eval.hx:1124: characters 27-28
			$_g3 = $j;
			#src/verb/eval/Eval.hx:1124: lines 1124-1128
			while ($_g2 < $_g3) {
				#src/verb/eval/Eval.hx:1124: characters 23-28
				$r = $_g2++;
				#src/verb/eval/Eval.hx:1125: characters 17-70
				$temp = ($basisFunctions->arr[$r] ?? null) / (($right->arr[$r + 1] ?? null) + ($left->arr[$j - $r] ?? null));
				#src/verb/eval/Eval.hx:1126: characters 17-60
				$basisFunctions->offsetSet($r, $saved + ($right->arr[$r + 1] ?? null) * $temp);
				#src/verb/eval/Eval.hx:1127: characters 17-39
				$saved = ($left->arr[$j - $r] ?? null) * $temp;
			}
			#src/verb/eval/Eval.hx:1130: characters 13-38
			$basisFunctions->offsetSet($j, $saved);
		}
		#src/verb/eval/Eval.hx:1133: characters 9-30
		return $basisFunctions;
	}

	/**
	 * @param NurbsCurveData $crv
	 * @param float $u
	 * @param int $numDerivs
	 * 
	 * @return \Array_hx
	 */
	public static function curveDerivatives ($crv, $u, $numDerivs) {
		#src/verb/eval/Eval.hx:732: characters 9-51
		$n = $crv->knots->length - $crv->degree - 2;
		#src/verb/eval/Eval.hx:733: characters 9-61
		return Eval_hx::curveDerivativesGivenN($n, $crv, $u, $numDerivs);
	}

	/**
	 * @param int $n
	 * @param NurbsCurveData $curve
	 * @param float $u
	 * @param int $numDerivs
	 * 
	 * @return \Array_hx
	 */
	public static function curveDerivativesGivenN ($n, $curve, $u, $numDerivs) {
		#src/verb/eval/Eval.hx:752: lines 752-754
		$degree = $curve->degree;
		$controlPoints = $curve->controlPoints;
		$knots = $curve->knots;
		#src/verb/eval/Eval.hx:756: lines 756-758
		if (!Eval_hx::areValidRelations($degree, $controlPoints->length, $knots->length)) {
			#src/verb/eval/Eval.hx:757: characters 13-18
			throw Exception::thrown("Invalid relations between control points, knot vector, and n");
		}
		#src/verb/eval/Eval.hx:760: lines 760-766
		$dim = ($controlPoints->arr[0] ?? null)->length;
		$du = ($numDerivs < $degree ? $numDerivs : $degree);
		$CK = Vec::zeros2d($numDerivs + 1, $dim);
		$knotSpan_index = Eval_hx::knotSpanGivenN($n, $degree, $u, $knots);
		$nders = Eval_hx::derivativeBasisFunctionsGivenNI($knotSpan_index, $u, $degree, $du, $knots);
		$k = 0;
		$j = 0;
		#src/verb/eval/Eval.hx:768: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:768: characters 23-27
		$_g1 = $du + 1;
		#src/verb/eval/Eval.hx:768: lines 768-772
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:768: characters 19-27
			$k = $_g++;
			#src/verb/eval/Eval.hx:769: characters 23-27
			$_g2 = 0;
			#src/verb/eval/Eval.hx:769: characters 27-35
			$_g3 = $degree + 1;
			#src/verb/eval/Eval.hx:769: lines 769-771
			while ($_g2 < $_g3) {
				#src/verb/eval/Eval.hx:769: characters 23-35
				$j = $_g2++;
				#src/verb/eval/Eval.hx:770: characters 17-101
				Vec::addMulMutate(($CK->arr[$k] ?? null), (($nders->arr[$k] ?? null)->arr[$j] ?? null), ($controlPoints->arr[$knotSpan_index - $degree + $j] ?? null));
			}
		}
		#src/verb/eval/Eval.hx:773: characters 9-18
		return $CK;
	}

	/**
	 * @param NurbsCurveData $curve
	 * @param float $u
	 * 
	 * @return \Array_hx
	 */
	public static function curvePoint ($curve, $u) {
		#src/verb/eval/Eval.hx:788: characters 9-55
		$n = $curve->knots->length - $curve->degree - 2;
		#src/verb/eval/Eval.hx:789: characters 9-46
		return Eval_hx::curvePointGivenN($n, $curve, $u);
	}

	/**
	 * @param int $n
	 * @param NurbsCurveData $curve
	 * @param float $u
	 * 
	 * @return \Array_hx
	 */
	public static function curvePointGivenN ($n, $curve, $u) {
		#src/verb/eval/Eval.hx:824: lines 824-826
		$degree = $curve->degree;
		$controlPoints = $curve->controlPoints;
		$knots = $curve->knots;
		#src/verb/eval/Eval.hx:828: lines 828-831
		if (!Eval_hx::areValidRelations($degree, $controlPoints->length, $knots->length)) {
			#src/verb/eval/Eval.hx:829: characters 13-18
			throw Exception::thrown("Invalid relations between control points, knot Array, and n");
		}
		#src/verb/eval/Eval.hx:833: characters 9-68
		$knotSpan_index = Eval_hx::knotSpanGivenN($n, $degree, $u, $knots);
		#src/verb/eval/Eval.hx:834: characters 9-97
		$basis_values = Eval_hx::basisFunctionsGivenKnotSpanIndex($knotSpan_index, $u, $degree, $knots);
		#src/verb/eval/Eval.hx:835: characters 9-63
		$position = Vec::zeros1d(($controlPoints->arr[0] ?? null)->length);
		#src/verb/eval/Eval.hx:837: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:837: characters 23-31
		$_g1 = $degree + 1;
		#src/verb/eval/Eval.hx:837: lines 837-839
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:837: characters 19-31
			$j = $_g++;
			#src/verb/eval/Eval.hx:838: characters 13-104
			Vec::addMulMutate($position, ($basis_values->arr[$j] ?? null), ($controlPoints->arr[$knotSpan_index - $degree + $j] ?? null));
		}
		#src/verb/eval/Eval.hx:841: characters 9-24
		return $position;
	}

	/**
	 * @param NurbsCurveData $crv
	 * @param int $divs
	 * 
	 * @return \Array_hx
	 */
	public static function curveRegularSamplePoints ($crv, $divs) {
		#src/verb/eval/Eval.hx:354: characters 9-72
		$derivs = Eval_hx::curveDerivatives($crv, ($crv->knots->arr[0] ?? null), $crv->degree);
		#src/verb/eval/Eval.hx:358: characters 9-28
		$t = 1.0 / $divs;
		#src/verb/eval/Eval.hx:359: characters 9-26
		$temp = $t * $t;
		#src/verb/eval/Eval.hx:361: characters 9-27
		$f = ($derivs->arr[0] ?? null);
		#src/verb/eval/Eval.hx:362: characters 9-41
		$fd = Vec::mul($t, ($derivs->arr[1] ?? null));
		#src/verb/eval/Eval.hx:363: characters 9-57
		$fdd_per2 = Vec::mul($temp * 0.5, ($derivs->arr[2] ?? null));
		#src/verb/eval/Eval.hx:364: characters 9-62
		$fddd_per2 = Vec::mul($temp * $t * 0.5, ($derivs->arr[3] ?? null));
		#src/verb/eval/Eval.hx:366: characters 9-49
		$fdd = Vec::add($fdd_per2, $fdd_per2);
		#src/verb/eval/Eval.hx:367: characters 9-52
		$fddd = Vec::add($fddd_per2, $fddd_per2);
		#src/verb/eval/Eval.hx:368: characters 9-51
		$fddd_per6 = Vec::mul(0.33333333333333331, $fddd_per2);
		#src/verb/eval/Eval.hx:371: characters 9-22
		$pts = new \Array_hx();
		#src/verb/eval/Eval.hx:373: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:373: characters 23-29
		$_g1 = $divs + 1;
		#src/verb/eval/Eval.hx:373: lines 373-381
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:373: characters 19-29
			$i = $_g++;
			#src/verb/eval/Eval.hx:375: characters 13-38
			$x = Eval_hx::dehomogenize($f);
			$pts->arr[$pts->length++] = $x;
			#src/verb/eval/Eval.hx:377: characters 13-61
			Vec::addAllMutate(\Array_hx::wrap([
				$f,
				$fd,
				$fdd_per2,
				$fddd_per6,
			]));
			#src/verb/eval/Eval.hx:378: characters 13-53
			Vec::addAllMutate(\Array_hx::wrap([
				$fd,
				$fdd,
				$fddd_per2,
			]));
			#src/verb/eval/Eval.hx:379: characters 13-44
			Vec::addAllMutate(\Array_hx::wrap([
				$fdd,
				$fddd,
			]));
			#src/verb/eval/Eval.hx:380: characters 13-54
			Vec::addAllMutate(\Array_hx::wrap([
				$fdd_per2,
				$fddd_per2,
			]));
		}
		#src/verb/eval/Eval.hx:383: characters 9-19
		return $pts;
	}

	/**
	 * @param NurbsCurveData $crv
	 * @param int $divs
	 * 
	 * @return \Array_hx
	 */
	public static function curveRegularSamplePoints2 ($crv, $divs) {
		#src/verb/eval/Eval.hx:390: characters 9-72
		$derivs = Eval_hx::curveDerivatives($crv, ($crv->knots->arr[0] ?? null), $crv->degree);
		#src/verb/eval/Eval.hx:394: characters 9-28
		$t = 1.0 / $divs;
		#src/verb/eval/Eval.hx:395: characters 9-26
		$temp = $t * $t;
		#src/verb/eval/Eval.hx:397: characters 9-27
		$f = ($derivs->arr[0] ?? null);
		#src/verb/eval/Eval.hx:398: characters 9-41
		$fd = Vec::mul($t, ($derivs->arr[1] ?? null));
		#src/verb/eval/Eval.hx:399: characters 9-57
		$fdd_per2 = Vec::mul($temp * 0.5, ($derivs->arr[2] ?? null));
		#src/verb/eval/Eval.hx:400: characters 9-62
		$fddd_per2 = Vec::mul($temp * $t * 0.5, ($derivs->arr[3] ?? null));
		#src/verb/eval/Eval.hx:402: characters 9-49
		$fdd = Vec::add($fdd_per2, $fdd_per2);
		#src/verb/eval/Eval.hx:403: characters 9-52
		$fddd = Vec::add($fddd_per2, $fddd_per2);
		#src/verb/eval/Eval.hx:404: characters 9-51
		$fddd_per6 = Vec::mul(0.33333333333333331, $fddd_per2);
		#src/verb/eval/Eval.hx:407: characters 9-22
		$pts = new \Array_hx();
		#src/verb/eval/Eval.hx:409: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:409: characters 23-29
		$_g1 = $divs + 1;
		#src/verb/eval/Eval.hx:409: lines 409-416
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:409: characters 19-29
			$i = $_g++;
			#src/verb/eval/Eval.hx:410: characters 13-38
			$x = Eval_hx::dehomogenize($f);
			$pts->arr[$pts->length++] = $x;
			#src/verb/eval/Eval.hx:412: characters 13-61
			Vec::addAllMutate(\Array_hx::wrap([
				$f,
				$fd,
				$fdd_per2,
				$fddd_per6,
			]));
			#src/verb/eval/Eval.hx:413: characters 13-53
			Vec::addAllMutate(\Array_hx::wrap([
				$fd,
				$fdd,
				$fddd_per2,
			]));
			#src/verb/eval/Eval.hx:414: characters 13-44
			Vec::addAllMutate(\Array_hx::wrap([
				$fdd,
				$fddd,
			]));
			#src/verb/eval/Eval.hx:415: characters 13-54
			Vec::addAllMutate(\Array_hx::wrap([
				$fdd_per2,
				$fddd_per2,
			]));
		}
		#src/verb/eval/Eval.hx:418: characters 9-19
		return $pts;
	}

	/**
	 * @param \Array_hx $homoPoint
	 * 
	 * @return \Array_hx
	 */
	public static function dehomogenize ($homoPoint) {
		#src/verb/eval/Eval.hx:1213: lines 1213-1216
		$dim = $homoPoint->length;
		$point = new \Array_hx();
		$wt = ($homoPoint->arr[$dim - 1] ?? null);
		$l = $homoPoint->length - 1;
		#src/verb/eval/Eval.hx:1218: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:1218: characters 23-24
		$_g1 = $l;
		#src/verb/eval/Eval.hx:1218: lines 1218-1220
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:1218: characters 19-24
			$i = $_g++;
			#src/verb/eval/Eval.hx:1219: characters 25-42
			$tmp = ($homoPoint->arr[$i] ?? null) / $wt;
			#src/verb/eval/Eval.hx:1219: characters 13-44
			$point->arr[$point->length++] = $tmp;
		}
		#src/verb/eval/Eval.hx:1222: characters 9-21
		return $point;
	}

	/**
	 * @param \Array_hx $homoPoints
	 * 
	 * @return \Array_hx
	 */
	public static function dehomogenize1d ($homoPoints) {
		#src/verb/eval/Eval.hx:1298: characters 16-44
		$f = Boot::getStaticClosure(Eval_hx::class, 'dehomogenize');
		$result = [];
		$data = $homoPoints->arr;
		$_g_current = 0;
		$_g_length = \count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			$result[] = $f($item);
		}
		return \Array_hx::wrap($result);
	}

	/**
	 * @param \Array_hx $homoPoints
	 * 
	 * @return \Array_hx
	 */
	public static function dehomogenize2d ($homoPoints) {
		#src/verb/eval/Eval.hx:1312: characters 16-46
		$f = Boot::getStaticClosure(Eval_hx::class, 'dehomogenize1d');
		$result = [];
		$data = $homoPoints->arr;
		$_g_current = 0;
		$_g_length = \count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			$result[] = $f($item);
		}
		return \Array_hx::wrap($result);
	}

	/**
	 * @param float $u
	 * @param int $degree
	 * @param \Array_hx $knots
	 * 
	 * @return \Array_hx
	 */
	public static function derivativeBasisFunctions ($u, $degree, $knots) {
		#src/verb/eval/Eval.hx:951: lines 951-953
		$knotSpan_index = Eval_hx::knotSpan($degree, $u, $knots);
		$m = $knots->length - 1;
		$n = $m - $degree - 1;
		#src/verb/eval/Eval.hx:955: characters 9-86
		return Eval_hx::derivativeBasisFunctionsGivenNI($knotSpan_index, $u, $degree, $n, $knots);
	}

	/**
	 * @param int $knotIndex
	 * @param float $u
	 * @param int $p
	 * @param int $n
	 * @param \Array_hx $knots
	 * 
	 * @return \Array_hx
	 */
	public static function derivativeBasisFunctionsGivenNI ($knotIndex, $u, $p, $n, $knots) {
		#src/verb/eval/Eval.hx:976: lines 976-980
		$ndu = Vec::zeros2d($p + 1, $p + 1);
		$left = Vec::zeros1d($p + 1);
		$right = Vec::zeros1d($p + 1);
		$saved = 0.0;
		$temp = 0.0;
		#src/verb/eval/Eval.hx:982: characters 9-24
		($ndu->arr[0] ?? null)->offsetSet(0, 1.0);
		#src/verb/eval/Eval.hx:984: characters 18-22
		$_g = 1;
		#src/verb/eval/Eval.hx:984: characters 22-25
		$_g1 = $p + 1;
		#src/verb/eval/Eval.hx:984: lines 984-998
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:984: characters 18-25
			$j = $_g++;
			#src/verb/eval/Eval.hx:985: characters 13-47
			$left->offsetSet($j, $u - ($knots->arr[$knotIndex + 1 - $j] ?? null));
			#src/verb/eval/Eval.hx:986: characters 13-46
			$right->offsetSet($j, ($knots->arr[$knotIndex + $j] ?? null) - $u);
			#src/verb/eval/Eval.hx:987: characters 13-24
			$saved = 0.0;
			#src/verb/eval/Eval.hx:989: characters 23-27
			$_g2 = 0;
			#src/verb/eval/Eval.hx:989: characters 27-28
			$_g3 = $j;
			#src/verb/eval/Eval.hx:989: lines 989-996
			while ($_g2 < $_g3) {
				#src/verb/eval/Eval.hx:989: characters 23-28
				$r = $_g2++;
				#src/verb/eval/Eval.hx:990: characters 17-51
				($ndu->arr[$j] ?? null)->offsetSet($r, ($right->arr[$r + 1] ?? null) + ($left->arr[$j - $r] ?? null));
				#src/verb/eval/Eval.hx:991: characters 17-47
				$temp = (($ndu->arr[$r] ?? null)->arr[$j - 1] ?? null) / (($ndu->arr[$j] ?? null)->arr[$r] ?? null);
				#src/verb/eval/Eval.hx:993: characters 17-52
				($ndu->arr[$r] ?? null)->offsetSet($j, $saved + ($right->arr[$r + 1] ?? null) * $temp);
				#src/verb/eval/Eval.hx:994: characters 17-39
				$saved = ($left->arr[$j - $r] ?? null) * $temp;
			}
			#src/verb/eval/Eval.hx:997: characters 13-30
			($ndu->arr[$j] ?? null)->offsetSet($j, $saved);
		}
		#src/verb/eval/Eval.hx:1000: lines 1000-1008
		$ders = Vec::zeros2d($n + 1, $p + 1);
		$a = Vec::zeros2d(2, $p + 1);
		$s1 = 0;
		$s2 = 1;
		$d = 0.0;
		$rk = 0;
		$pk = 0;
		$j1 = 0;
		$j2 = 0;
		#src/verb/eval/Eval.hx:1010: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:1010: characters 23-26
		$_g1 = $p + 1;
		#src/verb/eval/Eval.hx:1010: lines 1010-1012
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:1010: characters 19-26
			$j = $_g++;
			#src/verb/eval/Eval.hx:1011: characters 13-35
			($ders->arr[0] ?? null)->offsetSet($j, (($ndu->arr[$j] ?? null)->arr[$p] ?? null));
		}
		#src/verb/eval/Eval.hx:1014: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:1014: characters 23-26
		$_g1 = $p + 1;
		#src/verb/eval/Eval.hx:1014: lines 1014-1058
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:1014: characters 19-26
			$r = $_g++;
			#src/verb/eval/Eval.hx:1015: characters 13-19
			$s1 = 0;
			#src/verb/eval/Eval.hx:1016: characters 13-19
			$s2 = 1;
			#src/verb/eval/Eval.hx:1017: characters 13-26
			($a->arr[0] ?? null)->offsetSet(0, 1.0);
			#src/verb/eval/Eval.hx:1019: characters 23-27
			$_g2 = 1;
			#src/verb/eval/Eval.hx:1019: characters 27-30
			$_g3 = $n + 1;
			#src/verb/eval/Eval.hx:1019: lines 1019-1057
			while ($_g2 < $_g3) {
				#src/verb/eval/Eval.hx:1019: characters 23-30
				$k = $_g2++;
				#src/verb/eval/Eval.hx:1021: characters 17-24
				$d = 0.0;
				#src/verb/eval/Eval.hx:1022: characters 17-27
				$rk = $r - $k;
				#src/verb/eval/Eval.hx:1023: characters 17-27
				$pk = $p - $k;
				#src/verb/eval/Eval.hx:1025: lines 1025-1028
				if ($r >= $k) {
					#src/verb/eval/Eval.hx:1026: characters 21-56
					($a->arr[$s2] ?? null)->offsetSet(0, (($a->arr[$s1] ?? null)->arr[0] ?? null) / (($ndu->arr[$pk + 1] ?? null)->arr[$rk] ?? null));
					#src/verb/eval/Eval.hx:1027: characters 21-47
					$d = (($a->arr[$s2] ?? null)->arr[0] ?? null) * (($ndu->arr[$rk] ?? null)->arr[$pk] ?? null);
				}
				#src/verb/eval/Eval.hx:1030: lines 1030-1034
				if ($rk >= -1) {
					#src/verb/eval/Eval.hx:1031: characters 21-27
					$j1 = 1;
				} else {
					#src/verb/eval/Eval.hx:1033: characters 21-29
					$j1 = -$rk;
				}
				#src/verb/eval/Eval.hx:1036: lines 1036-1040
				if (($r - 1) <= $pk) {
					#src/verb/eval/Eval.hx:1037: characters 21-29
					$j2 = $k - 1;
				} else {
					#src/verb/eval/Eval.hx:1039: characters 21-31
					$j2 = $p - $r;
				}
				#src/verb/eval/Eval.hx:1042: characters 27-29
				$_g4 = $j1;
				#src/verb/eval/Eval.hx:1042: characters 32-36
				$_g5 = $j2 + 1;
				#src/verb/eval/Eval.hx:1042: lines 1042-1045
				while ($_g4 < $_g5) {
					#src/verb/eval/Eval.hx:1042: characters 27-36
					$j = $_g4++;
					#src/verb/eval/Eval.hx:1043: characters 21-87
					($a->arr[$s2] ?? null)->offsetSet($j, ((($a->arr[$s1] ?? null)->arr[$j] ?? null) - (($a->arr[$s1] ?? null)->arr[$j - 1] ?? null)) / (($ndu->arr[$pk + 1] ?? null)->arr[$rk + $j] ?? null));
					#src/verb/eval/Eval.hx:1044: characters 21-48
					$d += (($a->arr[$s2] ?? null)->arr[$j] ?? null) * (($ndu->arr[$rk + $j] ?? null)->arr[$pk] ?? null);
				}
				#src/verb/eval/Eval.hx:1047: lines 1047-1050
				if ($r <= $pk) {
					#src/verb/eval/Eval.hx:1048: characters 21-56
					($a->arr[$s2] ?? null)->offsetSet($k, -(($a->arr[$s1] ?? null)->arr[$k - 1] ?? null) / (($ndu->arr[$pk + 1] ?? null)->arr[$r] ?? null));
					#src/verb/eval/Eval.hx:1049: characters 21-47
					$d += (($a->arr[$s2] ?? null)->arr[$k] ?? null) * (($ndu->arr[$r] ?? null)->arr[$pk] ?? null);
				}
				#src/verb/eval/Eval.hx:1052: characters 17-31
				($ders->arr[$k] ?? null)->offsetSet($r, $d);
				#src/verb/eval/Eval.hx:1054: characters 17-31
				$temp = $s1;
				#src/verb/eval/Eval.hx:1055: characters 17-24
				$s1 = $s2;
				#src/verb/eval/Eval.hx:1056: characters 17-26
				$s2 = $temp;
			}
		}
		#src/verb/eval/Eval.hx:1060: characters 9-21
		$acc = $p;
		#src/verb/eval/Eval.hx:1061: characters 19-23
		$_g = 1;
		#src/verb/eval/Eval.hx:1061: characters 23-26
		$_g1 = $n + 1;
		#src/verb/eval/Eval.hx:1061: lines 1061-1066
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:1061: characters 19-26
			$k = $_g++;
			#src/verb/eval/Eval.hx:1062: characters 23-27
			$_g2 = 0;
			#src/verb/eval/Eval.hx:1062: characters 27-30
			$_g3 = $p + 1;
			#src/verb/eval/Eval.hx:1062: lines 1062-1064
			while ($_g2 < $_g3) {
				#src/verb/eval/Eval.hx:1062: characters 23-30
				$j = $_g2++;
				#src/verb/eval/Eval.hx:1063: characters 17-34
				$ders[$k][$j] *= $acc;
			}
			#src/verb/eval/Eval.hx:1065: characters 13-25
			$acc *= $p - $k;
		}
		#src/verb/eval/Eval.hx:1068: characters 9-20
		return $ders;
	}

	/**
	 * @param \Array_hx $controlPoints
	 * @param \Array_hx $weights
	 * 
	 * @return \Array_hx
	 */
	public static function homogenize1d ($controlPoints, $weights = null) {
		#src/verb/eval/Eval.hx:1330: lines 1330-1335
		$rows = $controlPoints->length;
		$dim = ($controlPoints->arr[0] ?? null)->length;
		$homo_controlPoints = new \Array_hx();
		$wt = 0.0;
		$ref_pt = new \Array_hx();
		$weights1 = ($weights !== null ? $weights : Vec::fill($controlPoints->length, 1.0));
		#src/verb/eval/Eval.hx:1337: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:1337: characters 23-27
		$_g1 = $rows;
		#src/verb/eval/Eval.hx:1337: lines 1337-1351
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:1337: characters 19-27
			$i = $_g++;
			#src/verb/eval/Eval.hx:1339: characters 13-25
			$pt = new \Array_hx();
			#src/verb/eval/Eval.hx:1340: characters 13-38
			$ref_pt = ($controlPoints->arr[$i] ?? null);
			#src/verb/eval/Eval.hx:1341: characters 13-28
			$wt = ($weights1->arr[$i] ?? null);
			#src/verb/eval/Eval.hx:1343: characters 23-27
			$_g2 = 0;
			#src/verb/eval/Eval.hx:1343: characters 27-30
			$_g3 = $dim;
			#src/verb/eval/Eval.hx:1343: lines 1343-1345
			while ($_g2 < $_g3) {
				#src/verb/eval/Eval.hx:1343: characters 23-30
				$k = $_g2++;
				#src/verb/eval/Eval.hx:1344: characters 26-40
				$tmp = ($ref_pt->arr[$k] ?? null) * $wt;
				#src/verb/eval/Eval.hx:1344: characters 17-42
				$pt->arr[$pt->length++] = $tmp;
			}
			#src/verb/eval/Eval.hx:1348: characters 13-24
			$pt->arr[$pt->length++] = $wt;
			#src/verb/eval/Eval.hx:1350: characters 13-40
			$homo_controlPoints->arr[$homo_controlPoints->length++] = $pt;
		}
		#src/verb/eval/Eval.hx:1353: characters 9-34
		return $homo_controlPoints;
	}

	/**
	 * @param \Array_hx $controlPoints
	 * @param \Array_hx $weights
	 * 
	 * @return \Array_hx
	 */
	public static function homogenize2d ($controlPoints, $weights = null) {
		#src/verb/eval/Eval.hx:1370: lines 1370-1372
		$rows = $controlPoints->length;
		$homo_controlPoints = new \Array_hx();
		$weights1 = null;
		#src/verb/eval/Eval.hx:1372: characters 21-114
		if ($weights !== null) {
			#src/verb/eval/Eval.hx:1370: lines 1370-1372
			$weights1 = $weights;
		} else {
			#src/verb/eval/Eval.hx:1372: characters 49-114
			$_g = new \Array_hx();
			#src/verb/eval/Eval.hx:1372: characters 61-65
			$_g1 = 0;
			#src/verb/eval/Eval.hx:1372: characters 65-69
			$_g2 = $rows;
			#src/verb/eval/Eval.hx:1372: characters 51-112
			while ($_g1 < $_g2) {
				#src/verb/eval/Eval.hx:1372: characters 61-69
				$i = $_g1++;
				#src/verb/eval/Eval.hx:1372: characters 72-112
				$x = Vec::fill(($controlPoints->arr[0] ?? null)->length, 1.0);
				$_g->arr[$_g->length++] = $x;
			}
			#src/verb/eval/Eval.hx:1370: lines 1370-1372
			$weights1 = $_g;
		}
		#src/verb/eval/Eval.hx:1374: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:1374: characters 23-27
		$_g1 = $rows;
		#src/verb/eval/Eval.hx:1374: lines 1374-1376
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:1374: characters 19-27
			$i = $_g++;
			#src/verb/eval/Eval.hx:1375: characters 13-82
			$x = Eval_hx::homogenize1d(($controlPoints->arr[$i] ?? null), ($weights1->arr[$i] ?? null));
			$homo_controlPoints->arr[$homo_controlPoints->length++] = $x;
		}
		#src/verb/eval/Eval.hx:1378: characters 9-34
		return $homo_controlPoints;
	}

	/**
	 * @param int $degree
	 * @param float $u
	 * @param \Array_hx $knots
	 * 
	 * @return int
	 */
	public static function knotSpan ($degree, $u, $knots) {
		#src/verb/eval/Eval.hx:1151: characters 9-75
		return Eval_hx::knotSpanGivenN($knots->length - $degree - 2, $degree, $u, $knots);
	}

	/**
	 * @param int $n
	 * @param int $degree
	 * @param float $u
	 * @param \Array_hx $knots
	 * 
	 * @return int
	 */
	public static function knotSpanGivenN ($n, $degree, $u, $knots) {
		#src/verb/eval/Eval.hx:1171: lines 1171-1174
		if ($u > (($knots->arr[$n + 1] ?? null) - Constants::$EPSILON)) {
			#src/verb/eval/Eval.hx:1173: characters 13-21
			return $n;
		}
		#src/verb/eval/Eval.hx:1176: lines 1176-1179
		if ($u < (($knots->arr[$degree] ?? null) + Constants::$EPSILON)) {
			#src/verb/eval/Eval.hx:1178: characters 13-26
			return $degree;
		}
		#src/verb/eval/Eval.hx:1181: lines 1181-1183
		$low = $degree;
		$high = $n + 1;
		$mid = (int)(\floor(($low + $high) / 2));
		#src/verb/eval/Eval.hx:1185: lines 1185-1196
		while (($u < ($knots->arr[$mid] ?? null)) || ($u >= ($knots->arr[$mid + 1] ?? null))) {
			#src/verb/eval/Eval.hx:1187: lines 1187-1194
			if ($u < ($knots->arr[$mid] ?? null)) {
				#src/verb/eval/Eval.hx:1189: characters 17-27
				$high = $mid;
			} else {
				#src/verb/eval/Eval.hx:1193: characters 17-26
				$low = $mid;
			}
			#src/verb/eval/Eval.hx:1195: characters 13-49
			$mid = (int)(\floor(($low + $high) / 2));
		}
		#src/verb/eval/Eval.hx:1198: characters 9-19
		return $mid;
	}

	/**
	 * @param \Array_hx $homoPoints
	 * 
	 * @return \Array_hx
	 */
	public static function rational1d ($homoPoints) {
		#src/verb/eval/Eval.hx:1237: characters 9-44
		$dim = ($homoPoints->arr[0] ?? null)->length - 1;
		#src/verb/eval/Eval.hx:1238: characters 16-77
		$result = [];
		$data = $homoPoints->arr;
		$_g_current = 0;
		$_g_length = \count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			$result[] = $item->slice(0, $dim);
		}
		return \Array_hx::wrap($result);
	}

	/**
	 * @param \Array_hx $homoPoints
	 * 
	 * @return \Array_hx
	 */
	public static function rational2d ($homoPoints) {
		#src/verb/eval/Eval.hx:1253: characters 16-42
		$f = Boot::getStaticClosure(Eval_hx::class, 'rational1d');
		$result = [];
		$data = $homoPoints->arr;
		$_g_current = 0;
		$_g_length = \count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			$result[] = $f($item);
		}
		return \Array_hx::wrap($result);
	}

	/**
	 * @param NurbsCurveData $curve
	 * @param float $u
	 * @param int $numDerivs
	 * 
	 * @return \Array_hx
	 */
	public static function rationalCurveDerivatives ($curve, $u, $numDerivs = 1) {
		#src/verb/eval/Eval.hx:141: lines 141-163
		if ($numDerivs === null) {
			$numDerivs = 1;
		}
		#src/verb/eval/Eval.hx:143: lines 143-148
		$ders = Eval_hx::curveDerivatives($curve, $u, $numDerivs);
		$Aders = Eval_hx::rational1d($ders);
		$wders = Eval_hx::weight1d($ders);
		$k = 0;
		$i = 0;
		$CK = new \Array_hx();
		#src/verb/eval/Eval.hx:150: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:150: characters 23-34
		$_g1 = $numDerivs + 1;
		#src/verb/eval/Eval.hx:150: lines 150-159
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:150: characters 19-34
			$k = $_g++;
			#src/verb/eval/Eval.hx:151: characters 13-30
			$v = ($Aders->arr[$k] ?? null);
			#src/verb/eval/Eval.hx:153: characters 23-27
			$_g2 = 1;
			#src/verb/eval/Eval.hx:153: characters 27-30
			$_g3 = $k + 1;
			#src/verb/eval/Eval.hx:153: lines 153-155
			while ($_g2 < $_g3) {
				#src/verb/eval/Eval.hx:153: characters 23-30
				$i = $_g2++;
				#src/verb/eval/Eval.hx:154: characters 17-78
				Vec::subMulMutate($v, Binomial::get($k, $i) * ($wders->arr[$i] ?? null), ($CK->arr[$k - $i] ?? null));
			}
			#src/verb/eval/Eval.hx:157: characters 13-43
			Vec::mulMutate(1 / ($wders->arr[0] ?? null), $v);
			#src/verb/eval/Eval.hx:158: characters 13-25
			$CK->arr[$CK->length++] = $v;
		}
		#src/verb/eval/Eval.hx:161: characters 9-18
		return $CK;
	}

	/**
	 * @param NurbsCurveData $curve
	 * @param float $u
	 * 
	 * @return \Array_hx
	 */
	public static function rationalCurvePoint ($curve, $u) {
		#src/verb/eval/Eval.hx:180: characters 9-53
		return Eval_hx::dehomogenize(Eval_hx::curvePoint($curve, $u));
	}

	/**
	 * @param NurbsCurveData $curve
	 * @param float $u
	 * 
	 * @return \Array_hx
	 */
	public static function rationalCurveTangent ($curve, $u) {
		#src/verb/eval/Eval.hx:33: characters 9-62
		$derivs = Eval_hx::rationalCurveDerivatives($curve, $u, 1);
		#src/verb/eval/Eval.hx:34: characters 9-25
		return ($derivs->arr[1] ?? null);
	}

	/**
	 * @param NurbsSurfaceData $surface
	 * @param float $u
	 * @param float $v
	 * @param int $numDerivs
	 * 
	 * @return \Array_hx
	 */
	public static function rationalSurfaceDerivatives ($surface, $u, $v, $numDerivs = 1) {
		#src/verb/eval/Eval.hx:70: lines 70-106
		if ($numDerivs === null) {
			$numDerivs = 1;
		}
		#src/verb/eval/Eval.hx:72: lines 72-76
		$ders = Eval_hx::surfaceDerivatives($surface, $u, $v, $numDerivs);
		$Aders = Eval_hx::rational2d($ders);
		$wders = Eval_hx::weight2d($ders);
		$SKL = new \Array_hx();
		$dim = (($Aders->arr[0] ?? null)->arr[0] ?? null)->length;
		#src/verb/eval/Eval.hx:78: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:78: characters 23-34
		$_g1 = $numDerivs + 1;
		#src/verb/eval/Eval.hx:78: lines 78-103
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:78: characters 19-34
			$k = $_g++;
			#src/verb/eval/Eval.hx:79: characters 13-44
			$x = new \Array_hx();
			$SKL->arr[$SKL->length++] = $x;
			#src/verb/eval/Eval.hx:81: characters 23-27
			$_g2 = 0;
			#src/verb/eval/Eval.hx:81: characters 27-40
			$_g3 = $numDerivs - $k + 1;
			#src/verb/eval/Eval.hx:81: lines 81-102
			while ($_g2 < $_g3) {
				#src/verb/eval/Eval.hx:81: characters 23-40
				$l = $_g2++;
				#src/verb/eval/Eval.hx:82: characters 17-37
				$v = (($Aders->arr[$k] ?? null)->arr[$l] ?? null);
				#src/verb/eval/Eval.hx:84: characters 27-31
				$_g4 = 1;
				#src/verb/eval/Eval.hx:84: characters 31-34
				$_g5 = $l + 1;
				#src/verb/eval/Eval.hx:84: lines 84-86
				while ($_g4 < $_g5) {
					#src/verb/eval/Eval.hx:84: characters 27-34
					$j = $_g4++;
					#src/verb/eval/Eval.hx:85: characters 21-89
					Vec::subMulMutate($v, Binomial::get($l, $j) * (($wders->arr[0] ?? null)->arr[$j] ?? null), (($SKL->arr[$k] ?? null)->arr[$l - $j] ?? null));
				}
				#src/verb/eval/Eval.hx:88: characters 27-31
				$_g6 = 1;
				#src/verb/eval/Eval.hx:88: characters 31-34
				$_g7 = $k + 1;
				#src/verb/eval/Eval.hx:88: lines 88-98
				while ($_g6 < $_g7) {
					#src/verb/eval/Eval.hx:88: characters 27-34
					$i = $_g6++;
					#src/verb/eval/Eval.hx:89: characters 21-89
					Vec::subMulMutate($v, Binomial::get($k, $i) * (($wders->arr[$i] ?? null)->arr[0] ?? null), (($SKL->arr[$k - $i] ?? null)->arr[$l] ?? null));
					#src/verb/eval/Eval.hx:91: characters 21-47
					$v2 = Vec::zeros1d($dim);
					#src/verb/eval/Eval.hx:93: characters 31-35
					$_g8 = 1;
					#src/verb/eval/Eval.hx:93: characters 35-38
					$_g9 = $l + 1;
					#src/verb/eval/Eval.hx:93: lines 93-95
					while ($_g8 < $_g9) {
						#src/verb/eval/Eval.hx:93: characters 31-38
						$j1 = $_g8++;
						#src/verb/eval/Eval.hx:94: characters 25-96
						Vec::addMulMutate($v2, Binomial::get($l, $j1) * (($wders->arr[$i] ?? null)->arr[$j1] ?? null), (($SKL->arr[$k - $i] ?? null)->arr[$l - $j1] ?? null));
					}
					#src/verb/eval/Eval.hx:97: characters 21-66
					Vec::subMulMutate($v, Binomial::get($k, $i), $v2);
				}
				#src/verb/eval/Eval.hx:100: characters 17-51
				Vec::mulMutate(1 / (($wders->arr[0] ?? null)->arr[0] ?? null), $v);
				#src/verb/eval/Eval.hx:101: characters 17-33
				$_this = ($SKL->arr[$k] ?? null);
				$_this->arr[$_this->length++] = $v;
			}
		}
		#src/verb/eval/Eval.hx:105: characters 9-19
		return $SKL;
	}

	/**
	 * @param NurbsSurfaceData $surface
	 * @param float $u
	 * @param float $v
	 * 
	 * @return \Array_hx
	 */
	public static function rationalSurfaceNormal ($surface, $u, $v) {
		#src/verb/eval/Eval.hx:50: characters 9-69
		$derivs = Eval_hx::rationalSurfaceDerivatives($surface, $u, $v, 1);
		#src/verb/eval/Eval.hx:51: characters 9-55
		return Vec::cross((($derivs->arr[1] ?? null)->arr[0] ?? null), (($derivs->arr[0] ?? null)->arr[1] ?? null));
	}

	/**
	 * @param NurbsSurfaceData $surface
	 * @param float $u
	 * @param float $v
	 * 
	 * @return \Array_hx
	 */
	public static function rationalSurfacePoint ($surface, $u, $v) {
		#src/verb/eval/Eval.hx:126: characters 9-61
		return Eval_hx::dehomogenize(Eval_hx::surfacePoint($surface, $u, $v));
	}

	/**
	 * @param NurbsSurfaceData $surface
	 * @param int $divsU
	 * @param int $divsV
	 * @param int $numDerivs
	 * 
	 * @return \Array_hx
	 */
	public static function rationalSurfaceRegularSampleDerivatives ($surface, $divsU, $divsV, $numDerivs) {
		#src/verb/eval/Eval.hx:437: characters 9-91
		$allders = Eval_hx::surfaceRegularSampleDerivatives($surface, $divsU, $divsV, $numDerivs);
		#src/verb/eval/Eval.hx:439: characters 9-29
		$allratders = new \Array_hx();
		#src/verb/eval/Eval.hx:440: characters 9-30
		$divsU1 = $divsU + 1;
		#src/verb/eval/Eval.hx:441: characters 9-30
		$divsV1 = $divsV + 1;
		#src/verb/eval/Eval.hx:442: characters 9-38
		$numDerivs1 = $numDerivs + 1;
		#src/verb/eval/Eval.hx:444: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:444: characters 23-29
		$_g1 = $divsU1;
		#src/verb/eval/Eval.hx:444: lines 444-487
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:444: characters 19-29
			$i = $_g++;
			#src/verb/eval/Eval.hx:446: characters 13-30
			$rowders = new \Array_hx();
			#src/verb/eval/Eval.hx:447: characters 13-37
			$allratders->arr[$allratders->length++] = $rowders;
			#src/verb/eval/Eval.hx:449: characters 23-27
			$_g2 = 0;
			#src/verb/eval/Eval.hx:449: characters 27-33
			$_g3 = $divsV1;
			#src/verb/eval/Eval.hx:449: lines 449-486
			while ($_g2 < $_g3) {
				#src/verb/eval/Eval.hx:449: characters 23-33
				$j = $_g2++;
				#src/verb/eval/Eval.hx:451: lines 451-455
				$ders = (($allders->arr[$i] ?? null)->arr[$j] ?? null);
				$Aders = Eval_hx::rational2d($ders);
				$wders = Eval_hx::weight2d($ders);
				$SKL = new \Array_hx();
				$dim = (($Aders->arr[0] ?? null)->arr[0] ?? null)->length;
				#src/verb/eval/Eval.hx:457: characters 27-31
				$_g4 = 0;
				#src/verb/eval/Eval.hx:457: characters 31-41
				$_g5 = $numDerivs1;
				#src/verb/eval/Eval.hx:457: lines 457-483
				while ($_g4 < $_g5) {
					#src/verb/eval/Eval.hx:457: characters 27-41
					$k = $_g4++;
					#src/verb/eval/Eval.hx:458: characters 21-52
					$x = new \Array_hx();
					$SKL->arr[$SKL->length++] = $x;
					#src/verb/eval/Eval.hx:460: characters 31-35
					$_g6 = 0;
					#src/verb/eval/Eval.hx:460: characters 35-47
					$_g7 = $numDerivs1 - $k;
					#src/verb/eval/Eval.hx:460: lines 460-482
					while ($_g6 < $_g7) {
						#src/verb/eval/Eval.hx:460: characters 31-47
						$l = $_g6++;
						#src/verb/eval/Eval.hx:461: characters 25-45
						$v = (($Aders->arr[$k] ?? null)->arr[$l] ?? null);
						#src/verb/eval/Eval.hx:463: characters 35-39
						$_g8 = 1;
						#src/verb/eval/Eval.hx:463: characters 39-42
						$_g9 = $l + 1;
						#src/verb/eval/Eval.hx:463: lines 463-465
						while ($_g8 < $_g9) {
							#src/verb/eval/Eval.hx:463: characters 35-42
							$j1 = $_g8++;
							#src/verb/eval/Eval.hx:464: characters 29-97
							Vec::subMulMutate($v, Binomial::get($l, $j1) * (($wders->arr[0] ?? null)->arr[$j1] ?? null), (($SKL->arr[$k] ?? null)->arr[$l - $j1] ?? null));
						}
						#src/verb/eval/Eval.hx:467: characters 35-39
						$_g10 = 1;
						#src/verb/eval/Eval.hx:467: characters 39-42
						$_g11 = $k + 1;
						#src/verb/eval/Eval.hx:467: lines 467-478
						while ($_g10 < $_g11) {
							#src/verb/eval/Eval.hx:467: characters 35-42
							$i1 = $_g10++;
							#src/verb/eval/Eval.hx:468: characters 29-97
							Vec::subMulMutate($v, Binomial::get($k, $i1) * (($wders->arr[$i1] ?? null)->arr[0] ?? null), (($SKL->arr[$k - $i1] ?? null)->arr[$l] ?? null));
							#src/verb/eval/Eval.hx:470: characters 29-55
							$v2 = Vec::zeros1d($dim);
							#src/verb/eval/Eval.hx:472: characters 39-43
							$_g12 = 1;
							#src/verb/eval/Eval.hx:472: characters 43-46
							$_g13 = $l + 1;
							#src/verb/eval/Eval.hx:472: lines 472-474
							while ($_g12 < $_g13) {
								#src/verb/eval/Eval.hx:472: characters 39-46
								$j2 = $_g12++;
								#src/verb/eval/Eval.hx:473: characters 33-104
								Vec::addMulMutate($v2, Binomial::get($l, $j2) * (($wders->arr[$i1] ?? null)->arr[$j2] ?? null), (($SKL->arr[$k - $i1] ?? null)->arr[$l - $j2] ?? null));
							}
							#src/verb/eval/Eval.hx:476: characters 29-74
							Vec::subMulMutate($v, Binomial::get($k, $i1), $v2);
						}
						#src/verb/eval/Eval.hx:480: characters 25-59
						Vec::mulMutate(1 / (($wders->arr[0] ?? null)->arr[0] ?? null), $v);
						#src/verb/eval/Eval.hx:481: characters 25-41
						$_this = ($SKL->arr[$k] ?? null);
						$_this->arr[$_this->length++] = $v;
					}
				}
				#src/verb/eval/Eval.hx:485: characters 17-34
				$rowders->arr[$rowders->length++] = $SKL;
			}
		}
		#src/verb/eval/Eval.hx:489: characters 9-26
		return $allratders;
	}

	/**
	 * @param NurbsSurfaceData $surface
	 * @param int $divsU
	 * @param int $divsV
	 * 
	 * @return \Array_hx
	 */
	public static function rationalSurfaceRegularSamplePoints ($surface, $divsU, $divsV) {
		#src/verb/eval/Eval.hx:552: characters 9-85
		return Eval_hx::dehomogenize2d(Eval_hx::surfaceRegularSamplePoints($surface, $divsU, $divsV));
	}

	/**
	 * @param int $degree
	 * @param \Array_hx $knots
	 * @param int $divs
	 * 
	 * @return Pair
	 */
	public static function regularlySpacedBasisFunctions ($degree, $knots, $divs) {
		#src/verb/eval/Eval.hx:603: characters 9-49
		$n = $knots->length - $degree - 2;
		#src/verb/eval/Eval.hx:604: characters 9-61
		$span = (ArrayExtensions::last($knots) - ($knots->arr[0] ?? null)) / $divs;
		#src/verb/eval/Eval.hx:606: characters 9-24
		$bases = new \Array_hx();
		#src/verb/eval/Eval.hx:607: characters 9-28
		$knotspans = new \Array_hx();
		#src/verb/eval/Eval.hx:608: characters 9-26
		$u = ($knots->arr[0] ?? null);
		#src/verb/eval/Eval.hx:609: characters 9-63
		$knotIndex = Eval_hx::knotSpanGivenN($n, $degree, $u, $knots);
		#src/verb/eval/Eval.hx:610: characters 9-29
		$div1 = $divs + 1;
		#src/verb/eval/Eval.hx:613: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:613: characters 23-27
		$_g1 = $div1;
		#src/verb/eval/Eval.hx:613: lines 613-618
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:613: characters 19-27
			$i = $_g++;
			#src/verb/eval/Eval.hx:614: characters 13-58
			while ($u >= ($knots->arr[$knotIndex + 1] ?? null)) {
				#src/verb/eval/Eval.hx:614: characters 47-58
				++$knotIndex;
			}
			#src/verb/eval/Eval.hx:615: characters 13-40
			$knotspans->arr[$knotspans->length++] = $knotIndex;
			#src/verb/eval/Eval.hx:616: characters 13-90
			$x = Eval_hx::basisFunctionsGivenKnotSpanIndex($knotIndex, $u, $degree, $knots);
			$bases->arr[$bases->length++] = $x;
			#src/verb/eval/Eval.hx:617: characters 13-22
			$u += $span;
		}
		#src/verb/eval/Eval.hx:620: characters 9-71
		return new Pair($knotspans, $bases);
	}

	/**
	 * @param int $degree
	 * @param \Array_hx $knots
	 * @param int $divs
	 * 
	 * @return Pair
	 */
	public static function regularlySpacedDerivativeBasisFunctions ($degree, $knots, $divs) {
		#src/verb/eval/Eval.hx:625: characters 9-49
		$n = $knots->length - $degree - 2;
		#src/verb/eval/Eval.hx:626: characters 9-61
		$span = (ArrayExtensions::last($knots) - ($knots->arr[0] ?? null)) / $divs;
		#src/verb/eval/Eval.hx:628: characters 9-24
		$bases = new \Array_hx();
		#src/verb/eval/Eval.hx:629: characters 9-28
		$knotspans = new \Array_hx();
		#src/verb/eval/Eval.hx:630: characters 9-26
		$u = ($knots->arr[0] ?? null);
		#src/verb/eval/Eval.hx:631: characters 9-63
		$knotIndex = Eval_hx::knotSpanGivenN($n, $degree, $u, $knots);
		#src/verb/eval/Eval.hx:632: characters 9-29
		$div1 = $divs + 1;
		#src/verb/eval/Eval.hx:635: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:635: characters 23-27
		$_g1 = $div1;
		#src/verb/eval/Eval.hx:635: lines 635-640
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:635: characters 19-27
			$i = $_g++;
			#src/verb/eval/Eval.hx:636: characters 13-58
			while ($u >= ($knots->arr[$knotIndex + 1] ?? null)) {
				#src/verb/eval/Eval.hx:636: characters 47-58
				++$knotIndex;
			}
			#src/verb/eval/Eval.hx:637: characters 13-40
			$knotspans->arr[$knotspans->length++] = $knotIndex;
			#src/verb/eval/Eval.hx:638: characters 13-92
			$x = Eval_hx::derivativeBasisFunctionsGivenNI($knotIndex, $u, $degree, $n, $knots);
			$bases->arr[$bases->length++] = $x;
			#src/verb/eval/Eval.hx:639: characters 13-22
			$u += $span;
		}
		#src/verb/eval/Eval.hx:642: characters 9-78
		return new Pair($knotspans, $bases);
	}

	/**
	 * @param NurbsSurfaceData $surface
	 * @param float $u
	 * @param float $v
	 * @param int $numDerivs
	 * 
	 * @return \Array_hx
	 */
	public static function surfaceDerivatives ($surface, $u, $v, $numDerivs) {
		#src/verb/eval/Eval.hx:198: lines 198-199
		$n = $surface->knotsU->length - $surface->degreeU - 2;
		$m = $surface->knotsV->length - $surface->degreeV - 2;
		#src/verb/eval/Eval.hx:201: characters 9-75
		return Eval_hx::surfaceDerivativesGivenNM($n, $m, $surface, $u, $v, $numDerivs);
	}

	/**
	 * @param int $degreeU
	 * @param int $degreeV
	 * @param \Array_hx $controlPoints
	 * @param int $knotSpanU
	 * @param int $knotSpanV
	 * @param \Array_hx $basesU
	 * @param \Array_hx $basesV
	 * @param int $dim
	 * @param int $numDerivs
	 * 
	 * @return \Array_hx
	 */
	public static function surfaceDerivativesGivenBasesKnotSpans ($degreeU, $degreeV, $controlPoints, $knotSpanU, $knotSpanV, $basesU, $basesV, $dim, $numDerivs) {
		#src/verb/eval/Eval.hx:687: lines 687-692
		$dim = (($controlPoints->arr[0] ?? null)->arr[0] ?? null)->length;
		$du = ($numDerivs < $degreeU ? $numDerivs : $degreeU);
		$dv = ($numDerivs < $degreeV ? $numDerivs : $degreeV);
		$SKL = Vec::zeros3d($du + 1, $dv + 1, $dim);
		$temp = Vec::zeros2d($degreeV + 1, $dim);
		$dd = 0;
		#src/verb/eval/Eval.hx:694: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:694: characters 23-27
		$_g1 = $du + 1;
		#src/verb/eval/Eval.hx:694: lines 694-713
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:694: characters 19-27
			$k = $_g++;
			#src/verb/eval/Eval.hx:695: characters 23-27
			$_g2 = 0;
			#src/verb/eval/Eval.hx:695: characters 27-36
			$_g3 = $degreeV + 1;
			#src/verb/eval/Eval.hx:695: lines 695-701
			while ($_g2 < $_g3) {
				#src/verb/eval/Eval.hx:695: characters 23-36
				$s = $_g2++;
				#src/verb/eval/Eval.hx:696: characters 17-45
				$temp->offsetSet($s, Vec::zeros1d($dim));
				#src/verb/eval/Eval.hx:698: characters 27-31
				$_g4 = 0;
				#src/verb/eval/Eval.hx:698: characters 31-40
				$_g5 = $degreeU + 1;
				#src/verb/eval/Eval.hx:698: lines 698-700
				while ($_g4 < $_g5) {
					#src/verb/eval/Eval.hx:698: characters 27-40
					$r = $_g4++;
					#src/verb/eval/Eval.hx:699: characters 21-119
					Vec::addMulMutate(($temp->arr[$s] ?? null), (($basesU->arr[$k] ?? null)->arr[$r] ?? null), (($controlPoints->arr[$knotSpanU - $degreeU + $r] ?? null)->arr[$knotSpanV - $degreeV + $s] ?? null));
				}
			}
			#src/verb/eval/Eval.hx:703: characters 13-36
			$nk = $numDerivs - $k;
			#src/verb/eval/Eval.hx:704: characters 28-30
			$dd = ($nk < $dv ? $nk : $dv);
			#src/verb/eval/Eval.hx:706: characters 23-27
			$_g6 = 0;
			#src/verb/eval/Eval.hx:706: characters 27-31
			$_g7 = $dd + 1;
			#src/verb/eval/Eval.hx:706: lines 706-712
			while ($_g6 < $_g7) {
				#src/verb/eval/Eval.hx:706: characters 23-31
				$l = $_g6++;
				#src/verb/eval/Eval.hx:707: characters 17-47
				($SKL->arr[$k] ?? null)->offsetSet($l, Vec::zeros1d($dim));
				#src/verb/eval/Eval.hx:709: characters 27-31
				$_g8 = 0;
				#src/verb/eval/Eval.hx:709: characters 31-40
				$_g9 = $degreeV + 1;
				#src/verb/eval/Eval.hx:709: lines 709-711
				while ($_g8 < $_g9) {
					#src/verb/eval/Eval.hx:709: characters 27-40
					$s1 = $_g8++;
					#src/verb/eval/Eval.hx:710: characters 21-73
					Vec::addMulMutate((($SKL->arr[$k] ?? null)->arr[$l] ?? null), (($basesV->arr[$l] ?? null)->arr[$s1] ?? null), ($temp->arr[$s1] ?? null));
				}
			}
		}
		#src/verb/eval/Eval.hx:715: characters 9-19
		return $SKL;
	}

	/**
	 * @param int $n
	 * @param int $m
	 * @param NurbsSurfaceData $surface
	 * @param float $u
	 * @param float $v
	 * @param int $numDerivs
	 * 
	 * @return \Array_hx
	 */
	public static function surfaceDerivativesGivenNM ($n, $m, $surface, $u, $v, $numDerivs) {
		#src/verb/eval/Eval.hx:227: lines 227-231
		$degreeU = $surface->degreeU;
		$degreeV = $surface->degreeV;
		$controlPoints = $surface->controlPoints;
		$knotsU = $surface->knotsU;
		$knotsV = $surface->knotsV;
		#src/verb/eval/Eval.hx:233: lines 233-237
		if (!Eval_hx::areValidRelations($degreeU, $controlPoints->length, $knotsU->length) || !Eval_hx::areValidRelations($degreeV, ($controlPoints->arr[0] ?? null)->length, $knotsV->length)) {
			#src/verb/eval/Eval.hx:236: characters 13-18
			throw Exception::thrown("Invalid relations between control points, knot vector, and n");
		}
		#src/verb/eval/Eval.hx:239: lines 239-248
		$dim = (($controlPoints->arr[0] ?? null)->arr[0] ?? null)->length;
		$du = ($numDerivs < $degreeU ? $numDerivs : $degreeU);
		$dv = ($numDerivs < $degreeV ? $numDerivs : $degreeV);
		$SKL = Vec::zeros3d($numDerivs + 1, $numDerivs + 1, $dim);
		$knotSpan_index_u = Eval_hx::knotSpanGivenN($n, $degreeU, $u, $knotsU);
		$knotSpan_index_v = Eval_hx::knotSpanGivenN($m, $degreeV, $v, $knotsV);
		$uders = Eval_hx::derivativeBasisFunctionsGivenNI($knotSpan_index_u, $u, $degreeU, $n, $knotsU);
		$vders = Eval_hx::derivativeBasisFunctionsGivenNI($knotSpan_index_v, $v, $degreeV, $m, $knotsV);
		$temp = Vec::zeros2d($degreeV + 1, $dim);
		$dd = 0;
		#src/verb/eval/Eval.hx:250: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:250: characters 23-27
		$_g1 = $du + 1;
		#src/verb/eval/Eval.hx:250: lines 250-269
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:250: characters 19-27
			$k = $_g++;
			#src/verb/eval/Eval.hx:251: characters 23-27
			$_g2 = 0;
			#src/verb/eval/Eval.hx:251: characters 27-36
			$_g3 = $degreeV + 1;
			#src/verb/eval/Eval.hx:251: lines 251-257
			while ($_g2 < $_g3) {
				#src/verb/eval/Eval.hx:251: characters 23-36
				$s = $_g2++;
				#src/verb/eval/Eval.hx:252: characters 17-45
				$temp->offsetSet($s, Vec::zeros1d($dim));
				#src/verb/eval/Eval.hx:254: characters 27-31
				$_g4 = 0;
				#src/verb/eval/Eval.hx:254: characters 31-40
				$_g5 = $degreeU + 1;
				#src/verb/eval/Eval.hx:254: lines 254-256
				while ($_g4 < $_g5) {
					#src/verb/eval/Eval.hx:254: characters 27-40
					$r = $_g4++;
					#src/verb/eval/Eval.hx:255: characters 21-131
					Vec::addMulMutate(($temp->arr[$s] ?? null), (($uders->arr[$k] ?? null)->arr[$r] ?? null), (($controlPoints->arr[$knotSpan_index_u - $degreeU + $r] ?? null)->arr[$knotSpan_index_v - $degreeV + $s] ?? null));
				}
			}
			#src/verb/eval/Eval.hx:259: characters 13-36
			$nk = $numDerivs - $k;
			#src/verb/eval/Eval.hx:260: characters 28-30
			$dd = ($nk < $dv ? $nk : $dv);
			#src/verb/eval/Eval.hx:262: characters 23-27
			$_g6 = 0;
			#src/verb/eval/Eval.hx:262: characters 27-31
			$_g7 = $dd + 1;
			#src/verb/eval/Eval.hx:262: lines 262-268
			while ($_g6 < $_g7) {
				#src/verb/eval/Eval.hx:262: characters 23-31
				$l = $_g6++;
				#src/verb/eval/Eval.hx:263: characters 17-47
				($SKL->arr[$k] ?? null)->offsetSet($l, Vec::zeros1d($dim));
				#src/verb/eval/Eval.hx:265: characters 27-31
				$_g8 = 0;
				#src/verb/eval/Eval.hx:265: characters 31-40
				$_g9 = $degreeV + 1;
				#src/verb/eval/Eval.hx:265: lines 265-267
				while ($_g8 < $_g9) {
					#src/verb/eval/Eval.hx:265: characters 27-40
					$s1 = $_g8++;
					#src/verb/eval/Eval.hx:266: characters 21-72
					Vec::addMulMutate((($SKL->arr[$k] ?? null)->arr[$l] ?? null), (($vders->arr[$l] ?? null)->arr[$s1] ?? null), ($temp->arr[$s1] ?? null));
				}
			}
		}
		#src/verb/eval/Eval.hx:271: characters 9-19
		return $SKL;
	}

	/**
	 * @param NurbsSurfaceData $surface
	 * @param float $u
	 * @param float $v
	 * 
	 * @return \Array_hx
	 */
	public static function surfacePoint ($surface, $u, $v) {
		#src/verb/eval/Eval.hx:288: lines 288-289
		$n = $surface->knotsU->length - $surface->degreeU - 2;
		$m = $surface->knotsV->length - $surface->degreeV - 2;
		#src/verb/eval/Eval.hx:291: characters 9-58
		return Eval_hx::surfacePointGivenNM($n, $m, $surface, $u, $v);
	}

	/**
	 * @param int $degreeU
	 * @param int $degreeV
	 * @param \Array_hx $controlPoints
	 * @param int $knotSpanU
	 * @param int $knotSpanV
	 * @param \Array_hx $basesU
	 * @param \Array_hx $basesV
	 * @param int $dim
	 * 
	 * @return \Array_hx
	 */
	public static function surfacePointGivenBasesKnotSpans ($degreeU, $degreeV, $controlPoints, $knotSpanU, $knotSpanV, $basesU, $basesV, $dim) {
		#src/verb/eval/Eval.hx:654: lines 654-655
		$position = Vec::zeros1d($dim);
		$temp = null;
		#src/verb/eval/Eval.hx:658: characters 9-40
		$uind = $knotSpanU - $degreeU;
		#src/verb/eval/Eval.hx:659: characters 9-40
		$vind = $knotSpanV - $degreeV;
		#src/verb/eval/Eval.hx:661: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:661: characters 23-34
		$_g1 = $degreeV + 1;
		#src/verb/eval/Eval.hx:661: lines 661-672
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:661: characters 19-34
			$l = $_g++;
			#src/verb/eval/Eval.hx:663: characters 13-38
			$temp = Vec::zeros1d($dim);
			#src/verb/eval/Eval.hx:665: characters 23-27
			$_g2 = 0;
			#src/verb/eval/Eval.hx:665: characters 27-38
			$_g3 = $degreeU + 1;
			#src/verb/eval/Eval.hx:665: lines 665-667
			while ($_g2 < $_g3) {
				#src/verb/eval/Eval.hx:665: characters 23-38
				$k = $_g2++;
				#src/verb/eval/Eval.hx:666: characters 17-81
				Vec::addMulMutate($temp, ($basesU->arr[$k] ?? null), (($controlPoints->arr[$uind + $k] ?? null)->arr[$vind] ?? null));
			}
			#src/verb/eval/Eval.hx:669: characters 13-19
			++$vind;
			#src/verb/eval/Eval.hx:671: characters 13-58
			Vec::addMulMutate($position, ($basesV->arr[$l] ?? null), $temp);
		}
		#src/verb/eval/Eval.hx:674: characters 9-24
		return $position;
	}

	/**
	 * @param int $n
	 * @param int $m
	 * @param NurbsSurfaceData $surface
	 * @param float $u
	 * @param float $v
	 * 
	 * @return \Array_hx
	 */
	public static function surfacePointGivenNM ($n, $m, $surface, $u, $v) {
		#src/verb/eval/Eval.hx:312: lines 312-316
		$degreeU = $surface->degreeU;
		$degreeV = $surface->degreeV;
		$controlPoints = $surface->controlPoints;
		$knotsU = $surface->knotsU;
		$knotsV = $surface->knotsV;
		#src/verb/eval/Eval.hx:318: lines 318-322
		if (!Eval_hx::areValidRelations($degreeU, $controlPoints->length, $knotsU->length) || !Eval_hx::areValidRelations($degreeV, ($controlPoints->arr[0] ?? null)->length, $knotsV->length)) {
			#src/verb/eval/Eval.hx:321: characters 13-18
			throw Exception::thrown("Invalid relations between control points, knot vector, and n");
		}
		#src/verb/eval/Eval.hx:324: lines 324-332
		$dim = (($controlPoints->arr[0] ?? null)->arr[0] ?? null)->length;
		$knotSpan_index_u = Eval_hx::knotSpanGivenN($n, $degreeU, $u, $knotsU);
		$knotSpan_index_v = Eval_hx::knotSpanGivenN($m, $degreeV, $v, $knotsV);
		$u_basis_vals = Eval_hx::basisFunctionsGivenKnotSpanIndex($knotSpan_index_u, $u, $degreeU, $knotsU);
		$v_basis_vals = Eval_hx::basisFunctionsGivenKnotSpanIndex($knotSpan_index_v, $v, $degreeV, $knotsV);
		$uind = $knotSpan_index_u - $degreeU;
		$vind = $knotSpan_index_v;
		$position = Vec::zeros1d($dim);
		$temp = Vec::zeros1d($dim);
		#src/verb/eval/Eval.hx:334: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:334: characters 23-34
		$_g1 = $degreeV + 1;
		#src/verb/eval/Eval.hx:334: lines 334-346
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:334: characters 19-34
			$l = $_g++;
			#src/verb/eval/Eval.hx:336: characters 13-38
			$temp = Vec::zeros1d($dim);
			#src/verb/eval/Eval.hx:337: characters 13-50
			$vind = $knotSpan_index_v - $degreeV + $l;
			#src/verb/eval/Eval.hx:340: characters 23-27
			$_g2 = 0;
			#src/verb/eval/Eval.hx:340: characters 27-38
			$_g3 = $degreeU + 1;
			#src/verb/eval/Eval.hx:340: lines 340-342
			while ($_g2 < $_g3) {
				#src/verb/eval/Eval.hx:340: characters 23-38
				$k = $_g2++;
				#src/verb/eval/Eval.hx:341: characters 17-87
				Vec::addMulMutate($temp, ($u_basis_vals->arr[$k] ?? null), (($controlPoints->arr[$uind + $k] ?? null)->arr[$vind] ?? null));
			}
			#src/verb/eval/Eval.hx:345: characters 13-64
			Vec::addMulMutate($position, ($v_basis_vals->arr[$l] ?? null), $temp);
		}
		#src/verb/eval/Eval.hx:348: characters 9-24
		return $position;
	}

	/**
	 * @param NurbsSurfaceData $surface
	 * @param int $divsU
	 * @param int $divsV
	 * @param int $numDerivs
	 * 
	 * @return \Array_hx
	 */
	public static function surfaceRegularSampleDerivatives ($surface, $divsU, $divsV, $numDerivs) {
		#src/verb/eval/Eval.hx:507: lines 507-511
		$degreeU = $surface->degreeU;
		$degreeV = $surface->degreeV;
		$controlPoints = $surface->controlPoints;
		$knotsU = $surface->knotsU;
		$knotsV = $surface->knotsV;
		#src/verb/eval/Eval.hx:513: lines 513-524
		$dim = (($controlPoints->arr[0] ?? null)->arr[0] ?? null)->length;
		$spanU = (ArrayExtensions::last($knotsU) - ($knotsU->arr[0] ?? null)) / $divsU;
		$spanV = (ArrayExtensions::last($knotsV) - ($knotsV->arr[0] ?? null)) / $divsV;
		$knotSpansBasesU = Eval_hx::regularlySpacedDerivativeBasisFunctions($degreeU, $knotsU, $divsU);
		$knotSpansU = $knotSpansBasesU->item0;
		$basesU = $knotSpansBasesU->item1;
		$knotSpansBasesV = Eval_hx::regularlySpacedDerivativeBasisFunctions($degreeV, $knotsV, $divsV);
		$knotSpansV = $knotSpansBasesV->item0;
		$basesV = $knotSpansBasesV->item1;
		$pts = new \Array_hx();
		$divsU1 = $divsU + 1;
		$divsV1 = $divsV + 1;
		#src/verb/eval/Eval.hx:526: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:526: characters 23-29
		$_g1 = $divsU1;
		#src/verb/eval/Eval.hx:526: lines 526-533
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:526: characters 19-29
			$i = $_g++;
			#src/verb/eval/Eval.hx:527: characters 13-27
			$ptsi = new \Array_hx();
			#src/verb/eval/Eval.hx:528: characters 13-29
			$pts->arr[$pts->length++] = $ptsi;
			#src/verb/eval/Eval.hx:530: characters 23-27
			$_g2 = 0;
			#src/verb/eval/Eval.hx:530: characters 27-33
			$_g3 = $divsV1;
			#src/verb/eval/Eval.hx:530: lines 530-532
			while ($_g2 < $_g3) {
				#src/verb/eval/Eval.hx:530: characters 23-33
				$j = $_g2++;
				#src/verb/eval/Eval.hx:531: characters 17-170
				$x = Eval_hx::surfaceDerivativesGivenBasesKnotSpans($degreeU, $degreeV, $controlPoints, ($knotSpansU->arr[$i] ?? null), ($knotSpansV->arr[$j] ?? null), ($basesU->arr[$i] ?? null), ($basesV->arr[$j] ?? null), $dim, $numDerivs);
				$ptsi->arr[$ptsi->length++] = $x;
			}
		}
		#src/verb/eval/Eval.hx:535: characters 9-19
		return $pts;
	}

	/**
	 * @param NurbsSurfaceData $surface
	 * @param int $divsU
	 * @param int $divsV
	 * 
	 * @return \Array_hx
	 */
	public static function surfaceRegularSamplePoints ($surface, $divsU, $divsV) {
		#src/verb/eval/Eval.hx:570: lines 570-574
		$degreeU = $surface->degreeU;
		$degreeV = $surface->degreeV;
		$controlPoints = $surface->controlPoints;
		$knotsU = $surface->knotsU;
		$knotsV = $surface->knotsV;
		#src/verb/eval/Eval.hx:576: lines 576-587
		$dim = (($controlPoints->arr[0] ?? null)->arr[0] ?? null)->length;
		$spanU = (ArrayExtensions::last($knotsU) - ($knotsU->arr[0] ?? null)) / $divsU;
		$spanV = (ArrayExtensions::last($knotsV) - ($knotsV->arr[0] ?? null)) / $divsV;
		$knotSpansBasesU = Eval_hx::regularlySpacedBasisFunctions($degreeU, $knotsU, $divsU);
		$knotSpansU = $knotSpansBasesU->item0;
		$basesU = $knotSpansBasesU->item1;
		$knotSpansBasesV = Eval_hx::regularlySpacedBasisFunctions($degreeV, $knotsV, $divsV);
		$knotSpansV = $knotSpansBasesV->item0;
		$basesV = $knotSpansBasesV->item1;
		$pts = new \Array_hx();
		$divsU1 = $divsU + 1;
		$divsV1 = $divsV + 1;
		#src/verb/eval/Eval.hx:589: characters 19-23
		$_g = 0;
		#src/verb/eval/Eval.hx:589: characters 23-29
		$_g1 = $divsU1;
		#src/verb/eval/Eval.hx:589: lines 589-596
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:589: characters 19-29
			$i = $_g++;
			#src/verb/eval/Eval.hx:590: characters 13-27
			$ptsi = new \Array_hx();
			#src/verb/eval/Eval.hx:591: characters 13-29
			$pts->arr[$pts->length++] = $ptsi;
			#src/verb/eval/Eval.hx:593: characters 23-27
			$_g2 = 0;
			#src/verb/eval/Eval.hx:593: characters 27-33
			$_g3 = $divsV1;
			#src/verb/eval/Eval.hx:593: lines 593-595
			while ($_g2 < $_g3) {
				#src/verb/eval/Eval.hx:593: characters 23-33
				$j = $_g2++;
				#src/verb/eval/Eval.hx:594: characters 17-153
				$x = Eval_hx::surfacePointGivenBasesKnotSpans($degreeU, $degreeV, $controlPoints, ($knotSpansU->arr[$i] ?? null), ($knotSpansV->arr[$j] ?? null), ($basesU->arr[$i] ?? null), ($basesV->arr[$j] ?? null), $dim);
				$ptsi->arr[$ptsi->length++] = $x;
			}
		}
		#src/verb/eval/Eval.hx:598: characters 9-19
		return $pts;
	}

	/**
	 * @param VolumeData $volume
	 * @param float $u
	 * @param float $v
	 * @param float $w
	 * 
	 * @return \Array_hx
	 */
	public static function volumePoint ($volume, $u, $v, $w) {
		#src/verb/eval/Eval.hx:858: lines 858-860
		$n = $volume->knotsU->length - $volume->degreeU - 2;
		$m = $volume->knotsV->length - $volume->degreeV - 2;
		$l = $volume->knotsW->length - $volume->degreeW - 2;
		#src/verb/eval/Eval.hx:862: characters 9-63
		return Eval_hx::volumePointGivenNML($volume, $n, $m, $l, $u, $v, $w);
	}

	/**
	 * @param VolumeData $volume
	 * @param int $n
	 * @param int $m
	 * @param int $l
	 * @param float $u
	 * @param float $v
	 * @param float $w
	 * 
	 * @return \Array_hx
	 */
	public static function volumePointGivenNML ($volume, $n, $m, $l, $u, $v, $w) {
		#src/verb/eval/Eval.hx:886: lines 886-890
		if (!Eval_hx::areValidRelations($volume->degreeU, $volume->controlPoints->length, $volume->knotsU->length) || !Eval_hx::areValidRelations($volume->degreeV, ($volume->controlPoints->arr[0] ?? null)->length, $volume->knotsV->length) || !Eval_hx::areValidRelations($volume->degreeW, (($volume->controlPoints->arr[0] ?? null)->arr[0] ?? null)->length, $volume->knotsW->length)) {
			#src/verb/eval/Eval.hx:889: characters 13-18
			throw Exception::thrown("Invalid relations between control points and knot vector");
		}
		#src/verb/eval/Eval.hx:892: lines 892-898
		$controlPoints = $volume->controlPoints;
		$degreeU = $volume->degreeU;
		$degreeV = $volume->degreeV;
		$degreeW = $volume->degreeW;
		$knotsU = $volume->knotsU;
		$knotsV = $volume->knotsV;
		$knotsW = $volume->knotsW;
		#src/verb/eval/Eval.hx:900: lines 900-910
		$dim = ((($controlPoints->arr[0] ?? null)->arr[0] ?? null)->arr[0] ?? null)->length;
		$knotSpan_index_u = Eval_hx::knotSpanGivenN($n, $degreeU, $u, $knotsU);
		$knotSpan_index_v = Eval_hx::knotSpanGivenN($m, $degreeV, $v, $knotsV);
		$knotSpan_index_w = Eval_hx::knotSpanGivenN($l, $degreeW, $w, $knotsW);
		$u_basis_vals = Eval_hx::basisFunctionsGivenKnotSpanIndex($knotSpan_index_u, $u, $degreeU, $knotsU);
		$v_basis_vals = Eval_hx::basisFunctionsGivenKnotSpanIndex($knotSpan_index_v, $v, $degreeV, $knotsV);
		$w_basis_vals = Eval_hx::basisFunctionsGivenKnotSpanIndex($knotSpan_index_w, $w, $degreeW, $knotsW);
		$uind = $knotSpan_index_u - $degreeU;
		$position = Vec::zeros1d($dim);
		$temp = Vec::zeros1d($dim);
		$temp2 = Vec::zeros1d($dim);
		#src/verb/eval/Eval.hx:912: characters 20-24
		$_g = 0;
		#src/verb/eval/Eval.hx:912: characters 24-35
		$_g1 = $degreeW + 1;
		#src/verb/eval/Eval.hx:912: lines 912-932
		while ($_g < $_g1) {
			#src/verb/eval/Eval.hx:912: characters 20-35
			$i = $_g++;
			#src/verb/eval/Eval.hx:914: characters 13-39
			$temp2 = Vec::zeros1d($dim);
			#src/verb/eval/Eval.hx:915: characters 13-55
			$wind = $knotSpan_index_w - $degreeW + $i;
			#src/verb/eval/Eval.hx:917: characters 24-28
			$_g2 = 0;
			#src/verb/eval/Eval.hx:917: characters 28-39
			$_g3 = $degreeV + 1;
			#src/verb/eval/Eval.hx:917: lines 917-928
			while ($_g2 < $_g3) {
				#src/verb/eval/Eval.hx:917: characters 24-39
				$j = $_g2++;
				#src/verb/eval/Eval.hx:919: characters 17-42
				$temp = Vec::zeros1d($dim);
				#src/verb/eval/Eval.hx:920: characters 17-60
				$vind = $knotSpan_index_v - $degreeV + $j;
				#src/verb/eval/Eval.hx:922: characters 28-32
				$_g4 = 0;
				#src/verb/eval/Eval.hx:922: characters 32-43
				$_g5 = $degreeU + 1;
				#src/verb/eval/Eval.hx:922: lines 922-924
				while ($_g4 < $_g5) {
					#src/verb/eval/Eval.hx:922: characters 28-43
					$k = $_g4++;
					#src/verb/eval/Eval.hx:923: characters 21-97
					Vec::addMulMutate($temp, ($u_basis_vals->arr[$k] ?? null), ((($controlPoints->arr[$uind + $k] ?? null)->arr[$vind] ?? null)->arr[$wind] ?? null));
				}
				#src/verb/eval/Eval.hx:927: characters 17-65
				Vec::addMulMutate($temp2, ($v_basis_vals->arr[$j] ?? null), $temp);
			}
			#src/verb/eval/Eval.hx:931: characters 13-65
			Vec::addMulMutate($position, ($w_basis_vals->arr[$i] ?? null), $temp2);
		}
		#src/verb/eval/Eval.hx:934: characters 9-24
		return $position;
	}

	/**
	 * @param \Array_hx $homoPoints
	 * 
	 * @return \Array_hx
	 */
	public static function weight1d ($homoPoints) {
		#src/verb/eval/Eval.hx:1268: characters 9-44
		$dim = ($homoPoints->arr[0] ?? null)->length - 1;
		#src/verb/eval/Eval.hx:1269: characters 16-61
		$result = [];
		$data = $homoPoints->arr;
		$_g_current = 0;
		$_g_length = \count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			$result[] = ($item->arr[$dim] ?? null);
		}
		return \Array_hx::wrap($result);
	}

	/**
	 * @param \Array_hx $homoPoints
	 * 
	 * @return \Array_hx
	 */
	public static function weight2d ($homoPoints) {
		#src/verb/eval/Eval.hx:1284: characters 16-40
		$f = Boot::getStaticClosure(Eval_hx::class, 'weight1d');
		$result = [];
		$data = $homoPoints->arr;
		$_g_current = 0;
		$_g_length = \count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			$result[] = $f($item);
		}
		return \Array_hx::wrap($result);
	}
}

Boot::registerClass(Eval_hx::class, 'verb.eval.Eval');
