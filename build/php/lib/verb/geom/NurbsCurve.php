<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace verb\geom;

use \php\Boot;
use \verb\eval_hx\Tess;
use \verb\eval_hx\Divide;
use \verb\eval_hx\Analyze;
use \verb\eval_hx\Check;
use \verb\eval_hx\Eval_hx;
use \verb\eval_hx\Modify;
use \verb\core\SerializableBase;
use \verb\core\Interval;
use \verb\eval_hx\Make;
use \verb\core\NurbsCurveData;
use \verb\core\ArrayExtensions;

class NurbsCurve extends SerializableBase implements ICurve {
	/**
	 * @var NurbsCurveData
	 */
	public $_data;

	/**
	 * @param int $degree
	 * @param \Array_hx $knots
	 * @param \Array_hx $controlPoints
	 * @param \Array_hx $weights
	 * 
	 * @return NurbsCurve
	 */
	public static function byKnotsControlPointsWeights ($degree, $knots, $controlPoints, $weights = null) {
		#src/verb/geom/NurbsCurve.hx:59: characters 60-72
		$tmp = (clone $knots);
		#src/verb/geom/NurbsCurve.hx:59: characters 9-120
		return new NurbsCurve(new NurbsCurveData($degree, $tmp, Eval_hx::homogenize1d($controlPoints, $weights)));
	}

	/**
	 * @param \Array_hx $points
	 * @param int $degree
	 * 
	 * @return NurbsCurve
	 */
	public static function byPoints ($points, $degree = 3) {
		#src/verb/geom/NurbsCurve.hx:75: characters 9-74
		if ($degree === null) {
			$degree = 3;
		}
		return new NurbsCurve(Make::rationalInterpCurve($points, $degree));
	}

	/**
	 * @param NurbsCurveData $data
	 * 
	 * @return void
	 */
	public function __construct ($data) {
		#src/verb/geom/NurbsCurve.hx:39: characters 9-57
		$this->_data = Check::isValidNurbsCurveData($data);
	}

	/**
	 * @return NurbsCurveData
	 */
	public function asNurbs () {
		#src/verb/geom/NurbsCurve.hx:100: characters 36-44
		$tmp = $this->degree();
		#src/verb/geom/NurbsCurve.hx:100: characters 46-53
		$tmp1 = $this->knots();
		#src/verb/geom/NurbsCurve.hx:100: characters 9-103
		return new NurbsCurveData($tmp, $tmp1, Eval_hx::homogenize1d($this->controlPoints(), $this->weights()));
	}

	/**
	 * @return NurbsCurve
	 */
	public function clone () {
		#src/verb/geom/NurbsCurve.hx:110: characters 9-44
		return new NurbsCurve($this->_data);
	}

	/**
	 * @param \Array_hx $pt
	 * 
	 * @return float
	 */
	public function closestParam ($pt) {
		#src/verb/geom/NurbsCurve.hx:206: characters 9-62
		return Analyze::rationalCurveClosestParam($this->_data, $pt);
	}

	/**
	 * @param \Array_hx $pt
	 * 
	 * @return \Array_hx
	 */
	public function closestPoint ($pt) {
		#src/verb/geom/NurbsCurve.hx:192: characters 9-62
		return Analyze::rationalCurveClosestPoint($this->_data, $pt);
	}

	/**
	 * @return \Array_hx
	 */
	public function controlPoints () {
		#src/verb/geom/NurbsCurve.hx:88: characters 54-101
		return Eval_hx::dehomogenize1d($this->_data->controlPoints);
	}

	/**
	 * @return int
	 */
	public function degree () {
		#src/verb/geom/NurbsCurve.hx:82: characters 38-57
		return $this->_data->degree;
	}

	/**
	 * @param float $u
	 * @param int $numDerivs
	 * 
	 * @return \Array_hx
	 */
	public function derivatives ($u, $numDerivs = 1) {
		#src/verb/geom/NurbsCurve.hx:178: characters 9-68
		if ($numDerivs === null) {
			$numDerivs = 1;
		}
		return Eval_hx::rationalCurveDerivatives($this->_data, $u, $numDerivs);
	}

	/**
	 * @param float $arcLength
	 * 
	 * @return \Array_hx
	 */
	public function divideByArcLength ($arcLength) {
		#src/verb/geom/NurbsCurve.hx:272: characters 9-67
		return Divide::rationalCurveByArcLength($this->_data, $arcLength);
	}

	/**
	 * @param int $divisions
	 * 
	 * @return \Array_hx
	 */
	public function divideByEqualArcLength ($divisions) {
		#src/verb/geom/NurbsCurve.hx:258: characters 9-72
		return Divide::rationalCurveByEqualArcLength($this->_data, $divisions);
	}

	/**
	 * @return Interval
	 */
	public function domain () {
		#src/verb/geom/NurbsCurve.hx:120: characters 30-49
		$tmp = ArrayExtensions::first($this->_data->knots);
		#src/verb/geom/NurbsCurve.hx:120: characters 9-70
		return new Interval($tmp, ArrayExtensions::last($this->_data->knots));
	}

	/**
	 * @return \Array_hx
	 */
	public function knots () {
		#src/verb/geom/NurbsCurve.hx:85: characters 43-70
		return $this->_data->knots->slice(0);
	}

	/**
	 * @return float
	 */
	public function length () {
		#src/verb/geom/NurbsCurve.hx:216: characters 9-55
		return Analyze::rationalCurveArcLength($this->_data);
	}

	/**
	 * @param float $u
	 * 
	 * @return float
	 */
	public function lengthAtParam ($u) {
		#src/verb/geom/NurbsCurve.hx:230: characters 9-58
		return Analyze::rationalCurveArcLength($this->_data, $u);
	}

	/**
	 * @param float $len
	 * @param float $tolerance
	 * 
	 * @return float
	 */
	public function paramAtLength ($len, $tolerance = null) {
		#src/verb/geom/NurbsCurve.hx:244: characters 9-78
		return Analyze::rationalCurveParamAtArcLength($this->_data, $len, $tolerance);
	}

	/**
	 * @param float $u
	 * 
	 * @return \Array_hx
	 */
	public function point ($u) {
		#src/verb/geom/NurbsCurve.hx:148: characters 9-51
		return Eval_hx::rationalCurvePoint($this->_data, $u);
	}

	/**
	 * @return NurbsCurve
	 */
	public function reverse () {
		#src/verb/geom/NurbsCurve.hx:296: characters 9-62
		return new NurbsCurve(Modify::curveReverse($this->_data));
	}

	/**
	 * @param float $u
	 * 
	 * @return \Array_hx
	 */
	public function split ($u) {
		#src/verb/geom/NurbsCurve.hx:286: characters 16-91
		$_this = Divide::curveSplit($this->_data, $u);
		$result = [];
		$data = $_this->arr;
		$_g_current = 0;
		$_g_length = \count($data);
		$_g_data = $data;
		while ($_g_current < $_g_length) {
			$item = $_g_data[$_g_current++];
			$result[] = new NurbsCurve($item);
		}
		return \Array_hx::wrap($result);
	}

	/**
	 * @param float $u
	 * 
	 * @return \Array_hx
	 */
	public function tangent ($u) {
		#src/verb/geom/NurbsCurve.hx:163: characters 9-53
		return Eval_hx::rationalCurveTangent($this->_data, $u);
	}

	/**
	 * @param float $tolerance
	 * 
	 * @return \Array_hx
	 */
	public function tessellate ($tolerance = null) {
		#src/verb/geom/NurbsCurve.hx:310: characters 9-75
		return Tess::rationalCurveAdaptiveSample($this->_data, $tolerance, false);
	}

	/**
	 * @param \Array_hx $mat
	 * 
	 * @return NurbsCurve
	 */
	public function transform ($mat) {
		#src/verb/geom/NurbsCurve.hx:134: characters 9-77
		return new NurbsCurve(Modify::rationalCurveTransform($this->_data, $mat));
	}

	/**
	 * @return \Array_hx
	 */
	public function weights () {
		#src/verb/geom/NurbsCurve.hx:91: characters 42-83
		return Eval_hx::weight1d($this->_data->controlPoints);
	}
}

Boot::registerClass(NurbsCurve::class, 'verb.geom.NurbsCurve');
