// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_ISerializable
#include <verb/core/ISerializable.h>
#endif
#ifndef INCLUDED_verb_core_NurbsSurfaceData
#include <verb/core/NurbsSurfaceData.h>
#endif
#ifndef INCLUDED_verb_core_SerializableBase
#include <verb/core/SerializableBase.h>
#endif
#ifndef INCLUDED_verb_eval_Make
#include <verb/eval/Make.h>
#endif
#ifndef INCLUDED_verb_geom_CylindricalSurface
#include <verb/geom/CylindricalSurface.h>
#endif
#ifndef INCLUDED_verb_geom_ISurface
#include <verb/geom/ISurface.h>
#endif
#ifndef INCLUDED_verb_geom_NurbsSurface
#include <verb/geom/NurbsSurface.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6386ac2dcd0e3559_24_new,"verb.geom.CylindricalSurface","new",0x13136914,"verb.geom.CylindricalSurface.new","verb/geom/CylindricalSurface.hx",24,0x36b65c7c)
HX_LOCAL_STACK_FRAME(_hx_pos_6386ac2dcd0e3559_41_axis,"verb.geom.CylindricalSurface","axis",0x955f216d,"verb.geom.CylindricalSurface.axis","verb/geom/CylindricalSurface.hx",41,0x36b65c7c)
HX_LOCAL_STACK_FRAME(_hx_pos_6386ac2dcd0e3559_44_xaxis,"verb.geom.CylindricalSurface","xaxis",0x4cece6cd,"verb.geom.CylindricalSurface.xaxis","verb/geom/CylindricalSurface.hx",44,0x36b65c7c)
HX_LOCAL_STACK_FRAME(_hx_pos_6386ac2dcd0e3559_47_base,"verb.geom.CylindricalSurface","base",0x95f6ecdd,"verb.geom.CylindricalSurface.base","verb/geom/CylindricalSurface.hx",47,0x36b65c7c)
HX_LOCAL_STACK_FRAME(_hx_pos_6386ac2dcd0e3559_50_height,"verb.geom.CylindricalSurface","height",0xe055d7b3,"verb.geom.CylindricalSurface.height","verb/geom/CylindricalSurface.hx",50,0x36b65c7c)
HX_LOCAL_STACK_FRAME(_hx_pos_6386ac2dcd0e3559_53_radius,"verb.geom.CylindricalSurface","radius",0x8f00a01e,"verb.geom.CylindricalSurface.radius","verb/geom/CylindricalSurface.hx",53,0x36b65c7c)
namespace verb{
namespace geom{

void CylindricalSurface_obj::__construct(::Array< Float > axis,::Array< Float > xaxis,::Array< Float > base,Float height,Float radius){
            	HX_STACKFRAME(&_hx_pos_6386ac2dcd0e3559_24_new)
HXLINE(  25)		super::__construct(::verb::eval::Make_obj::cylindricalSurface(axis,xaxis,base,height,radius));
HXLINE(  27)		this->_axis = axis;
HXLINE(  28)		this->_xaxis = xaxis;
HXLINE(  29)		this->_base = base;
HXLINE(  30)		this->_height = height;
HXLINE(  31)		this->_radius = radius;
            	}

Dynamic CylindricalSurface_obj::__CreateEmpty() { return new CylindricalSurface_obj; }

void *CylindricalSurface_obj::_hx_vtable = 0;

Dynamic CylindricalSurface_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CylindricalSurface_obj > _hx_result = new CylindricalSurface_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool CylindricalSurface_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0a621450) {
		if (inClassId<=(int)0x06d9bbfa) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x06d9bbfa;
		} else {
			return inClassId==(int)0x0a621450;
		}
	} else {
		return inClassId==(int)0x6101923e;
	}
}

::Array< Float > CylindricalSurface_obj::axis(){
            	HX_STACKFRAME(&_hx_pos_6386ac2dcd0e3559_41_axis)
HXDLIN(  41)		return this->_axis;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CylindricalSurface_obj,axis,return )

::Array< Float > CylindricalSurface_obj::xaxis(){
            	HX_STACKFRAME(&_hx_pos_6386ac2dcd0e3559_44_xaxis)
HXDLIN(  44)		return this->_xaxis;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CylindricalSurface_obj,xaxis,return )

::Array< Float > CylindricalSurface_obj::base(){
            	HX_STACKFRAME(&_hx_pos_6386ac2dcd0e3559_47_base)
HXDLIN(  47)		return this->_base;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CylindricalSurface_obj,base,return )

Float CylindricalSurface_obj::height(){
            	HX_STACKFRAME(&_hx_pos_6386ac2dcd0e3559_50_height)
HXDLIN(  50)		return this->_height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CylindricalSurface_obj,height,return )

Float CylindricalSurface_obj::radius(){
            	HX_STACKFRAME(&_hx_pos_6386ac2dcd0e3559_53_radius)
HXDLIN(  53)		return this->_radius;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CylindricalSurface_obj,radius,return )


::hx::ObjectPtr< CylindricalSurface_obj > CylindricalSurface_obj::__new(::Array< Float > axis,::Array< Float > xaxis,::Array< Float > base,Float height,Float radius) {
	::hx::ObjectPtr< CylindricalSurface_obj > __this = new CylindricalSurface_obj();
	__this->__construct(axis,xaxis,base,height,radius);
	return __this;
}

::hx::ObjectPtr< CylindricalSurface_obj > CylindricalSurface_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< Float > axis,::Array< Float > xaxis,::Array< Float > base,Float height,Float radius) {
	CylindricalSurface_obj *__this = (CylindricalSurface_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CylindricalSurface_obj), true, "verb.geom.CylindricalSurface"));
	*(void **)__this = CylindricalSurface_obj::_hx_vtable;
	__this->__construct(axis,xaxis,base,height,radius);
	return __this;
}

CylindricalSurface_obj::CylindricalSurface_obj()
{
}

void CylindricalSurface_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CylindricalSurface);
	HX_MARK_MEMBER_NAME(_axis,"_axis");
	HX_MARK_MEMBER_NAME(_xaxis,"_xaxis");
	HX_MARK_MEMBER_NAME(_base,"_base");
	HX_MARK_MEMBER_NAME(_height,"_height");
	HX_MARK_MEMBER_NAME(_radius,"_radius");
	 ::verb::geom::NurbsSurface_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CylindricalSurface_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_axis,"_axis");
	HX_VISIT_MEMBER_NAME(_xaxis,"_xaxis");
	HX_VISIT_MEMBER_NAME(_base,"_base");
	HX_VISIT_MEMBER_NAME(_height,"_height");
	HX_VISIT_MEMBER_NAME(_radius,"_radius");
	 ::verb::geom::NurbsSurface_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CylindricalSurface_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"axis") ) { return ::hx::Val( axis_dyn() ); }
		if (HX_FIELD_EQ(inName,"base") ) { return ::hx::Val( base_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_axis") ) { return ::hx::Val( _axis ); }
		if (HX_FIELD_EQ(inName,"_base") ) { return ::hx::Val( _base ); }
		if (HX_FIELD_EQ(inName,"xaxis") ) { return ::hx::Val( xaxis_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_xaxis") ) { return ::hx::Val( _xaxis ); }
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height_dyn() ); }
		if (HX_FIELD_EQ(inName,"radius") ) { return ::hx::Val( radius_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_height") ) { return ::hx::Val( _height ); }
		if (HX_FIELD_EQ(inName,"_radius") ) { return ::hx::Val( _radius ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CylindricalSurface_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_axis") ) { _axis=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_base") ) { _base=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_xaxis") ) { _xaxis=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_height") ) { _height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_radius") ) { _radius=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CylindricalSurface_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_axis",80,38,8a,f3));
	outFields->push(HX_("_xaxis",5a,00,76,54));
	outFields->push(HX_("_base",f0,03,22,f4));
	outFields->push(HX_("_height",86,19,c3,70));
	outFields->push(HX_("_radius",f1,e1,6d,1f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CylindricalSurface_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(CylindricalSurface_obj,_axis),HX_("_axis",80,38,8a,f3)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(CylindricalSurface_obj,_xaxis),HX_("_xaxis",5a,00,76,54)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(CylindricalSurface_obj,_base),HX_("_base",f0,03,22,f4)},
	{::hx::fsFloat,(int)offsetof(CylindricalSurface_obj,_height),HX_("_height",86,19,c3,70)},
	{::hx::fsFloat,(int)offsetof(CylindricalSurface_obj,_radius),HX_("_radius",f1,e1,6d,1f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CylindricalSurface_obj_sStaticStorageInfo = 0;
#endif

static ::String CylindricalSurface_obj_sMemberFields[] = {
	HX_("_axis",80,38,8a,f3),
	HX_("_xaxis",5a,00,76,54),
	HX_("_base",f0,03,22,f4),
	HX_("_height",86,19,c3,70),
	HX_("_radius",f1,e1,6d,1f),
	HX_("axis",a1,1c,79,40),
	HX_("xaxis",19,b9,8e,58),
	HX_("base",11,e8,10,41),
	HX_("height",e7,07,4c,02),
	HX_("radius",52,d0,f6,b0),
	::String(null()) };

::hx::Class CylindricalSurface_obj::__mClass;

void CylindricalSurface_obj::__register()
{
	CylindricalSurface_obj _hx_dummy;
	CylindricalSurface_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.geom.CylindricalSurface",22,8f,c4,e1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CylindricalSurface_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CylindricalSurface_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CylindricalSurface_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CylindricalSurface_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace geom
