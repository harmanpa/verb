// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_ArrayExtensions
#include <verb/core/ArrayExtensions.h>
#endif
#ifndef INCLUDED_verb_core_ISerializable
#include <verb/core/ISerializable.h>
#endif
#ifndef INCLUDED_verb_core_Interval
#include <verb/core/Interval.h>
#endif
#ifndef INCLUDED_verb_core_MeshData
#include <verb/core/MeshData.h>
#endif
#ifndef INCLUDED_verb_core_NurbsCurveData
#include <verb/core/NurbsCurveData.h>
#endif
#ifndef INCLUDED_verb_core_NurbsSurfaceData
#include <verb/core/NurbsSurfaceData.h>
#endif
#ifndef INCLUDED_verb_core_SerializableBase
#include <verb/core/SerializableBase.h>
#endif
#ifndef INCLUDED_verb_eval_AdaptiveRefinementOptions
#include <verb/eval/AdaptiveRefinementOptions.h>
#endif
#ifndef INCLUDED_verb_eval_Analyze
#include <verb/eval/Analyze.h>
#endif
#ifndef INCLUDED_verb_eval_Check
#include <verb/eval/Check.h>
#endif
#ifndef INCLUDED_verb_eval_Divide
#include <verb/eval/Divide.h>
#endif
#ifndef INCLUDED_verb_eval_Eval
#include <verb/eval/Eval.h>
#endif
#ifndef INCLUDED_verb_eval_Make
#include <verb/eval/Make.h>
#endif
#ifndef INCLUDED_verb_eval_Modify
#include <verb/eval/Modify.h>
#endif
#ifndef INCLUDED_verb_eval_Tess
#include <verb/eval/Tess.h>
#endif
#ifndef INCLUDED_verb_geom_ICurve
#include <verb/geom/ICurve.h>
#endif
#ifndef INCLUDED_verb_geom_ISurface
#include <verb/geom/ISurface.h>
#endif
#ifndef INCLUDED_verb_geom_NurbsCurve
#include <verb/geom/NurbsCurve.h>
#endif
#ifndef INCLUDED_verb_geom_NurbsSurface
#include <verb/geom/NurbsSurface.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d1439c33abf18339_38_new,"verb.geom.NurbsSurface","new",0x42d75926,"verb.geom.NurbsSurface.new","verb/geom/NurbsSurface.hx",38,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_104_degreeU,"verb.geom.NurbsSurface","degreeU",0xfa99474f,"verb.geom.NurbsSurface.degreeU","verb/geom/NurbsSurface.hx",104,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_108_degreeV,"verb.geom.NurbsSurface","degreeV",0xfa994750,"verb.geom.NurbsSurface.degreeV","verb/geom/NurbsSurface.hx",108,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_112_knotsU,"verb.geom.NurbsSurface","knotsU",0xc13c3b04,"verb.geom.NurbsSurface.knotsU","verb/geom/NurbsSurface.hx",112,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_116_knotsV,"verb.geom.NurbsSurface","knotsV",0xc13c3b05,"verb.geom.NurbsSurface.knotsV","verb/geom/NurbsSurface.hx",116,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_120_controlPoints,"verb.geom.NurbsSurface","controlPoints",0xe936d1a6,"verb.geom.NurbsSurface.controlPoints","verb/geom/NurbsSurface.hx",120,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_124_weights,"verb.geom.NurbsSurface","weights",0x303b3bc1,"verb.geom.NurbsSurface.weights","verb/geom/NurbsSurface.hx",124,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_133_asNurbs,"verb.geom.NurbsSurface","asNurbs",0xb3d8ee50,"verb.geom.NurbsSurface.asNurbs","verb/geom/NurbsSurface.hx",133,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_143_clone,"verb.geom.NurbsSurface","clone",0xd96ed9a3,"verb.geom.NurbsSurface.clone","verb/geom/NurbsSurface.hx",143,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_153_domainU,"verb.geom.NurbsSurface","domainU",0x6358ce57,"verb.geom.NurbsSurface.domainU","verb/geom/NurbsSurface.hx",153,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_163_domainV,"verb.geom.NurbsSurface","domainV",0x6358ce58,"verb.geom.NurbsSurface.domainV","verb/geom/NurbsSurface.hx",163,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_178_point,"verb.geom.NurbsSurface","point",0x579b7a96,"verb.geom.NurbsSurface.point","verb/geom/NurbsSurface.hx",178,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_193_normal,"verb.geom.NurbsSurface","normal",0x89ab2921,"verb.geom.NurbsSurface.normal","verb/geom/NurbsSurface.hx",193,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_213_derivatives,"verb.geom.NurbsSurface","derivatives",0x0136d152,"verb.geom.NurbsSurface.derivatives","verb/geom/NurbsSurface.hx",213,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_227_closestParam,"verb.geom.NurbsSurface","closestParam",0xfcf121ee,"verb.geom.NurbsSurface.closestParam","verb/geom/NurbsSurface.hx",227,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_241_closestPoint,"verb.geom.NurbsSurface","closestPoint",0x062b55b1,"verb.geom.NurbsSurface.closestPoint","verb/geom/NurbsSurface.hx",241,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_256_split,"verb.geom.NurbsSurface","split",0x127ab120,"verb.geom.NurbsSurface.split","verb/geom/NurbsSurface.hx",256,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_271_reverse,"verb.geom.NurbsSurface","reverse",0xdb3a9ce8,"verb.geom.NurbsSurface.reverse","verb/geom/NurbsSurface.hx",271,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_286_isocurve,"verb.geom.NurbsSurface","isocurve",0x4a236ac4,"verb.geom.NurbsSurface.isocurve","verb/geom/NurbsSurface.hx",286,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_296_boundaries,"verb.geom.NurbsSurface","boundaries",0xa43007c2,"verb.geom.NurbsSurface.boundaries","verb/geom/NurbsSurface.hx",296,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_311_tessellate,"verb.geom.NurbsSurface","tessellate",0x014b3a18,"verb.geom.NurbsSurface.tessellate","verb/geom/NurbsSurface.hx",311,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_325_transform,"verb.geom.NurbsSurface","transform",0x5d068eb2,"verb.geom.NurbsSurface.transform","verb/geom/NurbsSurface.hx",325,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_63_byKnotsControlPointsWeights,"verb.geom.NurbsSurface","byKnotsControlPointsWeights",0xf60aa7f5,"verb.geom.NurbsSurface.byKnotsControlPointsWeights","verb/geom/NurbsSurface.hx",63,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_80_byCorners,"verb.geom.NurbsSurface","byCorners",0x1121472d,"verb.geom.NurbsSurface.byCorners","verb/geom/NurbsSurface.hx",80,0x49841caa)
HX_LOCAL_STACK_FRAME(_hx_pos_d1439c33abf18339_94_byLoftingCurves,"verb.geom.NurbsSurface","byLoftingCurves",0xb5a62424,"verb.geom.NurbsSurface.byLoftingCurves","verb/geom/NurbsSurface.hx",94,0x49841caa)
namespace verb{
namespace geom{

void NurbsSurface_obj::__construct( ::verb::core::NurbsSurfaceData data){
            	HX_STACKFRAME(&_hx_pos_d1439c33abf18339_38_new)
HXDLIN(  38)		this->_data = ::verb::eval::Check_obj::isValidNurbsSurfaceData(data);
            	}

Dynamic NurbsSurface_obj::__CreateEmpty() { return new NurbsSurface_obj; }

void *NurbsSurface_obj::_hx_vtable = 0;

Dynamic NurbsSurface_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NurbsSurface_obj > _hx_result = new NurbsSurface_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool NurbsSurface_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x06d9bbfa) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x06d9bbfa;
	} else {
		return inClassId==(int)0x0a621450;
	}
}

static ::verb::core::ISerializable_obj _hx_verb_geom_NurbsSurface__hx_verb_core_ISerializable= {
	( ::String (::hx::Object::*)())&::verb::geom::NurbsSurface_obj::serialize,
};

static ::verb::geom::ISurface_obj _hx_verb_geom_NurbsSurface__hx_verb_geom_ISurface= {
	( ::String (::hx::Object::*)())&::verb::geom::NurbsSurface_obj::serialize,
	(  ::verb::core::NurbsSurfaceData (::hx::Object::*)())&::verb::geom::NurbsSurface_obj::asNurbs,
	(  ::verb::core::Interval (::hx::Object::*)())&::verb::geom::NurbsSurface_obj::domainU,
	(  ::verb::core::Interval (::hx::Object::*)())&::verb::geom::NurbsSurface_obj::domainV,
	( ::Array< Float > (::hx::Object::*)(Float,Float))&::verb::geom::NurbsSurface_obj::point,
	( ::Array< ::Dynamic> (::hx::Object::*)(Float,Float,::hx::Null< int > ))&::verb::geom::NurbsSurface_obj::derivatives,
};

void *NurbsSurface_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x62a1c1ea: return &_hx_verb_geom_NurbsSurface__hx_verb_core_ISerializable;
		case (int)0x733f72bf: return &_hx_verb_geom_NurbsSurface__hx_verb_geom_ISurface;
	}
	return super::_hx_getInterface(inHash);
}

int NurbsSurface_obj::degreeU(){
            	HX_STACKFRAME(&_hx_pos_d1439c33abf18339_104_degreeU)
HXDLIN( 104)		return this->_data->degreeU;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NurbsSurface_obj,degreeU,return )

int NurbsSurface_obj::degreeV(){
            	HX_STACKFRAME(&_hx_pos_d1439c33abf18339_108_degreeV)
HXDLIN( 108)		return this->_data->degreeV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NurbsSurface_obj,degreeV,return )

::Array< Float > NurbsSurface_obj::knotsU(){
            	HX_STACKFRAME(&_hx_pos_d1439c33abf18339_112_knotsU)
HXDLIN( 112)		return this->_data->knotsU->slice(0,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(NurbsSurface_obj,knotsU,return )

::Array< Float > NurbsSurface_obj::knotsV(){
            	HX_STACKFRAME(&_hx_pos_d1439c33abf18339_116_knotsV)
HXDLIN( 116)		return this->_data->knotsV->slice(0,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(NurbsSurface_obj,knotsV,return )

::Array< ::Dynamic> NurbsSurface_obj::controlPoints(){
            	HX_STACKFRAME(&_hx_pos_d1439c33abf18339_120_controlPoints)
HXDLIN( 120)		return ::verb::eval::Eval_obj::dehomogenize2d(this->_data->controlPoints);
            	}


HX_DEFINE_DYNAMIC_FUNC0(NurbsSurface_obj,controlPoints,return )

::Array< ::Dynamic> NurbsSurface_obj::weights(){
            	HX_STACKFRAME(&_hx_pos_d1439c33abf18339_124_weights)
HXDLIN( 124)		return ::verb::eval::Eval_obj::weight2d(this->_data->controlPoints);
            	}


HX_DEFINE_DYNAMIC_FUNC0(NurbsSurface_obj,weights,return )

 ::verb::core::NurbsSurfaceData NurbsSurface_obj::asNurbs(){
            	HX_GC_STACKFRAME(&_hx_pos_d1439c33abf18339_133_asNurbs)
HXDLIN( 133)		int _hx_tmp = this->degreeU();
HXDLIN( 133)		int _hx_tmp1 = this->degreeV();
HXDLIN( 133)		::Array< Float > _hx_tmp2 = this->knotsU();
HXDLIN( 133)		::Array< Float > _hx_tmp3 = this->knotsV();
HXDLIN( 133)		::Array< ::Dynamic> _hx_tmp4 = this->controlPoints();
HXDLIN( 133)		return  ::verb::core::NurbsSurfaceData_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,::verb::eval::Eval_obj::homogenize2d(_hx_tmp4,this->weights()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(NurbsSurface_obj,asNurbs,return )

 ::verb::geom::NurbsSurface NurbsSurface_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_d1439c33abf18339_143_clone)
HXDLIN( 143)		return  ::verb::geom::NurbsSurface_obj::__alloc( HX_CTX ,this->asNurbs());
            	}


HX_DEFINE_DYNAMIC_FUNC0(NurbsSurface_obj,clone,return )

 ::verb::core::Interval NurbsSurface_obj::domainU(){
            	HX_GC_STACKFRAME(&_hx_pos_d1439c33abf18339_153_domainU)
HXDLIN( 153)		Float _hx_tmp = ( (Float)(::verb::core::ArrayExtensions_obj::first(this->_data->knotsU)) );
HXDLIN( 153)		return  ::verb::core::Interval_obj::__alloc( HX_CTX ,_hx_tmp,::verb::core::ArrayExtensions_obj::last(this->_data->knotsU));
            	}


HX_DEFINE_DYNAMIC_FUNC0(NurbsSurface_obj,domainU,return )

 ::verb::core::Interval NurbsSurface_obj::domainV(){
            	HX_GC_STACKFRAME(&_hx_pos_d1439c33abf18339_163_domainV)
HXDLIN( 163)		Float _hx_tmp = ( (Float)(::verb::core::ArrayExtensions_obj::first(this->_data->knotsV)) );
HXDLIN( 163)		return  ::verb::core::Interval_obj::__alloc( HX_CTX ,_hx_tmp,::verb::core::ArrayExtensions_obj::last(this->_data->knotsV));
            	}


HX_DEFINE_DYNAMIC_FUNC0(NurbsSurface_obj,domainV,return )

::Array< Float > NurbsSurface_obj::point(Float u,Float v){
            	HX_STACKFRAME(&_hx_pos_d1439c33abf18339_178_point)
HXDLIN( 178)		return ::verb::eval::Eval_obj::rationalSurfacePoint(this->_data,u,v);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NurbsSurface_obj,point,return )

::Array< Float > NurbsSurface_obj::normal(Float u,Float v){
            	HX_STACKFRAME(&_hx_pos_d1439c33abf18339_193_normal)
HXDLIN( 193)		return ::verb::eval::Eval_obj::rationalSurfaceNormal(this->_data,u,v);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NurbsSurface_obj,normal,return )

::Array< ::Dynamic> NurbsSurface_obj::derivatives(Float u,Float v,::hx::Null< int >  __o_numDerivs){
            		int numDerivs = __o_numDerivs.Default(1);
            	HX_STACKFRAME(&_hx_pos_d1439c33abf18339_213_derivatives)
HXDLIN( 213)		return ::verb::eval::Eval_obj::rationalSurfaceDerivatives(this->_data,u,v,numDerivs);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NurbsSurface_obj,derivatives,return )

::Array< Float > NurbsSurface_obj::closestParam(::Array< Float > pt){
            	HX_STACKFRAME(&_hx_pos_d1439c33abf18339_227_closestParam)
HXDLIN( 227)		return ::verb::eval::Analyze_obj::rationalSurfaceClosestParam(this->_data,pt);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NurbsSurface_obj,closestParam,return )

::Array< Float > NurbsSurface_obj::closestPoint(::Array< Float > pt){
            	HX_STACKFRAME(&_hx_pos_d1439c33abf18339_241_closestPoint)
HXDLIN( 241)		return ::verb::eval::Analyze_obj::rationalSurfaceClosestPoint(this->_data,pt);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NurbsSurface_obj,closestPoint,return )

::Array< ::Dynamic> NurbsSurface_obj::split(Float u,::hx::Null< bool >  __o_useV){
            		bool useV = __o_useV.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_d1439c33abf18339_256_split)
HXDLIN( 256)		::Array< ::Dynamic> _this = ::verb::eval::Divide_obj::surfaceSplit(this->_data,u,useV);
HXDLIN( 256)		::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(_this->length);
HXDLIN( 256)		{
HXDLIN( 256)			int _g = 0;
HXDLIN( 256)			int _g1 = _this->length;
HXDLIN( 256)			while((_g < _g1)){
HXDLIN( 256)				_g = (_g + 1);
HXDLIN( 256)				int i = (_g - 1);
HXDLIN( 256)				{
HXDLIN( 256)					 ::verb::geom::NurbsSurface inValue =  ::verb::geom::NurbsSurface_obj::__alloc( HX_CTX ,( ( ::verb::core::NurbsSurfaceData)(_hx_array_unsafe_get(_this,i)) ));
HXDLIN( 256)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN( 256)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(NurbsSurface_obj,split,return )

 ::verb::geom::NurbsSurface NurbsSurface_obj::reverse(::hx::Null< bool >  __o_useV){
            		bool useV = __o_useV.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_d1439c33abf18339_271_reverse)
HXDLIN( 271)		return  ::verb::geom::NurbsSurface_obj::__alloc( HX_CTX ,::verb::eval::Modify_obj::surfaceReverse(this->_data,useV));
            	}


HX_DEFINE_DYNAMIC_FUNC1(NurbsSurface_obj,reverse,return )

 ::verb::geom::NurbsCurve NurbsSurface_obj::isocurve(Float u,::hx::Null< bool >  __o_useV){
            		bool useV = __o_useV.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_d1439c33abf18339_286_isocurve)
HXDLIN( 286)		return  ::verb::geom::NurbsCurve_obj::__alloc( HX_CTX ,::verb::eval::Make_obj::surfaceIsocurve(this->_data,u,useV));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NurbsSurface_obj,isocurve,return )

::Array< ::Dynamic> NurbsSurface_obj::boundaries( ::verb::eval::AdaptiveRefinementOptions options){
            	HX_GC_STACKFRAME(&_hx_pos_d1439c33abf18339_296_boundaries)
HXDLIN( 296)		::Array< ::Dynamic> _this = ::verb::eval::Make_obj::surfaceBoundaryCurves(this->_data);
HXDLIN( 296)		::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new(_this->length);
HXDLIN( 296)		{
HXDLIN( 296)			int _g = 0;
HXDLIN( 296)			int _g1 = _this->length;
HXDLIN( 296)			while((_g < _g1)){
HXDLIN( 296)				_g = (_g + 1);
HXDLIN( 296)				int i = (_g - 1);
HXDLIN( 296)				{
HXDLIN( 296)					 ::verb::geom::NurbsCurve inValue =  ::verb::geom::NurbsCurve_obj::__alloc( HX_CTX ,( ( ::verb::core::NurbsCurveData)(_hx_array_unsafe_get(_this,i)) ));
HXDLIN( 296)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN( 296)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NurbsSurface_obj,boundaries,return )

 ::verb::core::MeshData NurbsSurface_obj::tessellate( ::verb::eval::AdaptiveRefinementOptions options){
            	HX_STACKFRAME(&_hx_pos_d1439c33abf18339_311_tessellate)
HXDLIN( 311)		return ::verb::eval::Tess_obj::rationalSurfaceAdaptive(this->_data,options);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NurbsSurface_obj,tessellate,return )

 ::verb::geom::NurbsSurface NurbsSurface_obj::transform(::Array< ::Dynamic> mat){
            	HX_GC_STACKFRAME(&_hx_pos_d1439c33abf18339_325_transform)
HXDLIN( 325)		return  ::verb::geom::NurbsSurface_obj::__alloc( HX_CTX ,::verb::eval::Modify_obj::rationalSurfaceTransform(this->_data,mat));
            	}


HX_DEFINE_DYNAMIC_FUNC1(NurbsSurface_obj,transform,return )

 ::verb::geom::NurbsSurface NurbsSurface_obj::byKnotsControlPointsWeights(int degreeU,int degreeV,::Array< Float > knotsU,::Array< Float > knotsV,::Array< ::Dynamic> controlPoints,::Array< ::Dynamic> weights){
            	HX_GC_STACKFRAME(&_hx_pos_d1439c33abf18339_63_byKnotsControlPointsWeights)
HXDLIN(  63)		return  ::verb::geom::NurbsSurface_obj::__alloc( HX_CTX , ::verb::core::NurbsSurfaceData_obj::__alloc( HX_CTX ,degreeU,degreeV,knotsU,knotsV,::verb::eval::Eval_obj::homogenize2d(controlPoints,weights)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(NurbsSurface_obj,byKnotsControlPointsWeights,return )

 ::verb::geom::NurbsSurface NurbsSurface_obj::byCorners(::Array< Float > point0,::Array< Float > point1,::Array< Float > point2,::Array< Float > point3){
            	HX_GC_STACKFRAME(&_hx_pos_d1439c33abf18339_80_byCorners)
HXDLIN(  80)		return  ::verb::geom::NurbsSurface_obj::__alloc( HX_CTX ,::verb::eval::Make_obj::fourPointSurface(point0,point1,point2,point3,null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(NurbsSurface_obj,byCorners,return )

 ::verb::geom::NurbsSurface NurbsSurface_obj::byLoftingCurves(::Array< ::Dynamic> curves, ::Dynamic degreeV){
            	HX_GC_STACKFRAME(&_hx_pos_d1439c33abf18339_94_byLoftingCurves)
HXDLIN(  94)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  94)		{
HXDLIN(  94)			int _g1 = 0;
HXDLIN(  94)			while((_g1 < curves->length)){
HXDLIN(  94)				::Dynamic c = curves->__get(_g1);
HXDLIN(  94)				_g1 = (_g1 + 1);
HXDLIN(  94)				_g->push(::verb::geom::ICurve_obj::asNurbs(c));
            			}
            		}
HXDLIN(  94)		return  ::verb::geom::NurbsSurface_obj::__alloc( HX_CTX ,::verb::eval::Make_obj::loftedSurface(_g,degreeV));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(NurbsSurface_obj,byLoftingCurves,return )


::hx::ObjectPtr< NurbsSurface_obj > NurbsSurface_obj::__new( ::verb::core::NurbsSurfaceData data) {
	::hx::ObjectPtr< NurbsSurface_obj > __this = new NurbsSurface_obj();
	__this->__construct(data);
	return __this;
}

::hx::ObjectPtr< NurbsSurface_obj > NurbsSurface_obj::__alloc(::hx::Ctx *_hx_ctx, ::verb::core::NurbsSurfaceData data) {
	NurbsSurface_obj *__this = (NurbsSurface_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NurbsSurface_obj), true, "verb.geom.NurbsSurface"));
	*(void **)__this = NurbsSurface_obj::_hx_vtable;
	__this->__construct(data);
	return __this;
}

NurbsSurface_obj::NurbsSurface_obj()
{
}

void NurbsSurface_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NurbsSurface);
	HX_MARK_MEMBER_NAME(_data,"_data");
	HX_MARK_END_CLASS();
}

void NurbsSurface_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_data,"_data");
}

::hx::Val NurbsSurface_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_data") ) { return ::hx::Val( _data ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"point") ) { return ::hx::Val( point_dyn() ); }
		if (HX_FIELD_EQ(inName,"split") ) { return ::hx::Val( split_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"knotsU") ) { return ::hx::Val( knotsU_dyn() ); }
		if (HX_FIELD_EQ(inName,"knotsV") ) { return ::hx::Val( knotsV_dyn() ); }
		if (HX_FIELD_EQ(inName,"normal") ) { return ::hx::Val( normal_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"degreeU") ) { return ::hx::Val( degreeU_dyn() ); }
		if (HX_FIELD_EQ(inName,"degreeV") ) { return ::hx::Val( degreeV_dyn() ); }
		if (HX_FIELD_EQ(inName,"weights") ) { return ::hx::Val( weights_dyn() ); }
		if (HX_FIELD_EQ(inName,"asNurbs") ) { return ::hx::Val( asNurbs_dyn() ); }
		if (HX_FIELD_EQ(inName,"domainU") ) { return ::hx::Val( domainU_dyn() ); }
		if (HX_FIELD_EQ(inName,"domainV") ) { return ::hx::Val( domainV_dyn() ); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return ::hx::Val( reverse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isocurve") ) { return ::hx::Val( isocurve_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { return ::hx::Val( transform_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"boundaries") ) { return ::hx::Val( boundaries_dyn() ); }
		if (HX_FIELD_EQ(inName,"tessellate") ) { return ::hx::Val( tessellate_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"derivatives") ) { return ::hx::Val( derivatives_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"closestParam") ) { return ::hx::Val( closestParam_dyn() ); }
		if (HX_FIELD_EQ(inName,"closestPoint") ) { return ::hx::Val( closestPoint_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"controlPoints") ) { return ::hx::Val( controlPoints_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool NurbsSurface_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"byCorners") ) { outValue = byCorners_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"byLoftingCurves") ) { outValue = byLoftingCurves_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"byKnotsControlPointsWeights") ) { outValue = byKnotsControlPointsWeights_dyn(); return true; }
	}
	return false;
}

::hx::Val NurbsSurface_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_data") ) { _data=inValue.Cast<  ::verb::core::NurbsSurfaceData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NurbsSurface_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_data",09,72,74,f5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo NurbsSurface_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::verb::core::NurbsSurfaceData */ ,(int)offsetof(NurbsSurface_obj,_data),HX_("_data",09,72,74,f5)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *NurbsSurface_obj_sStaticStorageInfo = 0;
#endif

static ::String NurbsSurface_obj_sMemberFields[] = {
	HX_("_data",09,72,74,f5),
	HX_("degreeU",89,e3,5a,3a),
	HX_("degreeV",8a,e3,5a,3a),
	HX_("knotsU",0a,84,fa,67),
	HX_("knotsV",0b,84,fa,67),
	HX_("controlPoints",60,55,f2,6f),
	HX_("weights",fb,d7,fc,6f),
	HX_("asNurbs",8a,8a,9a,f3),
	HX_("clone",5d,13,63,48),
	HX_("domainU",91,6a,1a,a3),
	HX_("domainV",92,6a,1a,a3),
	HX_("point",50,b4,8f,c6),
	HX_("normal",27,72,69,30),
	HX_("derivatives",8c,12,34,9d),
	HX_("closestParam",74,f3,8c,de),
	HX_("closestPoint",37,27,c7,e7),
	HX_("split",da,ea,6e,81),
	HX_("reverse",22,39,fc,1a),
	HX_("isocurve",4a,81,ca,d3),
	HX_("boundaries",c8,4b,ae,36),
	HX_("tessellate",1e,7e,c9,93),
	HX_("transform",6c,2d,93,45),
	::String(null()) };

::hx::Class NurbsSurface_obj::__mClass;

static ::String NurbsSurface_obj_sStaticFields[] = {
	HX_("byKnotsControlPointsWeights",2f,7d,97,af),
	HX_("byCorners",e7,e5,ad,f9),
	HX_("byLoftingCurves",5e,8a,15,05),
	::String(null())
};

void NurbsSurface_obj::__register()
{
	NurbsSurface_obj _hx_dummy;
	NurbsSurface_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.geom.NurbsSurface",34,8e,e6,61);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NurbsSurface_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(NurbsSurface_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NurbsSurface_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NurbsSurface_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NurbsSurface_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NurbsSurface_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace geom
