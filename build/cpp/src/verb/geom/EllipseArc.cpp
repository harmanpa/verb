// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_ISerializable
#include <verb/core/ISerializable.h>
#endif
#ifndef INCLUDED_verb_core_NurbsCurveData
#include <verb/core/NurbsCurveData.h>
#endif
#ifndef INCLUDED_verb_core_SerializableBase
#include <verb/core/SerializableBase.h>
#endif
#ifndef INCLUDED_verb_eval_Make
#include <verb/eval/Make.h>
#endif
#ifndef INCLUDED_verb_geom_EllipseArc
#include <verb/geom/EllipseArc.h>
#endif
#ifndef INCLUDED_verb_geom_ICurve
#include <verb/geom/ICurve.h>
#endif
#ifndef INCLUDED_verb_geom_NurbsCurve
#include <verb/geom/NurbsCurve.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8388ccc3561c1b25_27_new,"verb.geom.EllipseArc","new",0xa7a8bf49,"verb.geom.EllipseArc.new","verb/geom/EllipseArc.hx",27,0xef82e3e7)
HX_LOCAL_STACK_FRAME(_hx_pos_8388ccc3561c1b25_44_center,"verb.geom.EllipseArc","center",0x95d1ae8c,"verb.geom.EllipseArc.center","verb/geom/EllipseArc.hx",44,0xef82e3e7)
HX_LOCAL_STACK_FRAME(_hx_pos_8388ccc3561c1b25_47_xaxis,"verb.geom.EllipseArc","xaxis",0x322bf442,"verb.geom.EllipseArc.xaxis","verb/geom/EllipseArc.hx",47,0xef82e3e7)
HX_LOCAL_STACK_FRAME(_hx_pos_8388ccc3561c1b25_50_yaxis,"verb.geom.EllipseArc","yaxis",0xc59288c3,"verb.geom.EllipseArc.yaxis","verb/geom/EllipseArc.hx",50,0xef82e3e7)
HX_LOCAL_STACK_FRAME(_hx_pos_8388ccc3561c1b25_53_minAngle,"verb.geom.EllipseArc","minAngle",0x7b4d1558,"verb.geom.EllipseArc.minAngle","verb/geom/EllipseArc.hx",53,0xef82e3e7)
HX_LOCAL_STACK_FRAME(_hx_pos_8388ccc3561c1b25_56_maxAngle,"verb.geom.EllipseArc","maxAngle",0x2e32fb06,"verb.geom.EllipseArc.maxAngle","verb/geom/EllipseArc.hx",56,0xef82e3e7)
namespace verb{
namespace geom{

void EllipseArc_obj::__construct(::Array< Float > center,::Array< Float > xaxis,::Array< Float > yaxis,Float minAngle,Float maxAngle){
            	HX_STACKFRAME(&_hx_pos_8388ccc3561c1b25_27_new)
HXLINE(  28)		super::__construct(::verb::eval::Make_obj::ellipseArc(center,xaxis,yaxis,minAngle,maxAngle));
HXLINE(  30)		this->_center = center;
HXLINE(  31)		this->_xaxis = xaxis;
HXLINE(  32)		this->_yaxis = yaxis;
HXLINE(  33)		this->_minAngle = minAngle;
HXLINE(  34)		this->_maxAngle = maxAngle;
            	}

Dynamic EllipseArc_obj::__CreateEmpty() { return new EllipseArc_obj; }

void *EllipseArc_obj::_hx_vtable = 0;

Dynamic EllipseArc_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EllipseArc_obj > _hx_result = new EllipseArc_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool EllipseArc_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x69541c12) {
		if (inClassId<=(int)0x06d9bbfa) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x06d9bbfa;
		} else {
			return inClassId==(int)0x69541c12;
		}
	} else {
		return inClassId==(int)0x6d91edf3;
	}
}

::Array< Float > EllipseArc_obj::center(){
            	HX_STACKFRAME(&_hx_pos_8388ccc3561c1b25_44_center)
HXDLIN(  44)		return this->_center;
            	}


HX_DEFINE_DYNAMIC_FUNC0(EllipseArc_obj,center,return )

::Array< Float > EllipseArc_obj::xaxis(){
            	HX_STACKFRAME(&_hx_pos_8388ccc3561c1b25_47_xaxis)
HXDLIN(  47)		return this->_xaxis;
            	}


HX_DEFINE_DYNAMIC_FUNC0(EllipseArc_obj,xaxis,return )

::Array< Float > EllipseArc_obj::yaxis(){
            	HX_STACKFRAME(&_hx_pos_8388ccc3561c1b25_50_yaxis)
HXDLIN(  50)		return this->_yaxis;
            	}


HX_DEFINE_DYNAMIC_FUNC0(EllipseArc_obj,yaxis,return )

Float EllipseArc_obj::minAngle(){
            	HX_STACKFRAME(&_hx_pos_8388ccc3561c1b25_53_minAngle)
HXDLIN(  53)		return this->_minAngle;
            	}


HX_DEFINE_DYNAMIC_FUNC0(EllipseArc_obj,minAngle,return )

Float EllipseArc_obj::maxAngle(){
            	HX_STACKFRAME(&_hx_pos_8388ccc3561c1b25_56_maxAngle)
HXDLIN(  56)		return this->_maxAngle;
            	}


HX_DEFINE_DYNAMIC_FUNC0(EllipseArc_obj,maxAngle,return )


::hx::ObjectPtr< EllipseArc_obj > EllipseArc_obj::__new(::Array< Float > center,::Array< Float > xaxis,::Array< Float > yaxis,Float minAngle,Float maxAngle) {
	::hx::ObjectPtr< EllipseArc_obj > __this = new EllipseArc_obj();
	__this->__construct(center,xaxis,yaxis,minAngle,maxAngle);
	return __this;
}

::hx::ObjectPtr< EllipseArc_obj > EllipseArc_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< Float > center,::Array< Float > xaxis,::Array< Float > yaxis,Float minAngle,Float maxAngle) {
	EllipseArc_obj *__this = (EllipseArc_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EllipseArc_obj), true, "verb.geom.EllipseArc"));
	*(void **)__this = EllipseArc_obj::_hx_vtable;
	__this->__construct(center,xaxis,yaxis,minAngle,maxAngle);
	return __this;
}

EllipseArc_obj::EllipseArc_obj()
{
}

void EllipseArc_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EllipseArc);
	HX_MARK_MEMBER_NAME(_center,"_center");
	HX_MARK_MEMBER_NAME(_xaxis,"_xaxis");
	HX_MARK_MEMBER_NAME(_yaxis,"_yaxis");
	HX_MARK_MEMBER_NAME(_minAngle,"_minAngle");
	HX_MARK_MEMBER_NAME(_maxAngle,"_maxAngle");
	 ::verb::geom::NurbsCurve_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void EllipseArc_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_center,"_center");
	HX_VISIT_MEMBER_NAME(_xaxis,"_xaxis");
	HX_VISIT_MEMBER_NAME(_yaxis,"_yaxis");
	HX_VISIT_MEMBER_NAME(_minAngle,"_minAngle");
	HX_VISIT_MEMBER_NAME(_maxAngle,"_maxAngle");
	 ::verb::geom::NurbsCurve_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val EllipseArc_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"xaxis") ) { return ::hx::Val( xaxis_dyn() ); }
		if (HX_FIELD_EQ(inName,"yaxis") ) { return ::hx::Val( yaxis_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_xaxis") ) { return ::hx::Val( _xaxis ); }
		if (HX_FIELD_EQ(inName,"_yaxis") ) { return ::hx::Val( _yaxis ); }
		if (HX_FIELD_EQ(inName,"center") ) { return ::hx::Val( center_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_center") ) { return ::hx::Val( _center ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"minAngle") ) { return ::hx::Val( minAngle_dyn() ); }
		if (HX_FIELD_EQ(inName,"maxAngle") ) { return ::hx::Val( maxAngle_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_minAngle") ) { return ::hx::Val( _minAngle ); }
		if (HX_FIELD_EQ(inName,"_maxAngle") ) { return ::hx::Val( _maxAngle ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val EllipseArc_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_xaxis") ) { _xaxis=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_yaxis") ) { _yaxis=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_center") ) { _center=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_minAngle") ) { _minAngle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_maxAngle") ) { _maxAngle=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EllipseArc_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_center",74,37,52,74));
	outFields->push(HX_("_xaxis",5a,00,76,54));
	outFields->push(HX_("_yaxis",db,94,dc,e7));
	outFields->push(HX_("_minAngle",40,a8,af,61));
	outFields->push(HX_("_maxAngle",ee,8d,95,14));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EllipseArc_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(EllipseArc_obj,_center),HX_("_center",74,37,52,74)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(EllipseArc_obj,_xaxis),HX_("_xaxis",5a,00,76,54)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(EllipseArc_obj,_yaxis),HX_("_yaxis",db,94,dc,e7)},
	{::hx::fsFloat,(int)offsetof(EllipseArc_obj,_minAngle),HX_("_minAngle",40,a8,af,61)},
	{::hx::fsFloat,(int)offsetof(EllipseArc_obj,_maxAngle),HX_("_maxAngle",ee,8d,95,14)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *EllipseArc_obj_sStaticStorageInfo = 0;
#endif

static ::String EllipseArc_obj_sMemberFields[] = {
	HX_("_center",74,37,52,74),
	HX_("_xaxis",5a,00,76,54),
	HX_("_yaxis",db,94,dc,e7),
	HX_("_minAngle",40,a8,af,61),
	HX_("_maxAngle",ee,8d,95,14),
	HX_("center",d5,25,db,05),
	HX_("xaxis",19,b9,8e,58),
	HX_("yaxis",9a,4d,f5,eb),
	HX_("minAngle",e1,b0,19,1a),
	HX_("maxAngle",8f,96,ff,cc),
	::String(null()) };

::hx::Class EllipseArc_obj::__mClass;

void EllipseArc_obj::__register()
{
	EllipseArc_obj _hx_dummy;
	EllipseArc_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.geom.EllipseArc",d7,66,1b,b5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EllipseArc_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EllipseArc_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EllipseArc_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EllipseArc_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace geom
