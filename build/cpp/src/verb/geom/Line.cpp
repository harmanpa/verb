// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_ISerializable
#include <verb/core/ISerializable.h>
#endif
#ifndef INCLUDED_verb_core_NurbsCurveData
#include <verb/core/NurbsCurveData.h>
#endif
#ifndef INCLUDED_verb_core_SerializableBase
#include <verb/core/SerializableBase.h>
#endif
#ifndef INCLUDED_verb_eval_Make
#include <verb/eval/Make.h>
#endif
#ifndef INCLUDED_verb_geom_ICurve
#include <verb/geom/ICurve.h>
#endif
#ifndef INCLUDED_verb_geom_Line
#include <verb/geom/Line.h>
#endif
#ifndef INCLUDED_verb_geom_NurbsCurve
#include <verb/geom/NurbsCurve.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8ef0b035f26f70e3_20_new,"verb.geom.Line","new",0xce690ee9,"verb.geom.Line.new","verb/geom/Line.hx",20,0x890ef047)
HX_LOCAL_STACK_FRAME(_hx_pos_8ef0b035f26f70e3_31_start,"verb.geom.Line","start",0xf0d4272b,"verb.geom.Line.start","verb/geom/Line.hx",31,0x890ef047)
HX_LOCAL_STACK_FRAME(_hx_pos_8ef0b035f26f70e3_34_end,"verb.geom.Line","end",0xce624264,"verb.geom.Line.end","verb/geom/Line.hx",34,0x890ef047)
namespace verb{
namespace geom{

void Line_obj::__construct(::Array< Float > start,::Array< Float > end){
            	HX_STACKFRAME(&_hx_pos_8ef0b035f26f70e3_20_new)
HXLINE(  21)		super::__construct(::verb::eval::Make_obj::polyline(::Array_obj< ::Dynamic>::__new(2)->init(0,start)->init(1,end)));
HXLINE(  23)		this->_start = start;
HXLINE(  24)		this->_end = end;
            	}

Dynamic Line_obj::__CreateEmpty() { return new Line_obj; }

void *Line_obj::_hx_vtable = 0;

Dynamic Line_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Line_obj > _hx_result = new Line_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Line_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x69541c12) {
		if (inClassId<=(int)0x06d9bbfa) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x06d9bbfa;
		} else {
			return inClassId==(int)0x69541c12;
		}
	} else {
		return inClassId==(int)0x7f648e7b;
	}
}

::Array< Float > Line_obj::start(){
            	HX_STACKFRAME(&_hx_pos_8ef0b035f26f70e3_31_start)
HXDLIN(  31)		return this->_start;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Line_obj,start,return )

::Array< Float > Line_obj::end(){
            	HX_STACKFRAME(&_hx_pos_8ef0b035f26f70e3_34_end)
HXDLIN(  34)		return this->_end;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Line_obj,end,return )


::hx::ObjectPtr< Line_obj > Line_obj::__new(::Array< Float > start,::Array< Float > end) {
	::hx::ObjectPtr< Line_obj > __this = new Line_obj();
	__this->__construct(start,end);
	return __this;
}

::hx::ObjectPtr< Line_obj > Line_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< Float > start,::Array< Float > end) {
	Line_obj *__this = (Line_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Line_obj), true, "verb.geom.Line"));
	*(void **)__this = Line_obj::_hx_vtable;
	__this->__construct(start,end);
	return __this;
}

Line_obj::Line_obj()
{
}

void Line_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Line);
	HX_MARK_MEMBER_NAME(_start,"_start");
	HX_MARK_MEMBER_NAME(_end,"_end");
	 ::verb::geom::NurbsCurve_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Line_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_start,"_start");
	HX_VISIT_MEMBER_NAME(_end,"_end");
	 ::verb::geom::NurbsCurve_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Line_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return ::hx::Val( end_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_end") ) { return ::hx::Val( _end ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return ::hx::Val( start_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_start") ) { return ::hx::Val( _start ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Line_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_end") ) { _end=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_start") ) { _start=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Line_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_start",a3,bb,f2,7f));
	outFields->push(HX_("_end",dc,48,18,3f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Line_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Line_obj,_start),HX_("_start",a3,bb,f2,7f)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Line_obj,_end),HX_("_end",dc,48,18,3f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Line_obj_sStaticStorageInfo = 0;
#endif

static ::String Line_obj_sMemberFields[] = {
	HX_("_start",a3,bb,f2,7f),
	HX_("_end",dc,48,18,3f),
	HX_("start",62,74,0b,84),
	HX_("end",db,03,4d,00),
	::String(null()) };

::hx::Class Line_obj::__mClass;

void Line_obj::__register()
{
	Line_obj _hx_dummy;
	Line_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.geom.Line",77,66,53,26);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Line_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Line_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Line_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Line_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace geom
