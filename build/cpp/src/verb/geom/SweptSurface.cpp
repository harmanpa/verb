// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_ISerializable
#include <verb/core/ISerializable.h>
#endif
#ifndef INCLUDED_verb_core_NurbsCurveData
#include <verb/core/NurbsCurveData.h>
#endif
#ifndef INCLUDED_verb_core_NurbsSurfaceData
#include <verb/core/NurbsSurfaceData.h>
#endif
#ifndef INCLUDED_verb_core_SerializableBase
#include <verb/core/SerializableBase.h>
#endif
#ifndef INCLUDED_verb_eval_Make
#include <verb/eval/Make.h>
#endif
#ifndef INCLUDED_verb_geom_ICurve
#include <verb/geom/ICurve.h>
#endif
#ifndef INCLUDED_verb_geom_ISurface
#include <verb/geom/ISurface.h>
#endif
#ifndef INCLUDED_verb_geom_NurbsSurface
#include <verb/geom/NurbsSurface.h>
#endif
#ifndef INCLUDED_verb_geom_SweptSurface
#include <verb/geom/SweptSurface.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c5527701108def80_20_new,"verb.geom.SweptSurface","new",0x8038751d,"verb.geom.SweptSurface.new","verb/geom/SweptSurface.hx",20,0x4658ec93)
HX_LOCAL_STACK_FRAME(_hx_pos_c5527701108def80_32_profile,"verb.geom.SweptSurface","profile",0xbf0b9066,"verb.geom.SweptSurface.profile","verb/geom/SweptSurface.hx",32,0x4658ec93)
HX_LOCAL_STACK_FRAME(_hx_pos_c5527701108def80_36_rail,"verb.geom.SweptSurface","rail",0xb3cfc9f5,"verb.geom.SweptSurface.rail","verb/geom/SweptSurface.hx",36,0x4658ec93)
namespace verb{
namespace geom{

void SweptSurface_obj::__construct(::Dynamic profile,::Dynamic rail){
            	HX_STACKFRAME(&_hx_pos_c5527701108def80_20_new)
HXLINE(  21)		 ::verb::core::NurbsCurveData _hx_tmp = ::verb::geom::ICurve_obj::asNurbs(profile);
HXDLIN(  21)		super::__construct(::verb::eval::Make_obj::rationalTranslationalSurface(_hx_tmp,::verb::geom::ICurve_obj::asNurbs(rail)));
HXLINE(  23)		this->_profile = profile;
HXLINE(  24)		this->_rail = rail;
            	}

Dynamic SweptSurface_obj::__CreateEmpty() { return new SweptSurface_obj; }

void *SweptSurface_obj::_hx_vtable = 0;

Dynamic SweptSurface_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SweptSurface_obj > _hx_result = new SweptSurface_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool SweptSurface_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0a621450) {
		if (inClassId<=(int)0x06d9bbfa) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x06d9bbfa;
		} else {
			return inClassId==(int)0x0a621450;
		}
	} else {
		return inClassId==(int)0x28803b63;
	}
}

::Dynamic SweptSurface_obj::profile(){
            	HX_STACKFRAME(&_hx_pos_c5527701108def80_32_profile)
HXDLIN(  32)		return this->_profile;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SweptSurface_obj,profile,return )

::Dynamic SweptSurface_obj::rail(){
            	HX_STACKFRAME(&_hx_pos_c5527701108def80_36_rail)
HXDLIN(  36)		return this->_rail;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SweptSurface_obj,rail,return )


::hx::ObjectPtr< SweptSurface_obj > SweptSurface_obj::__new(::Dynamic profile,::Dynamic rail) {
	::hx::ObjectPtr< SweptSurface_obj > __this = new SweptSurface_obj();
	__this->__construct(profile,rail);
	return __this;
}

::hx::ObjectPtr< SweptSurface_obj > SweptSurface_obj::__alloc(::hx::Ctx *_hx_ctx,::Dynamic profile,::Dynamic rail) {
	SweptSurface_obj *__this = (SweptSurface_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SweptSurface_obj), true, "verb.geom.SweptSurface"));
	*(void **)__this = SweptSurface_obj::_hx_vtable;
	__this->__construct(profile,rail);
	return __this;
}

SweptSurface_obj::SweptSurface_obj()
{
}

void SweptSurface_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SweptSurface);
	HX_MARK_MEMBER_NAME(_profile,"_profile");
	HX_MARK_MEMBER_NAME(_rail,"_rail");
	 ::verb::geom::NurbsSurface_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SweptSurface_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_profile,"_profile");
	HX_VISIT_MEMBER_NAME(_rail,"_rail");
	 ::verb::geom::NurbsSurface_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val SweptSurface_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rail") ) { return ::hx::Val( rail_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_rail") ) { return ::hx::Val( _rail ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"profile") ) { return ::hx::Val( profile_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_profile") ) { return ::hx::Val( _profile ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SweptSurface_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_rail") ) { _rail=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_profile") ) { _profile=inValue.Cast< ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SweptSurface_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_profile",aa,a2,01,2d));
	outFields->push(HX_("_rail",31,65,b5,fe));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SweptSurface_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(SweptSurface_obj,_profile),HX_("_profile",aa,a2,01,2d)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(SweptSurface_obj,_rail),HX_("_rail",31,65,b5,fe)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SweptSurface_obj_sStaticStorageInfo = 0;
#endif

static ::String SweptSurface_obj_sMemberFields[] = {
	HX_("_profile",aa,a2,01,2d),
	HX_("_rail",31,65,b5,fe),
	HX_("profile",29,49,49,f3),
	HX_("rail",52,49,a4,4b),
	::String(null()) };

::hx::Class SweptSurface_obj::__mClass;

void SweptSurface_obj::__register()
{
	SweptSurface_obj _hx_dummy;
	SweptSurface_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.geom.SweptSurface",ab,a2,fe,aa);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SweptSurface_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SweptSurface_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SweptSurface_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SweptSurface_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace geom
