// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_ISerializable
#include <verb/core/ISerializable.h>
#endif
#ifndef INCLUDED_verb_core_NurbsSurfaceData
#include <verb/core/NurbsSurfaceData.h>
#endif
#ifndef INCLUDED_verb_core_SerializableBase
#include <verb/core/SerializableBase.h>
#endif
#ifndef INCLUDED_verb_eval_Make
#include <verb/eval/Make.h>
#endif
#ifndef INCLUDED_verb_geom_ISurface
#include <verb/geom/ISurface.h>
#endif
#ifndef INCLUDED_verb_geom_NurbsSurface
#include <verb/geom/NurbsSurface.h>
#endif
#ifndef INCLUDED_verb_geom_SphericalSurface
#include <verb/geom/SphericalSurface.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b6f5e91b7d88f396_21_new,"verb.geom.SphericalSurface","new",0x06651385,"verb.geom.SphericalSurface.new","verb/geom/SphericalSurface.hx",21,0x013e632b)
static const Float _hx_array_data_a311ed13_1[] = {
	(Float)0,(Float)0,(Float)1,
};
static const Float _hx_array_data_a311ed13_2[] = {
	(Float)1,(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_b6f5e91b7d88f396_33_center,"verb.geom.SphericalSurface","center",0xc22aa7d0,"verb.geom.SphericalSurface.center","verb/geom/SphericalSurface.hx",33,0x013e632b)
HX_LOCAL_STACK_FRAME(_hx_pos_b6f5e91b7d88f396_37_radius,"verb.geom.SphericalSurface","radius",0x6d46524d,"verb.geom.SphericalSurface.radius","verb/geom/SphericalSurface.hx",37,0x013e632b)
namespace verb{
namespace geom{

void SphericalSurface_obj::__construct(::Array< Float > center,Float radius){
            	HX_STACKFRAME(&_hx_pos_b6f5e91b7d88f396_21_new)
HXLINE(  22)		super::__construct(::verb::eval::Make_obj::sphericalSurface(center,::Array_obj< Float >::fromData( _hx_array_data_a311ed13_1,3),::Array_obj< Float >::fromData( _hx_array_data_a311ed13_2,3),radius));
HXLINE(  24)		this->_center = center;
HXLINE(  25)		this->_radius = radius;
            	}

Dynamic SphericalSurface_obj::__CreateEmpty() { return new SphericalSurface_obj; }

void *SphericalSurface_obj::_hx_vtable = 0;

Dynamic SphericalSurface_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SphericalSurface_obj > _hx_result = new SphericalSurface_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool SphericalSurface_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0a621450) {
		if (inClassId<=(int)0x06d9bbfa) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x06d9bbfa;
		} else {
			return inClassId==(int)0x0a621450;
		}
	} else {
		return inClassId==(int)0x4efa41cb;
	}
}

::Array< Float > SphericalSurface_obj::center(){
            	HX_STACKFRAME(&_hx_pos_b6f5e91b7d88f396_33_center)
HXDLIN(  33)		return this->_center;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SphericalSurface_obj,center,return )

Float SphericalSurface_obj::radius(){
            	HX_STACKFRAME(&_hx_pos_b6f5e91b7d88f396_37_radius)
HXDLIN(  37)		return this->_radius;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SphericalSurface_obj,radius,return )


::hx::ObjectPtr< SphericalSurface_obj > SphericalSurface_obj::__new(::Array< Float > center,Float radius) {
	::hx::ObjectPtr< SphericalSurface_obj > __this = new SphericalSurface_obj();
	__this->__construct(center,radius);
	return __this;
}

::hx::ObjectPtr< SphericalSurface_obj > SphericalSurface_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< Float > center,Float radius) {
	SphericalSurface_obj *__this = (SphericalSurface_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SphericalSurface_obj), true, "verb.geom.SphericalSurface"));
	*(void **)__this = SphericalSurface_obj::_hx_vtable;
	__this->__construct(center,radius);
	return __this;
}

SphericalSurface_obj::SphericalSurface_obj()
{
}

void SphericalSurface_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SphericalSurface);
	HX_MARK_MEMBER_NAME(_center,"_center");
	HX_MARK_MEMBER_NAME(_radius,"_radius");
	 ::verb::geom::NurbsSurface_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SphericalSurface_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_center,"_center");
	HX_VISIT_MEMBER_NAME(_radius,"_radius");
	 ::verb::geom::NurbsSurface_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val SphericalSurface_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"center") ) { return ::hx::Val( center_dyn() ); }
		if (HX_FIELD_EQ(inName,"radius") ) { return ::hx::Val( radius_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_center") ) { return ::hx::Val( _center ); }
		if (HX_FIELD_EQ(inName,"_radius") ) { return ::hx::Val( _radius ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SphericalSurface_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"_center") ) { _center=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_radius") ) { _radius=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SphericalSurface_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_center",74,37,52,74));
	outFields->push(HX_("_radius",f1,e1,6d,1f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SphericalSurface_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(SphericalSurface_obj,_center),HX_("_center",74,37,52,74)},
	{::hx::fsFloat,(int)offsetof(SphericalSurface_obj,_radius),HX_("_radius",f1,e1,6d,1f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SphericalSurface_obj_sStaticStorageInfo = 0;
#endif

static ::String SphericalSurface_obj_sMemberFields[] = {
	HX_("_center",74,37,52,74),
	HX_("_radius",f1,e1,6d,1f),
	HX_("center",d5,25,db,05),
	HX_("radius",52,d0,f6,b0),
	::String(null()) };

::hx::Class SphericalSurface_obj::__mClass;

void SphericalSurface_obj::__register()
{
	SphericalSurface_obj _hx_dummy;
	SphericalSurface_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.geom.SphericalSurface",13,ed,11,a3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SphericalSurface_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SphericalSurface_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SphericalSurface_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SphericalSurface_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace geom
