// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_TriSegmentIntersection
#include <verb/core/TriSegmentIntersection.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_df8b90da7af832ad_117_new,"verb.core.TriSegmentIntersection","new",0x8f58c2a3,"verb.core.TriSegmentIntersection.new","verb/core/Intersections.hx",117,0x2e2a0454)
namespace verb{
namespace core{

void TriSegmentIntersection_obj::__construct(::Array< Float > point,Float s,Float t,Float r){
            	HX_STACKFRAME(&_hx_pos_df8b90da7af832ad_117_new)
HXLINE( 118)		this->point = point;
HXLINE( 119)		this->s = s;
HXLINE( 120)		this->t = t;
HXLINE( 121)		this->p = r;
            	}

Dynamic TriSegmentIntersection_obj::__CreateEmpty() { return new TriSegmentIntersection_obj; }

void *TriSegmentIntersection_obj::_hx_vtable = 0;

Dynamic TriSegmentIntersection_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TriSegmentIntersection_obj > _hx_result = new TriSegmentIntersection_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool TriSegmentIntersection_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0924a297;
}


TriSegmentIntersection_obj::TriSegmentIntersection_obj()
{
}

void TriSegmentIntersection_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TriSegmentIntersection);
	HX_MARK_MEMBER_NAME(point,"point");
	HX_MARK_MEMBER_NAME(s,"s");
	HX_MARK_MEMBER_NAME(t,"t");
	HX_MARK_MEMBER_NAME(p,"p");
	HX_MARK_END_CLASS();
}

void TriSegmentIntersection_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(point,"point");
	HX_VISIT_MEMBER_NAME(s,"s");
	HX_VISIT_MEMBER_NAME(t,"t");
	HX_VISIT_MEMBER_NAME(p,"p");
}

::hx::Val TriSegmentIntersection_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { return ::hx::Val( s ); }
		if (HX_FIELD_EQ(inName,"t") ) { return ::hx::Val( t ); }
		if (HX_FIELD_EQ(inName,"p") ) { return ::hx::Val( p ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"point") ) { return ::hx::Val( point ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TriSegmentIntersection_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { s=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"t") ) { t=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"p") ) { p=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"point") ) { point=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TriSegmentIntersection_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("point",50,b4,8f,c6));
	outFields->push(HX_("s",73,00,00,00));
	outFields->push(HX_("t",74,00,00,00));
	outFields->push(HX_("p",70,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TriSegmentIntersection_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(TriSegmentIntersection_obj,point),HX_("point",50,b4,8f,c6)},
	{::hx::fsFloat,(int)offsetof(TriSegmentIntersection_obj,s),HX_("s",73,00,00,00)},
	{::hx::fsFloat,(int)offsetof(TriSegmentIntersection_obj,t),HX_("t",74,00,00,00)},
	{::hx::fsFloat,(int)offsetof(TriSegmentIntersection_obj,p),HX_("p",70,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TriSegmentIntersection_obj_sStaticStorageInfo = 0;
#endif

static ::String TriSegmentIntersection_obj_sMemberFields[] = {
	HX_("point",50,b4,8f,c6),
	HX_("s",73,00,00,00),
	HX_("t",74,00,00,00),
	HX_("p",70,00,00,00),
	::String(null()) };

::hx::Class TriSegmentIntersection_obj::__mClass;

void TriSegmentIntersection_obj::__register()
{
	TriSegmentIntersection_obj _hx_dummy;
	TriSegmentIntersection_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.TriSegmentIntersection",31,35,3c,af);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TriSegmentIntersection_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TriSegmentIntersection_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TriSegmentIntersection_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TriSegmentIntersection_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
