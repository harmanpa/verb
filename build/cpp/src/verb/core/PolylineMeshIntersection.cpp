// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_PolylineMeshIntersection
#include <verb/core/PolylineMeshIntersection.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_81d64bb6efb1ed67_77_new,"verb.core.PolylineMeshIntersection","new",0x31578528,"verb.core.PolylineMeshIntersection.new","verb/core/Intersections.hx",77,0x2e2a0454)
namespace verb{
namespace core{

void PolylineMeshIntersection_obj::__construct(::Array< Float > point,Float u,::Array< Float > uv,int polylineIndex,int faceIndex){
            	HX_STACKFRAME(&_hx_pos_81d64bb6efb1ed67_77_new)
HXLINE(  78)		this->point = point;
HXLINE(  79)		this->u = u;
HXLINE(  80)		this->uv = uv;
HXLINE(  81)		this->polylineIndex = polylineIndex;
HXLINE(  82)		this->faceIndex = faceIndex;
            	}

Dynamic PolylineMeshIntersection_obj::__CreateEmpty() { return new PolylineMeshIntersection_obj; }

void *PolylineMeshIntersection_obj::_hx_vtable = 0;

Dynamic PolylineMeshIntersection_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PolylineMeshIntersection_obj > _hx_result = new PolylineMeshIntersection_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool PolylineMeshIntersection_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x04523d54;
}


PolylineMeshIntersection_obj::PolylineMeshIntersection_obj()
{
}

void PolylineMeshIntersection_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PolylineMeshIntersection);
	HX_MARK_MEMBER_NAME(point,"point");
	HX_MARK_MEMBER_NAME(u,"u");
	HX_MARK_MEMBER_NAME(uv,"uv");
	HX_MARK_MEMBER_NAME(polylineIndex,"polylineIndex");
	HX_MARK_MEMBER_NAME(faceIndex,"faceIndex");
	HX_MARK_END_CLASS();
}

void PolylineMeshIntersection_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(point,"point");
	HX_VISIT_MEMBER_NAME(u,"u");
	HX_VISIT_MEMBER_NAME(uv,"uv");
	HX_VISIT_MEMBER_NAME(polylineIndex,"polylineIndex");
	HX_VISIT_MEMBER_NAME(faceIndex,"faceIndex");
}

::hx::Val PolylineMeshIntersection_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"u") ) { return ::hx::Val( u ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"uv") ) { return ::hx::Val( uv ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"point") ) { return ::hx::Val( point ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"faceIndex") ) { return ::hx::Val( faceIndex ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"polylineIndex") ) { return ::hx::Val( polylineIndex ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PolylineMeshIntersection_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"u") ) { u=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"uv") ) { uv=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"point") ) { point=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"faceIndex") ) { faceIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"polylineIndex") ) { polylineIndex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PolylineMeshIntersection_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("point",50,b4,8f,c6));
	outFields->push(HX_("u",75,00,00,00));
	outFields->push(HX_("uv",61,66,00,00));
	outFields->push(HX_("polylineIndex",b2,f6,4e,4c));
	outFields->push(HX_("faceIndex",35,7d,67,80));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PolylineMeshIntersection_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PolylineMeshIntersection_obj,point),HX_("point",50,b4,8f,c6)},
	{::hx::fsFloat,(int)offsetof(PolylineMeshIntersection_obj,u),HX_("u",75,00,00,00)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PolylineMeshIntersection_obj,uv),HX_("uv",61,66,00,00)},
	{::hx::fsInt,(int)offsetof(PolylineMeshIntersection_obj,polylineIndex),HX_("polylineIndex",b2,f6,4e,4c)},
	{::hx::fsInt,(int)offsetof(PolylineMeshIntersection_obj,faceIndex),HX_("faceIndex",35,7d,67,80)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PolylineMeshIntersection_obj_sStaticStorageInfo = 0;
#endif

static ::String PolylineMeshIntersection_obj_sMemberFields[] = {
	HX_("point",50,b4,8f,c6),
	HX_("u",75,00,00,00),
	HX_("uv",61,66,00,00),
	HX_("polylineIndex",b2,f6,4e,4c),
	HX_("faceIndex",35,7d,67,80),
	::String(null()) };

::hx::Class PolylineMeshIntersection_obj::__mClass;

void PolylineMeshIntersection_obj::__register()
{
	PolylineMeshIntersection_obj _hx_dummy;
	PolylineMeshIntersection_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.PolylineMeshIntersection",36,11,1c,6d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PolylineMeshIntersection_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PolylineMeshIntersection_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PolylineMeshIntersection_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PolylineMeshIntersection_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
