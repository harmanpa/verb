// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_ArrayExtensions
#include <verb/core/ArrayExtensions.h>
#endif
#ifndef INCLUDED_verb_core_BoundingBox
#include <verb/core/BoundingBox.h>
#endif
#ifndef INCLUDED_verb_core_Mesh
#include <verb/core/Mesh.h>
#endif
#ifndef INCLUDED_verb_core_MeshBoundingBoxTree
#include <verb/core/MeshBoundingBoxTree.h>
#endif
#ifndef INCLUDED_verb_core_MeshData
#include <verb/core/MeshData.h>
#endif
#ifndef INCLUDED_verb_core_Pair
#include <verb/core/Pair.h>
#endif
#ifndef INCLUDED_verb_core_SerializableBase
#include <verb/core/SerializableBase.h>
#endif
#ifndef INCLUDED_verb_eval_IBoundingBoxTree
#include <verb/eval/IBoundingBoxTree.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_da2e60cee954c57b_8_new,"verb.core.MeshBoundingBoxTree","new",0x924ca68a,"verb.core.MeshBoundingBoxTree.new","verb/core/MeshBoundingBoxTree.hx",8,0x025c9c86)
HX_LOCAL_STACK_FRAME(_hx_pos_da2e60cee954c57b_42_split,"verb.core.MeshBoundingBoxTree","split",0x23e91f84,"verb.core.MeshBoundingBoxTree.split","verb/core/MeshBoundingBoxTree.hx",42,0x025c9c86)
HX_LOCAL_STACK_FRAME(_hx_pos_da2e60cee954c57b_46_boundingBox,"verb.core.MeshBoundingBoxTree","boundingBox",0x3901a531,"verb.core.MeshBoundingBoxTree.boundingBox","verb/core/MeshBoundingBoxTree.hx",46,0x025c9c86)
HX_LOCAL_STACK_FRAME(_hx_pos_da2e60cee954c57b_50_yield,"verb.core.MeshBoundingBoxTree","yield",0x93aacef7,"verb.core.MeshBoundingBoxTree.yield","verb/core/MeshBoundingBoxTree.hx",50,0x025c9c86)
HX_LOCAL_STACK_FRAME(_hx_pos_da2e60cee954c57b_54_indivisible,"verb.core.MeshBoundingBoxTree","indivisible",0xadb5db32,"verb.core.MeshBoundingBoxTree.indivisible","verb/core/MeshBoundingBoxTree.hx",54,0x025c9c86)
HX_LOCAL_STACK_FRAME(_hx_pos_da2e60cee954c57b_58_empty,"verb.core.MeshBoundingBoxTree","empty",0x12546f37,"verb.core.MeshBoundingBoxTree.empty","verb/core/MeshBoundingBoxTree.hx",58,0x025c9c86)
namespace verb{
namespace core{

void MeshBoundingBoxTree_obj::__construct( ::verb::core::MeshData mesh,::Array< int > faceIndices){
            	HX_GC_STACKFRAME(&_hx_pos_da2e60cee954c57b_8_new)
HXLINE(  13)		this->_empty = false;
HXLINE(  12)		this->_face = -1;
HXLINE(  17)		if (::hx::IsNull( faceIndices )) {
HXLINE(  18)			::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN(  18)			{
HXLINE(  18)				int _g1 = 0;
HXDLIN(  18)				int _g2 = mesh->faces->length;
HXDLIN(  18)				while((_g1 < _g2)){
HXLINE(  18)					_g1 = (_g1 + 1);
HXDLIN(  18)					int i = (_g1 - 1);
HXDLIN(  18)					_g->push(i);
            				}
            			}
HXDLIN(  18)			faceIndices = _g;
            		}
HXLINE(  21)		this->_boundingBox = ::verb::core::Mesh_obj::makeMeshAabb(mesh,faceIndices);
HXLINE(  23)		if ((faceIndices->length < 1)) {
HXLINE(  24)			this->_empty = true;
HXLINE(  25)			return;
            		}
            		else {
HXLINE(  26)			if ((faceIndices->length < 2)) {
HXLINE(  27)				this->_face = faceIndices->__get(0);
HXLINE(  28)				return;
            			}
            		}
HXLINE(  31)		::Array< int > as = ::verb::core::Mesh_obj::sortTrianglesOnLongestAxis(this->_boundingBox,mesh,faceIndices);
HXLINE(  32)		::Array< int > l = ::verb::core::ArrayExtensions_obj::left(as);
HXLINE(  33)		::Array< int > r = ::verb::core::ArrayExtensions_obj::right(as);
HXLINE(  36)		 ::verb::core::MeshBoundingBoxTree _hx_tmp =  ::verb::core::MeshBoundingBoxTree_obj::__alloc( HX_CTX ,mesh,l);
HXLINE(  35)		this->_children =  ::verb::core::Pair_obj::__alloc( HX_CTX ,_hx_tmp, ::verb::core::MeshBoundingBoxTree_obj::__alloc( HX_CTX ,mesh,r));
            	}

Dynamic MeshBoundingBoxTree_obj::__CreateEmpty() { return new MeshBoundingBoxTree_obj; }

void *MeshBoundingBoxTree_obj::_hx_vtable = 0;

Dynamic MeshBoundingBoxTree_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MeshBoundingBoxTree_obj > _hx_result = new MeshBoundingBoxTree_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MeshBoundingBoxTree_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x397da23a;
}

static ::verb::eval::IBoundingBoxTree_obj _hx_verb_core_MeshBoundingBoxTree__hx_verb_eval_IBoundingBoxTree= {
	(  ::verb::core::BoundingBox (::hx::Object::*)())&::verb::core::MeshBoundingBoxTree_obj::boundingBox,
	(  ::verb::core::Pair (::hx::Object::*)())&::verb::core::MeshBoundingBoxTree_obj::split,
	(  ::Dynamic (::hx::Object::*)())&::verb::core::MeshBoundingBoxTree_obj::yield_2aa2127b,
	( bool (::hx::Object::*)(Float))&::verb::core::MeshBoundingBoxTree_obj::indivisible,
	( bool (::hx::Object::*)())&::verb::core::MeshBoundingBoxTree_obj::empty,
};

 ::Dynamic MeshBoundingBoxTree_obj::yield_2aa2127b() {
			return yield();
}
void *MeshBoundingBoxTree_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x9907fd77: return &_hx_verb_core_MeshBoundingBoxTree__hx_verb_eval_IBoundingBoxTree;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::verb::core::Pair MeshBoundingBoxTree_obj::split(){
            	HX_STACKFRAME(&_hx_pos_da2e60cee954c57b_42_split)
HXDLIN(  42)		return this->_children;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshBoundingBoxTree_obj,split,return )

 ::verb::core::BoundingBox MeshBoundingBoxTree_obj::boundingBox(){
            	HX_STACKFRAME(&_hx_pos_da2e60cee954c57b_46_boundingBox)
HXDLIN(  46)		return this->_boundingBox;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshBoundingBoxTree_obj,boundingBox,return )

int MeshBoundingBoxTree_obj::yield(){
            	HX_STACKFRAME(&_hx_pos_da2e60cee954c57b_50_yield)
HXDLIN(  50)		return this->_face;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshBoundingBoxTree_obj,yield,return )

bool MeshBoundingBoxTree_obj::indivisible(Float tolerance){
            	HX_STACKFRAME(&_hx_pos_da2e60cee954c57b_54_indivisible)
HXDLIN(  54)		return ::hx::IsNull( this->_children );
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshBoundingBoxTree_obj,indivisible,return )

bool MeshBoundingBoxTree_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_da2e60cee954c57b_58_empty)
HXDLIN(  58)		return this->_empty;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshBoundingBoxTree_obj,empty,return )


::hx::ObjectPtr< MeshBoundingBoxTree_obj > MeshBoundingBoxTree_obj::__new( ::verb::core::MeshData mesh,::Array< int > faceIndices) {
	::hx::ObjectPtr< MeshBoundingBoxTree_obj > __this = new MeshBoundingBoxTree_obj();
	__this->__construct(mesh,faceIndices);
	return __this;
}

::hx::ObjectPtr< MeshBoundingBoxTree_obj > MeshBoundingBoxTree_obj::__alloc(::hx::Ctx *_hx_ctx, ::verb::core::MeshData mesh,::Array< int > faceIndices) {
	MeshBoundingBoxTree_obj *__this = (MeshBoundingBoxTree_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MeshBoundingBoxTree_obj), true, "verb.core.MeshBoundingBoxTree"));
	*(void **)__this = MeshBoundingBoxTree_obj::_hx_vtable;
	__this->__construct(mesh,faceIndices);
	return __this;
}

MeshBoundingBoxTree_obj::MeshBoundingBoxTree_obj()
{
}

void MeshBoundingBoxTree_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MeshBoundingBoxTree);
	HX_MARK_MEMBER_NAME(_children,"_children");
	HX_MARK_MEMBER_NAME(_boundingBox,"_boundingBox");
	HX_MARK_MEMBER_NAME(_face,"_face");
	HX_MARK_MEMBER_NAME(_empty,"_empty");
	HX_MARK_END_CLASS();
}

void MeshBoundingBoxTree_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_children,"_children");
	HX_VISIT_MEMBER_NAME(_boundingBox,"_boundingBox");
	HX_VISIT_MEMBER_NAME(_face,"_face");
	HX_VISIT_MEMBER_NAME(_empty,"_empty");
}

::hx::Val MeshBoundingBoxTree_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_face") ) { return ::hx::Val( _face ); }
		if (HX_FIELD_EQ(inName,"split") ) { return ::hx::Val( split_dyn() ); }
		if (HX_FIELD_EQ(inName,"yield") ) { return ::hx::Val( yield_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return ::hx::Val( empty_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_empty") ) { return ::hx::Val( _empty ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_children") ) { return ::hx::Val( _children ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"boundingBox") ) { return ::hx::Val( boundingBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"indivisible") ) { return ::hx::Val( indivisible_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_boundingBox") ) { return ::hx::Val( _boundingBox ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MeshBoundingBoxTree_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_face") ) { _face=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_empty") ) { _empty=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_children") ) { _children=inValue.Cast<  ::verb::core::Pair >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_boundingBox") ) { _boundingBox=inValue.Cast<  ::verb::core::BoundingBox >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MeshBoundingBoxTree_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_children",9e,10,00,b8));
	outFields->push(HX_("_boundingBox",08,43,b1,eb));
	outFields->push(HX_("_face",7c,d0,c6,f6));
	outFields->push(HX_("_empty",ce,81,c1,6b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MeshBoundingBoxTree_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::verb::core::Pair */ ,(int)offsetof(MeshBoundingBoxTree_obj,_children),HX_("_children",9e,10,00,b8)},
	{::hx::fsObject /*  ::verb::core::BoundingBox */ ,(int)offsetof(MeshBoundingBoxTree_obj,_boundingBox),HX_("_boundingBox",08,43,b1,eb)},
	{::hx::fsInt,(int)offsetof(MeshBoundingBoxTree_obj,_face),HX_("_face",7c,d0,c6,f6)},
	{::hx::fsBool,(int)offsetof(MeshBoundingBoxTree_obj,_empty),HX_("_empty",ce,81,c1,6b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MeshBoundingBoxTree_obj_sStaticStorageInfo = 0;
#endif

static ::String MeshBoundingBoxTree_obj_sMemberFields[] = {
	HX_("_children",9e,10,00,b8),
	HX_("_boundingBox",08,43,b1,eb),
	HX_("_face",7c,d0,c6,f6),
	HX_("_empty",ce,81,c1,6b),
	HX_("split",da,ea,6e,81),
	HX_("boundingBox",07,95,a7,85),
	HX_("yield",4d,9a,30,f1),
	HX_("indivisible",08,cb,5b,fa),
	HX_("empty",8d,3a,da,6f),
	::String(null()) };

::hx::Class MeshBoundingBoxTree_obj::__mClass;

void MeshBoundingBoxTree_obj::__register()
{
	MeshBoundingBoxTree_obj _hx_dummy;
	MeshBoundingBoxTree_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.MeshBoundingBoxTree",98,59,08,21);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MeshBoundingBoxTree_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MeshBoundingBoxTree_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MeshBoundingBoxTree_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MeshBoundingBoxTree_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
