// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_ArrayExtensions
#include <verb/core/ArrayExtensions.h>
#endif
#ifndef INCLUDED_verb_core_BoundingBox
#include <verb/core/BoundingBox.h>
#endif
#ifndef INCLUDED_verb_core_LazySurfaceBoundingBoxTree
#include <verb/core/LazySurfaceBoundingBoxTree.h>
#endif
#ifndef INCLUDED_verb_core_NurbsSurfaceData
#include <verb/core/NurbsSurfaceData.h>
#endif
#ifndef INCLUDED_verb_core_Pair
#include <verb/core/Pair.h>
#endif
#ifndef INCLUDED_verb_core_SerializableBase
#include <verb/core/SerializableBase.h>
#endif
#ifndef INCLUDED_verb_eval_Divide
#include <verb/eval/Divide.h>
#endif
#ifndef INCLUDED_verb_eval_Eval
#include <verb/eval/Eval.h>
#endif
#ifndef INCLUDED_verb_eval_IBoundingBoxTree
#include <verb/eval/IBoundingBoxTree.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bb8f7c50363a6ac8_11_new,"verb.core.LazySurfaceBoundingBoxTree","new",0x9c6f29de,"verb.core.LazySurfaceBoundingBoxTree.new","verb/core/LazySurfaceBoundingBoxTree.hx",11,0x6544e2f2)
HX_LOCAL_STACK_FRAME(_hx_pos_bb8f7c50363a6ac8_35_split,"verb.core.LazySurfaceBoundingBoxTree","split",0xde321fd8,"verb.core.LazySurfaceBoundingBoxTree.split","verb/core/LazySurfaceBoundingBoxTree.hx",35,0x6544e2f2)
HX_LOCAL_STACK_FRAME(_hx_pos_bb8f7c50363a6ac8_57_boundingBox,"verb.core.LazySurfaceBoundingBoxTree","boundingBox",0xf5159c85,"verb.core.LazySurfaceBoundingBoxTree.boundingBox","verb/core/LazySurfaceBoundingBoxTree.hx",57,0x6544e2f2)
HX_LOCAL_STACK_FRAME(_hx_pos_bb8f7c50363a6ac8_68_yield,"verb.core.LazySurfaceBoundingBoxTree","yield",0x4df3cf4b,"verb.core.LazySurfaceBoundingBoxTree.yield","verb/core/LazySurfaceBoundingBoxTree.hx",68,0x6544e2f2)
HX_LOCAL_STACK_FRAME(_hx_pos_bb8f7c50363a6ac8_72_indivisible,"verb.core.LazySurfaceBoundingBoxTree","indivisible",0x69c9d286,"verb.core.LazySurfaceBoundingBoxTree.indivisible","verb/core/LazySurfaceBoundingBoxTree.hx",72,0x6544e2f2)
HX_LOCAL_STACK_FRAME(_hx_pos_bb8f7c50363a6ac8_76_empty,"verb.core.LazySurfaceBoundingBoxTree","empty",0xcc9d6f8b,"verb.core.LazySurfaceBoundingBoxTree.empty","verb/core/LazySurfaceBoundingBoxTree.hx",76,0x6544e2f2)
namespace verb{
namespace core{

void LazySurfaceBoundingBoxTree_obj::__construct( ::verb::core::NurbsSurfaceData surface,::hx::Null< bool >  __o_splitV, ::Dynamic knotTolU, ::Dynamic knotTolV){
            		bool splitV = __o_splitV.Default(false);
            	HX_STACKFRAME(&_hx_pos_bb8f7c50363a6ac8_11_new)
HXLINE(  14)		this->_boundingBox = null();
HXLINE(  20)		this->_surface = surface;
HXLINE(  21)		this->_splitV = splitV;
HXLINE(  23)		if (::hx::IsNull( knotTolU )) {
HXLINE(  24)			::Array< Float > a = surface->knotsU;
HXDLIN(  24)			Float knotTolU1 = ( (Float)(::verb::core::ArrayExtensions_obj::last(a)) );
HXDLIN(  24)			knotTolU = ((knotTolU1 - ( (Float)(::verb::core::ArrayExtensions_obj::first(a)) )) / ( (Float)(16) ));
            		}
HXLINE(  27)		if (::hx::IsNull( knotTolV )) {
HXLINE(  28)			::Array< Float > a = surface->knotsV;
HXDLIN(  28)			Float knotTolV1 = ( (Float)(::verb::core::ArrayExtensions_obj::last(a)) );
HXDLIN(  28)			knotTolV = ((knotTolV1 - ( (Float)(::verb::core::ArrayExtensions_obj::first(a)) )) / ( (Float)(16) ));
            		}
HXLINE(  31)		this->_knotTolU = ( (Float)(knotTolU) );
HXLINE(  32)		this->_knotTolV = ( (Float)(knotTolV) );
            	}

Dynamic LazySurfaceBoundingBoxTree_obj::__CreateEmpty() { return new LazySurfaceBoundingBoxTree_obj; }

void *LazySurfaceBoundingBoxTree_obj::_hx_vtable = 0;

Dynamic LazySurfaceBoundingBoxTree_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LazySurfaceBoundingBoxTree_obj > _hx_result = new LazySurfaceBoundingBoxTree_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool LazySurfaceBoundingBoxTree_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1ad9928a;
}

static ::verb::eval::IBoundingBoxTree_obj _hx_verb_core_LazySurfaceBoundingBoxTree__hx_verb_eval_IBoundingBoxTree= {
	(  ::verb::core::BoundingBox (::hx::Object::*)())&::verb::core::LazySurfaceBoundingBoxTree_obj::boundingBox,
	(  ::verb::core::Pair (::hx::Object::*)())&::verb::core::LazySurfaceBoundingBoxTree_obj::split,
	(  ::Dynamic (::hx::Object::*)())&::verb::core::LazySurfaceBoundingBoxTree_obj::yield_2aa2127b,
	( bool (::hx::Object::*)(Float))&::verb::core::LazySurfaceBoundingBoxTree_obj::indivisible,
	( bool (::hx::Object::*)())&::verb::core::LazySurfaceBoundingBoxTree_obj::empty,
};

 ::Dynamic LazySurfaceBoundingBoxTree_obj::yield_2aa2127b() {
			return yield();
}
void *LazySurfaceBoundingBoxTree_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x9907fd77: return &_hx_verb_core_LazySurfaceBoundingBoxTree__hx_verb_eval_IBoundingBoxTree;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::verb::core::Pair LazySurfaceBoundingBoxTree_obj::split(){
            	HX_GC_STACKFRAME(&_hx_pos_bb8f7c50363a6ac8_35_split)
HXLINE(  36)		Float min;
HXLINE(  37)		Float max;
HXLINE(  39)		if (this->_splitV) {
HXLINE(  40)			min = ( (Float)(::verb::core::ArrayExtensions_obj::first(this->_surface->knotsV)) );
HXLINE(  41)			max = ( (Float)(::verb::core::ArrayExtensions_obj::last(this->_surface->knotsV)) );
            		}
            		else {
HXLINE(  43)			min = ( (Float)(::verb::core::ArrayExtensions_obj::first(this->_surface->knotsU)) );
HXLINE(  44)			max = ( (Float)(::verb::core::ArrayExtensions_obj::last(this->_surface->knotsU)) );
            		}
HXLINE(  47)		Float dom = (max - min);
HXLINE(  48)		Float pivot = ((min + max) / ((Float)2.0));
HXLINE(  50)		::Array< ::Dynamic> srfs = ::verb::eval::Divide_obj::surfaceSplit(this->_surface,pivot,this->_splitV);
HXLINE(  53)		 ::verb::core::LazySurfaceBoundingBoxTree _hx_tmp =  ::verb::core::LazySurfaceBoundingBoxTree_obj::__alloc( HX_CTX ,srfs->__get(0).StaticCast<  ::verb::core::NurbsSurfaceData >(),!(this->_splitV),this->_knotTolU,this->_knotTolV);
HXLINE(  52)		return  ::verb::core::Pair_obj::__alloc( HX_CTX ,_hx_tmp, ::verb::core::LazySurfaceBoundingBoxTree_obj::__alloc( HX_CTX ,srfs->__get(1).StaticCast<  ::verb::core::NurbsSurfaceData >(),!(this->_splitV),this->_knotTolU,this->_knotTolV));
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazySurfaceBoundingBoxTree_obj,split,return )

 ::verb::core::BoundingBox LazySurfaceBoundingBoxTree_obj::boundingBox(){
            	HX_GC_STACKFRAME(&_hx_pos_bb8f7c50363a6ac8_57_boundingBox)
HXLINE(  58)		if (::hx::IsNull( this->_boundingBox )) {
HXLINE(  59)			this->_boundingBox =  ::verb::core::BoundingBox_obj::__alloc( HX_CTX ,null());
HXLINE(  60)			{
HXLINE(  60)				int _g = 0;
HXDLIN(  60)				::Array< ::Dynamic> _g1 = this->_surface->controlPoints;
HXDLIN(  60)				while((_g < _g1->length)){
HXLINE(  60)					::Array< ::Dynamic> row = _g1->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  60)					_g = (_g + 1);
HXLINE(  61)					 ::verb::core::BoundingBox _hx_tmp = this->_boundingBox;
HXDLIN(  61)					_hx_tmp->addRange(::verb::eval::Eval_obj::dehomogenize1d(row));
            				}
            			}
            		}
HXLINE(  64)		return this->_boundingBox;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazySurfaceBoundingBoxTree_obj,boundingBox,return )

 ::verb::core::NurbsSurfaceData LazySurfaceBoundingBoxTree_obj::yield(){
            	HX_STACKFRAME(&_hx_pos_bb8f7c50363a6ac8_68_yield)
HXDLIN(  68)		return this->_surface;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazySurfaceBoundingBoxTree_obj,yield,return )

bool LazySurfaceBoundingBoxTree_obj::indivisible(Float tolerance){
            	HX_STACKFRAME(&_hx_pos_bb8f7c50363a6ac8_72_indivisible)
HXDLIN(  72)		::Array< Float > a = this->_surface->knotsV;
HXDLIN(  72)		Float _hx_tmp = ( (Float)(::verb::core::ArrayExtensions_obj::last(a)) );
HXDLIN(  72)		Float _hx_tmp1 = (_hx_tmp - ( (Float)(::verb::core::ArrayExtensions_obj::first(a)) ));
HXDLIN(  72)		if ((_hx_tmp1 < this->_knotTolV)) {
HXDLIN(  72)			::Array< Float > a = this->_surface->knotsU;
HXDLIN(  72)			Float _hx_tmp = ( (Float)(::verb::core::ArrayExtensions_obj::last(a)) );
HXDLIN(  72)			Float _hx_tmp1 = (_hx_tmp - ( (Float)(::verb::core::ArrayExtensions_obj::first(a)) ));
HXDLIN(  72)			return (_hx_tmp1 < this->_knotTolU);
            		}
            		else {
HXDLIN(  72)			return false;
            		}
HXDLIN(  72)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LazySurfaceBoundingBoxTree_obj,indivisible,return )

bool LazySurfaceBoundingBoxTree_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_bb8f7c50363a6ac8_76_empty)
HXDLIN(  76)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazySurfaceBoundingBoxTree_obj,empty,return )


::hx::ObjectPtr< LazySurfaceBoundingBoxTree_obj > LazySurfaceBoundingBoxTree_obj::__new( ::verb::core::NurbsSurfaceData surface,::hx::Null< bool >  __o_splitV, ::Dynamic knotTolU, ::Dynamic knotTolV) {
	::hx::ObjectPtr< LazySurfaceBoundingBoxTree_obj > __this = new LazySurfaceBoundingBoxTree_obj();
	__this->__construct(surface,__o_splitV,knotTolU,knotTolV);
	return __this;
}

::hx::ObjectPtr< LazySurfaceBoundingBoxTree_obj > LazySurfaceBoundingBoxTree_obj::__alloc(::hx::Ctx *_hx_ctx, ::verb::core::NurbsSurfaceData surface,::hx::Null< bool >  __o_splitV, ::Dynamic knotTolU, ::Dynamic knotTolV) {
	LazySurfaceBoundingBoxTree_obj *__this = (LazySurfaceBoundingBoxTree_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LazySurfaceBoundingBoxTree_obj), true, "verb.core.LazySurfaceBoundingBoxTree"));
	*(void **)__this = LazySurfaceBoundingBoxTree_obj::_hx_vtable;
	__this->__construct(surface,__o_splitV,knotTolU,knotTolV);
	return __this;
}

LazySurfaceBoundingBoxTree_obj::LazySurfaceBoundingBoxTree_obj()
{
}

void LazySurfaceBoundingBoxTree_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LazySurfaceBoundingBoxTree);
	HX_MARK_MEMBER_NAME(_surface,"_surface");
	HX_MARK_MEMBER_NAME(_boundingBox,"_boundingBox");
	HX_MARK_MEMBER_NAME(_splitV,"_splitV");
	HX_MARK_MEMBER_NAME(_knotTolU,"_knotTolU");
	HX_MARK_MEMBER_NAME(_knotTolV,"_knotTolV");
	HX_MARK_END_CLASS();
}

void LazySurfaceBoundingBoxTree_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_surface,"_surface");
	HX_VISIT_MEMBER_NAME(_boundingBox,"_boundingBox");
	HX_VISIT_MEMBER_NAME(_splitV,"_splitV");
	HX_VISIT_MEMBER_NAME(_knotTolU,"_knotTolU");
	HX_VISIT_MEMBER_NAME(_knotTolV,"_knotTolV");
}

::hx::Val LazySurfaceBoundingBoxTree_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"split") ) { return ::hx::Val( split_dyn() ); }
		if (HX_FIELD_EQ(inName,"yield") ) { return ::hx::Val( yield_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return ::hx::Val( empty_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_splitV") ) { return ::hx::Val( _splitV ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_surface") ) { return ::hx::Val( _surface ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_knotTolU") ) { return ::hx::Val( _knotTolU ); }
		if (HX_FIELD_EQ(inName,"_knotTolV") ) { return ::hx::Val( _knotTolV ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"boundingBox") ) { return ::hx::Val( boundingBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"indivisible") ) { return ::hx::Val( indivisible_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_boundingBox") ) { return ::hx::Val( _boundingBox ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LazySurfaceBoundingBoxTree_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"_splitV") ) { _splitV=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_surface") ) { _surface=inValue.Cast<  ::verb::core::NurbsSurfaceData >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_knotTolU") ) { _knotTolU=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_knotTolV") ) { _knotTolV=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_boundingBox") ) { _boundingBox=inValue.Cast<  ::verb::core::BoundingBox >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LazySurfaceBoundingBoxTree_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_surface",ae,bf,01,97));
	outFields->push(HX_("_boundingBox",08,43,b1,eb));
	outFields->push(HX_("_splitV",db,a5,15,2e));
	outFields->push(HX_("_knotTolU",ab,8d,d7,71));
	outFields->push(HX_("_knotTolV",ac,8d,d7,71));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LazySurfaceBoundingBoxTree_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::verb::core::NurbsSurfaceData */ ,(int)offsetof(LazySurfaceBoundingBoxTree_obj,_surface),HX_("_surface",ae,bf,01,97)},
	{::hx::fsObject /*  ::verb::core::BoundingBox */ ,(int)offsetof(LazySurfaceBoundingBoxTree_obj,_boundingBox),HX_("_boundingBox",08,43,b1,eb)},
	{::hx::fsBool,(int)offsetof(LazySurfaceBoundingBoxTree_obj,_splitV),HX_("_splitV",db,a5,15,2e)},
	{::hx::fsFloat,(int)offsetof(LazySurfaceBoundingBoxTree_obj,_knotTolU),HX_("_knotTolU",ab,8d,d7,71)},
	{::hx::fsFloat,(int)offsetof(LazySurfaceBoundingBoxTree_obj,_knotTolV),HX_("_knotTolV",ac,8d,d7,71)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LazySurfaceBoundingBoxTree_obj_sStaticStorageInfo = 0;
#endif

static ::String LazySurfaceBoundingBoxTree_obj_sMemberFields[] = {
	HX_("_surface",ae,bf,01,97),
	HX_("_boundingBox",08,43,b1,eb),
	HX_("_splitV",db,a5,15,2e),
	HX_("_knotTolU",ab,8d,d7,71),
	HX_("_knotTolV",ac,8d,d7,71),
	HX_("split",da,ea,6e,81),
	HX_("boundingBox",07,95,a7,85),
	HX_("yield",4d,9a,30,f1),
	HX_("indivisible",08,cb,5b,fa),
	HX_("empty",8d,3a,da,6f),
	::String(null()) };

::hx::Class LazySurfaceBoundingBoxTree_obj::__mClass;

void LazySurfaceBoundingBoxTree_obj::__register()
{
	LazySurfaceBoundingBoxTree_obj _hx_dummy;
	LazySurfaceBoundingBoxTree_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.LazySurfaceBoundingBoxTree",ec,a2,a9,a8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LazySurfaceBoundingBoxTree_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LazySurfaceBoundingBoxTree_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LazySurfaceBoundingBoxTree_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LazySurfaceBoundingBoxTree_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
