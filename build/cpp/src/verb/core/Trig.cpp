// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_verb_core_Constants
#include <verb/core/Constants.h>
#endif
#ifndef INCLUDED_verb_core_Plane
#include <verb/core/Plane.h>
#endif
#ifndef INCLUDED_verb_core_SerializableBase
#include <verb/core/SerializableBase.h>
#endif
#ifndef INCLUDED_verb_core_Trig
#include <verb/core/Trig.h>
#endif
#ifndef INCLUDED_verb_core_Vec
#include <verb/core/Vec.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_dd9df3612ad101c6_14_isPointInPlane,"verb.core.Trig","isPointInPlane",0x10babf23,"verb.core.Trig.isPointInPlane","verb/core/Trig.hx",14,0x3a490602)
HX_LOCAL_STACK_FRAME(_hx_pos_dd9df3612ad101c6_17_distToSegment,"verb.core.Trig","distToSegment",0x23c2a520,"verb.core.Trig.distToSegment","verb/core/Trig.hx",17,0x3a490602)
HX_LOCAL_STACK_FRAME(_hx_pos_dd9df3612ad101c6_34_rayClosestPoint,"verb.core.Trig","rayClosestPoint",0xce8499af,"verb.core.Trig.rayClosestPoint","verb/core/Trig.hx",34,0x3a490602)
HX_LOCAL_STACK_FRAME(_hx_pos_dd9df3612ad101c6_54_distToRay,"verb.core.Trig","distToRay",0x479e30d7,"verb.core.Trig.distToRay","verb/core/Trig.hx",54,0x3a490602)
HX_LOCAL_STACK_FRAME(_hx_pos_dd9df3612ad101c6_84_threePointsAreFlat,"verb.core.Trig","threePointsAreFlat",0xdd64f85e,"verb.core.Trig.threePointsAreFlat","verb/core/Trig.hx",84,0x3a490602)
HX_LOCAL_STACK_FRAME(_hx_pos_dd9df3612ad101c6_110_segmentClosestPoint,"verb.core.Trig","segmentClosestPoint",0xd744ebf8,"verb.core.Trig.segmentClosestPoint","verb/core/Trig.hx",110,0x3a490602)
namespace verb{
namespace core{

void Trig_obj::__construct() { }

Dynamic Trig_obj::__CreateEmpty() { return new Trig_obj; }

void *Trig_obj::_hx_vtable = 0;

Dynamic Trig_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Trig_obj > _hx_result = new Trig_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Trig_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6bb1e6fa;
}

bool Trig_obj::isPointInPlane(::Array< Float > pt, ::verb::core::Plane p,Float tol){
            	HX_STACKFRAME(&_hx_pos_dd9df3612ad101c6_14_isPointInPlane)
HXDLIN(  14)		::Array< Float > _hx_tmp = ::verb::core::Vec_obj::sub(pt,p->origin);
HXDLIN(  14)		return (::Math_obj::abs(::verb::core::Vec_obj::dot(_hx_tmp,p->normal)) < tol);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Trig_obj,isPointInPlane,return )

Float Trig_obj::distToSegment(::Array< Float > a,::Array< Float > b,::Array< Float > c){
            	HX_STACKFRAME(&_hx_pos_dd9df3612ad101c6_17_distToSegment)
HXLINE(  18)		 ::Dynamic res = ::verb::core::Trig_obj::segmentClosestPoint(b,a,c,((Float)0.0),((Float)1.0));
HXLINE(  19)		return ::verb::core::Vec_obj::dist(b,( (::Array< Float >)(res->__Field(HX_("pt",04,62,00,00),::hx::paccDynamic)) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Trig_obj,distToSegment,return )

::Array< Float > Trig_obj::rayClosestPoint(::Array< Float > pt,::Array< Float > o,::Array< Float > r){
            	HX_STACKFRAME(&_hx_pos_dd9df3612ad101c6_34_rayClosestPoint)
HXLINE(  35)		::Array< Float > o2pt = ::verb::core::Vec_obj::sub(pt,o);
HXDLIN(  35)		Float do2ptr = ::verb::core::Vec_obj::dot(o2pt,r);
HXDLIN(  35)		::Array< Float > proj = ::verb::core::Vec_obj::add(o,::verb::core::Vec_obj::mul(do2ptr,r));
HXLINE(  39)		return proj;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Trig_obj,rayClosestPoint,return )

Float Trig_obj::distToRay(::Array< Float > pt,::Array< Float > o,::Array< Float > r){
            	HX_STACKFRAME(&_hx_pos_dd9df3612ad101c6_54_distToRay)
HXLINE(  55)		::Array< Float > d = ::verb::core::Trig_obj::rayClosestPoint(pt,o,r);
HXLINE(  56)		::Array< Float > dif = ::verb::core::Vec_obj::sub(d,pt);
HXLINE(  58)		return ::verb::core::Vec_obj::norm(dif);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Trig_obj,distToRay,return )

bool Trig_obj::threePointsAreFlat(::Array< Float > p1,::Array< Float > p2,::Array< Float > p3,Float tol){
            	HX_STACKFRAME(&_hx_pos_dd9df3612ad101c6_84_threePointsAreFlat)
HXLINE(  87)		::Array< Float > p2mp1 = ::verb::core::Vec_obj::sub(p2,p1);
HXDLIN(  87)		::Array< Float > p3mp1 = ::verb::core::Vec_obj::sub(p3,p1);
HXDLIN(  87)		::Array< Float > norm = ::verb::core::Vec_obj::cross(p2mp1,p3mp1);
HXDLIN(  87)		Float area = ::verb::core::Vec_obj::dot(norm,norm);
HXLINE(  92)		return (area < tol);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Trig_obj,threePointsAreFlat,return )

 ::Dynamic Trig_obj::segmentClosestPoint(::Array< Float > pt,::Array< Float > segpt0,::Array< Float > segpt1,Float u0,Float u1){
            	HX_STACKFRAME(&_hx_pos_dd9df3612ad101c6_110_segmentClosestPoint)
HXLINE( 112)		::Array< Float > dif = ::verb::core::Vec_obj::sub(segpt1,segpt0);
HXDLIN( 112)		Float l = ::verb::core::Vec_obj::norm(dif);
HXLINE( 115)		if ((l < ::verb::core::Constants_obj::EPSILON)) {
HXLINE( 116)			return  ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("u",75,00,00,00),u0)
            				->setFixed(1,HX_("pt",04,62,00,00),segpt0));
            		}
HXLINE( 119)		::Array< Float > o = segpt0;
HXDLIN( 119)		::Array< Float > r = ::verb::core::Vec_obj::mul((( (Float)(1) ) / l),dif);
HXDLIN( 119)		::Array< Float > o2pt = ::verb::core::Vec_obj::sub(pt,o);
HXDLIN( 119)		Float do2ptr = ::verb::core::Vec_obj::dot(o2pt,r);
HXLINE( 124)		if ((do2ptr < 0)) {
HXLINE( 125)			return  ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("u",75,00,00,00),u0)
            				->setFixed(1,HX_("pt",04,62,00,00),segpt0));
            		}
            		else {
HXLINE( 126)			if ((do2ptr > l)) {
HXLINE( 127)				return  ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("u",75,00,00,00),u1)
            					->setFixed(1,HX_("pt",04,62,00,00),segpt1));
            			}
            		}
HXLINE( 130)		return  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("u",75,00,00,00),(u0 + (((u1 - u0) * do2ptr) / l)))
            			->setFixed(1,HX_("pt",04,62,00,00),::verb::core::Vec_obj::add(o,::verb::core::Vec_obj::mul(do2ptr,r))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Trig_obj,segmentClosestPoint,return )


Trig_obj::Trig_obj()
{
}

bool Trig_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"distToRay") ) { outValue = distToRay_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"distToSegment") ) { outValue = distToSegment_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"isPointInPlane") ) { outValue = isPointInPlane_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"rayClosestPoint") ) { outValue = rayClosestPoint_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"threePointsAreFlat") ) { outValue = threePointsAreFlat_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"segmentClosestPoint") ) { outValue = segmentClosestPoint_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Trig_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Trig_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Trig_obj::__mClass;

static ::String Trig_obj_sStaticFields[] = {
	HX_("isPointInPlane",d1,50,90,36),
	HX_("distToSegment",32,63,93,b4),
	HX_("rayClosestPoint",41,80,8e,c3),
	HX_("distToRay",e9,fd,cd,92),
	HX_("threePointsAreFlat",0c,f9,8f,5b),
	HX_("segmentClosestPoint",8a,83,ba,be),
	::String(null())
};

void Trig_obj::__register()
{
	Trig_obj _hx_dummy;
	Trig_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.Trig",dc,3d,bc,65);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Trig_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Trig_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Trig_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Trig_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Trig_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
