// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_NurbsCurveData
#include <verb/core/NurbsCurveData.h>
#endif
#ifndef INCLUDED_verb_core_SerializableBase
#include <verb/core/SerializableBase.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_87fbef3269e229cc_61_new,"verb.core.NurbsCurveData","new",0xf3b55e6f,"verb.core.NurbsCurveData.new","verb/core/Data.hx",61,0x26519174)
namespace verb{
namespace core{

void NurbsCurveData_obj::__construct(int degree,::Array< Float > knots,::Array< ::Dynamic> controlPoints){
            	HX_STACKFRAME(&_hx_pos_87fbef3269e229cc_61_new)
HXLINE(  62)		this->degree = degree;
HXLINE(  63)		this->controlPoints = controlPoints;
HXLINE(  64)		this->knots = knots;
            	}

Dynamic NurbsCurveData_obj::__CreateEmpty() { return new NurbsCurveData_obj; }

void *NurbsCurveData_obj::_hx_vtable = 0;

Dynamic NurbsCurveData_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NurbsCurveData_obj > _hx_result = new NurbsCurveData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool NurbsCurveData_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x06d9bbfa) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x06d9bbfa;
	} else {
		return inClassId==(int)0x1e8283ff;
	}
}


::hx::ObjectPtr< NurbsCurveData_obj > NurbsCurveData_obj::__new(int degree,::Array< Float > knots,::Array< ::Dynamic> controlPoints) {
	::hx::ObjectPtr< NurbsCurveData_obj > __this = new NurbsCurveData_obj();
	__this->__construct(degree,knots,controlPoints);
	return __this;
}

::hx::ObjectPtr< NurbsCurveData_obj > NurbsCurveData_obj::__alloc(::hx::Ctx *_hx_ctx,int degree,::Array< Float > knots,::Array< ::Dynamic> controlPoints) {
	NurbsCurveData_obj *__this = (NurbsCurveData_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NurbsCurveData_obj), true, "verb.core.NurbsCurveData"));
	*(void **)__this = NurbsCurveData_obj::_hx_vtable;
	__this->__construct(degree,knots,controlPoints);
	return __this;
}

NurbsCurveData_obj::NurbsCurveData_obj()
{
}

void NurbsCurveData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NurbsCurveData);
	HX_MARK_MEMBER_NAME(degree,"degree");
	HX_MARK_MEMBER_NAME(controlPoints,"controlPoints");
	HX_MARK_MEMBER_NAME(knots,"knots");
	HX_MARK_END_CLASS();
}

void NurbsCurveData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(degree,"degree");
	HX_VISIT_MEMBER_NAME(controlPoints,"controlPoints");
	HX_VISIT_MEMBER_NAME(knots,"knots");
}

::hx::Val NurbsCurveData_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"knots") ) { return ::hx::Val( knots ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"degree") ) { return ::hx::Val( degree ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"controlPoints") ) { return ::hx::Val( controlPoints ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val NurbsCurveData_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"knots") ) { knots=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"degree") ) { degree=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"controlPoints") ) { controlPoints=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NurbsCurveData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("degree",4c,7f,94,67));
	outFields->push(HX_("controlPoints",60,55,f2,6f));
	outFields->push(HX_("knots",eb,29,ea,e4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo NurbsCurveData_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(NurbsCurveData_obj,degree),HX_("degree",4c,7f,94,67)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(NurbsCurveData_obj,controlPoints),HX_("controlPoints",60,55,f2,6f)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(NurbsCurveData_obj,knots),HX_("knots",eb,29,ea,e4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *NurbsCurveData_obj_sStaticStorageInfo = 0;
#endif

static ::String NurbsCurveData_obj_sMemberFields[] = {
	HX_("degree",4c,7f,94,67),
	HX_("controlPoints",60,55,f2,6f),
	HX_("knots",eb,29,ea,e4),
	::String(null()) };

::hx::Class NurbsCurveData_obj::__mClass;

void NurbsCurveData_obj::__register()
{
	NurbsCurveData_obj _hx_dummy;
	NurbsCurveData_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.NurbsCurveData",fd,fa,13,f6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NurbsCurveData_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NurbsCurveData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NurbsCurveData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NurbsCurveData_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
