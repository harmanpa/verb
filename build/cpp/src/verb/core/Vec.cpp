// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_verb_core_ArrayExtensions
#include <verb/core/ArrayExtensions.h>
#endif
#ifndef INCLUDED_verb_core_Constants
#include <verb/core/Constants.h>
#endif
#ifndef INCLUDED_verb_core_Vec
#include <verb/core/Vec.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_17_angleBetween,"verb.core.Vec","angleBetween",0x2e91cd8f,"verb.core.Vec.angleBetween","verb/core/Vec.hx",17,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_20_positiveAngleBetween,"verb.core.Vec","positiveAngleBetween",0xa4b85be8,"verb.core.Vec.positiveAngleBetween","verb/core/Vec.hx",20,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_39_signedAngleBetween,"verb.core.Vec","signedAngleBetween",0xd74ea50b,"verb.core.Vec.signedAngleBetween","verb/core/Vec.hx",39,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_56_angleBetweenNormalized2d,"verb.core.Vec","angleBetweenNormalized2d",0x6e640018,"verb.core.Vec.angleBetweenNormalized2d","verb/core/Vec.hx",56,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_62_domain,"verb.core.Vec","domain",0x12d7391e,"verb.core.Vec.domain","verb/core/Vec.hx",62,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_65_range,"verb.core.Vec","range",0xeae45723,"verb.core.Vec.range","verb/core/Vec.hx",65,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_75_span,"verb.core.Vec","span",0x7b71d824,"verb.core.Vec.span","verb/core/Vec.hx",75,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_95_neg,"verb.core.Vec","neg",0x41f93c36,"verb.core.Vec.neg","verb/core/Vec.hx",95,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_99_min,"verb.core.Vec","min",0x41f87d78,"verb.core.Vec.min","verb/core/Vec.hx",99,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_103_max,"verb.core.Vec","max",0x41f8768a,"verb.core.Vec.max","verb/core/Vec.hx",103,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_107_all,"verb.core.Vec","all",0x41ef6507,"verb.core.Vec.all","verb/core/Vec.hx",107,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_111_finite,"verb.core.Vec","finite",0x6bd5c909,"verb.core.Vec.finite","verb/core/Vec.hx",111,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_115_onRay,"verb.core.Vec","onRay",0x39331b71,"verb.core.Vec.onRay","verb/core/Vec.hx",115,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_119_lerp,"verb.core.Vec","lerp",0x76c90fd1,"verb.core.Vec.lerp","verb/core/Vec.hx",119,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_123_normalized,"verb.core.Vec","normalized",0x676fe111,"verb.core.Vec.normalized","verb/core/Vec.hx",123,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_127_cross,"verb.core.Vec","cross",0x531f10e6,"verb.core.Vec.cross","verb/core/Vec.hx",127,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_131_dist,"verb.core.Vec","dist",0x718264c0,"verb.core.Vec.dist","verb/core/Vec.hx",131,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_135_distSquared,"verb.core.Vec","distSquared",0x85476447,"verb.core.Vec.distSquared","verb/core/Vec.hx",135,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_139_sum,"verb.core.Vec","sum",0x41fd1571,"verb.core.Vec.sum","verb/core/Vec.hx",139,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_148_addAll,"verb.core.Vec","addAll",0x8451915a,"verb.core.Vec.addAll","verb/core/Vec.hx",148,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_142_addAll,"verb.core.Vec","addAll",0x8451915a,"verb.core.Vec.addAll","verb/core/Vec.hx",142,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_151_addAllMutate,"verb.core.Vec","addAllMutate",0xd2337880,"verb.core.Vec.addAllMutate","verb/core/Vec.hx",151,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_158_addMulMutate,"verb.core.Vec","addMulMutate",0xb84a67a3,"verb.core.Vec.addMulMutate","verb/core/Vec.hx",158,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_163_subMulMutate,"verb.core.Vec","subMulMutate",0x65f04c64,"verb.core.Vec.subMulMutate","verb/core/Vec.hx",163,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_168_addMutate,"verb.core.Vec","addMutate",0x583384ed,"verb.core.Vec.addMutate","verb/core/Vec.hx",168,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_173_subMutate,"verb.core.Vec","subMutate",0xa65b8d8c,"verb.core.Vec.subMutate","verb/core/Vec.hx",173,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_178_mulMutate,"verb.core.Vec","mulMutate",0x5489bb10,"verb.core.Vec.mulMutate","verb/core/Vec.hx",178,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_182_norm,"verb.core.Vec","norm",0x78231396,"verb.core.Vec.norm","verb/core/Vec.hx",182,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_188_normSquared,"verb.core.Vec","normSquared",0xac63dc31,"verb.core.Vec.normSquared","verb/core/Vec.hx",188,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_192_rep,"verb.core.Vec","rep",0x41fc4543,"verb.core.Vec.rep","verb/core/Vec.hx",192,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_196_fill,"verb.core.Vec","fill",0x72d4cbdd,"verb.core.Vec.fill","verb/core/Vec.hx",196,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_200_zeros1d,"verb.core.Vec","zeros1d",0xe70a9f04,"verb.core.Vec.zeros1d","verb/core/Vec.hx",200,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_204_zeros2d,"verb.core.Vec","zeros2d",0xe70a9fe3,"verb.core.Vec.zeros2d","verb/core/Vec.hx",204,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_208_zeros3d,"verb.core.Vec","zeros3d",0xe70aa0c2,"verb.core.Vec.zeros3d","verb/core/Vec.hx",208,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_211_dot,"verb.core.Vec","dot",0x41f1ae6f,"verb.core.Vec.dot","verb/core/Vec.hx",211,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_220_add,"verb.core.Vec","add",0x41ef5e07,"verb.core.Vec.add","verb/core/Vec.hx",220,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_224_mul,"verb.core.Vec","mul",0x41f887ea,"verb.core.Vec.mul","verb/core/Vec.hx",224,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_228_div,"verb.core.Vec","div",0x41f1a937,"verb.core.Vec.div","verb/core/Vec.hx",228,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_232_sub,"verb.core.Vec","sub",0x41fd1566,"verb.core.Vec.sub","verb/core/Vec.hx",232,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_235_isZero,"verb.core.Vec","isZero",0x53ae5c0c,"verb.core.Vec.isZero","verb/core/Vec.hx",235,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_244_sortedSetUnion,"verb.core.Vec","sortedSetUnion",0x4c1f1444,"verb.core.Vec.sortedSetUnion","verb/core/Vec.hx",244,0x3360524a)
HX_LOCAL_STACK_FRAME(_hx_pos_5be3e7be31265109_288_sortedSetSub,"verb.core.Vec","sortedSetSub",0xd805b175,"verb.core.Vec.sortedSetSub","verb/core/Vec.hx",288,0x3360524a)
namespace verb{
namespace core{

void Vec_obj::__construct() { }

Dynamic Vec_obj::__CreateEmpty() { return new Vec_obj; }

void *Vec_obj::_hx_vtable = 0;

Dynamic Vec_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Vec_obj > _hx_result = new Vec_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Vec_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1772c5f6;
}

Float Vec_obj::angleBetween(::Array< Float > a,::Array< Float > b){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_17_angleBetween)
HXDLIN(  17)		Float _hx_tmp = ::verb::core::Vec_obj::dot(a,b);
HXDLIN(  17)		Float _hx_tmp1 = ::verb::core::Vec_obj::norm(a);
HXDLIN(  17)		return ::Math_obj::acos((_hx_tmp / (_hx_tmp1 * ::verb::core::Vec_obj::norm(b))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_obj,angleBetween,return )

Float Vec_obj::positiveAngleBetween(::Array< Float > a,::Array< Float > b,::Array< Float > n){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_20_positiveAngleBetween)
HXLINE(  21)		::Array< Float > nab = ::verb::core::Vec_obj::cross(a,b);
HXLINE(  23)		Float al = ::verb::core::Vec_obj::norm(a);
HXLINE(  24)		Float bl = ::verb::core::Vec_obj::norm(b);
HXLINE(  25)		Float abl = (al * bl);
HXLINE(  26)		Float adb = ::verb::core::Vec_obj::dot(a,b);
HXLINE(  28)		Float sina = (::verb::core::Vec_obj::norm(nab) / abl);
HXLINE(  29)		Float cosa = (adb / abl);
HXLINE(  31)		Float w = ::Math_obj::atan2(sina,cosa);
HXLINE(  32)		Float s = ::verb::core::Vec_obj::dot(n,nab);
HXLINE(  34)		if ((::Math_obj::abs(s) < ::verb::core::Constants_obj::EPSILON)) {
HXLINE(  34)			return w;
            		}
HXLINE(  36)		if ((s > 0)) {
HXLINE(  36)			return w;
            		}
            		else {
HXLINE(  36)			return -(w);
            		}
HXDLIN(  36)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vec_obj,positiveAngleBetween,return )

Float Vec_obj::signedAngleBetween(::Array< Float > a,::Array< Float > b,::Array< Float > n){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_39_signedAngleBetween)
HXLINE(  40)		::Array< Float > nab = ::verb::core::Vec_obj::cross(a,b);
HXLINE(  42)		Float al = ::verb::core::Vec_obj::norm(a);
HXLINE(  43)		Float bl = ::verb::core::Vec_obj::norm(b);
HXLINE(  44)		Float abl = (al * bl);
HXLINE(  45)		Float adb = ::verb::core::Vec_obj::dot(a,b);
HXLINE(  47)		Float sina = (::verb::core::Vec_obj::norm(nab) / abl);
HXLINE(  48)		Float cosa = (adb / abl);
HXLINE(  50)		Float w = ::Math_obj::atan2(sina,cosa);
HXLINE(  51)		Float s = ::verb::core::Vec_obj::dot(n,nab);
HXLINE(  53)		if ((s > ((Float)0.0))) {
HXLINE(  53)			return w;
            		}
            		else {
HXLINE(  53)			return ((( (Float)(2) ) * ::Math_obj::PI) - w);
            		}
HXDLIN(  53)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vec_obj,signedAngleBetween,return )

Float Vec_obj::angleBetweenNormalized2d(::Array< Float > a,::Array< Float > b){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_56_angleBetweenNormalized2d)
HXLINE(  57)		Float perpDot = ((a->__get(0) * b->__get(1)) - (a->__get(1) * b->__get(0)));
HXLINE(  58)		return ::Math_obj::atan2(perpDot,::verb::core::Vec_obj::dot(a,b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_obj,angleBetweenNormalized2d,return )

Float Vec_obj::domain(::Array< Float > a){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_62_domain)
HXDLIN(  62)		Float _hx_tmp = ( (Float)(::verb::core::ArrayExtensions_obj::last(a)) );
HXDLIN(  62)		return (_hx_tmp - ( (Float)(::verb::core::ArrayExtensions_obj::first(a)) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vec_obj,domain,return )

::Array< Float > Vec_obj::range(int max){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_65_range)
HXLINE(  66)		::Array< Float > l = ::Array_obj< Float >::__new(0);
HXLINE(  67)		Float f = ((Float)0.0);
HXLINE(  68)		{
HXLINE(  68)			int _g = 0;
HXDLIN(  68)			int _g1 = max;
HXDLIN(  68)			while((_g < _g1)){
HXLINE(  68)				_g = (_g + 1);
HXDLIN(  68)				int i = (_g - 1);
HXLINE(  69)				l->push(f);
HXLINE(  70)				f = (f + ((Float)1.0));
            			}
            		}
HXLINE(  72)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vec_obj,range,return )

::Array< Float > Vec_obj::span(Float min,Float max,Float step){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_75_span)
HXLINE(  79)		if ((step < ::verb::core::Constants_obj::EPSILON)) {
HXLINE(  79)			return ::Array_obj< Float >::__new(0);
            		}
HXLINE(  80)		bool _hx_tmp;
HXDLIN(  80)		if ((min > max)) {
HXLINE(  80)			_hx_tmp = (step > ((Float)0.0));
            		}
            		else {
HXLINE(  80)			_hx_tmp = false;
            		}
HXDLIN(  80)		if (_hx_tmp) {
HXLINE(  80)			return ::Array_obj< Float >::__new(0);
            		}
HXLINE(  81)		bool _hx_tmp1;
HXDLIN(  81)		if ((max > min)) {
HXLINE(  81)			_hx_tmp1 = (step < ((Float)0.0));
            		}
            		else {
HXLINE(  81)			_hx_tmp1 = false;
            		}
HXDLIN(  81)		if (_hx_tmp1) {
HXLINE(  81)			return ::Array_obj< Float >::__new(0);
            		}
HXLINE(  83)		::Array< Float > l = ::Array_obj< Float >::__new(0);
HXLINE(  84)		Float cur = min;
HXLINE(  86)		while((cur <= max)){
HXLINE(  87)			l->push(cur);
HXLINE(  88)			cur = (cur + step);
            		}
HXLINE(  91)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vec_obj,span,return )

::Array< Float > Vec_obj::neg(::Array< Float > arr){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_95_neg)
HXDLIN(  95)		::Array< Float > result = ::Array_obj< Float >::__new(arr->length);
HXDLIN(  95)		{
HXDLIN(  95)			int _g = 0;
HXDLIN(  95)			int _g1 = arr->length;
HXDLIN(  95)			while((_g < _g1)){
HXDLIN(  95)				_g = (_g + 1);
HXDLIN(  95)				int i = (_g - 1);
HXDLIN(  95)				{
HXDLIN(  95)					Float inValue = -(( (Float)(_hx_array_unsafe_get(arr,i)) ));
HXDLIN(  95)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN(  95)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vec_obj,neg,return )

Float Vec_obj::min(::Array< Float > arr){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Float _hx_run(Float x,Float a){
            			HX_STACKFRAME(&_hx_pos_5be3e7be31265109_99_min)
HXDLIN(  99)			return ::Math_obj::min(x,a);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_99_min)
HXDLIN(  99)		return ( (Float)(::Lambda_obj::fold(arr, ::Dynamic(new _hx_Closure_0()),::Math_obj::POSITIVE_INFINITY)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vec_obj,min,return )

Float Vec_obj::max(::Array< Float > arr){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Float _hx_run(Float x,Float a){
            			HX_STACKFRAME(&_hx_pos_5be3e7be31265109_103_max)
HXDLIN( 103)			return ::Math_obj::max(x,a);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_103_max)
HXDLIN( 103)		return ( (Float)(::Lambda_obj::fold(arr, ::Dynamic(new _hx_Closure_0()),::Math_obj::NEGATIVE_INFINITY)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vec_obj,max,return )

bool Vec_obj::all(::Array< bool > arr){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		bool _hx_run(bool x,bool a){
            			HX_STACKFRAME(&_hx_pos_5be3e7be31265109_107_all)
HXDLIN( 107)			if (a) {
HXDLIN( 107)				return x;
            			}
            			else {
HXDLIN( 107)				return false;
            			}
HXDLIN( 107)			return false;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_107_all)
HXDLIN( 107)		return ( (bool)(::Lambda_obj::fold(arr, ::Dynamic(new _hx_Closure_0()),true)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vec_obj,all,return )

::Array< bool > Vec_obj::finite(::Array< Float > arr){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_111_finite)
HXDLIN( 111)		::Array< bool > result = ::Array_obj< bool >::__new(arr->length);
HXDLIN( 111)		{
HXDLIN( 111)			int _g = 0;
HXDLIN( 111)			int _g1 = arr->length;
HXDLIN( 111)			while((_g < _g1)){
HXDLIN( 111)				_g = (_g + 1);
HXDLIN( 111)				int i = (_g - 1);
HXDLIN( 111)				{
HXDLIN( 111)					bool inValue = ::Math_obj::isFinite(( (Float)(_hx_array_unsafe_get(arr,i)) ));
HXDLIN( 111)					result->__unsafe_set(i,inValue);
            				}
            			}
            		}
HXDLIN( 111)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vec_obj,finite,return )

::Array< Float > Vec_obj::onRay(::Array< Float > origin,::Array< Float > dir,Float u){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_115_onRay)
HXDLIN( 115)		return ::verb::core::Vec_obj::add(origin,::verb::core::Vec_obj::mul(u,dir));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vec_obj,onRay,return )

::Array< Float > Vec_obj::lerp(Float i,::Array< Float > u,::Array< Float > v){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_119_lerp)
HXDLIN( 119)		::Array< Float > _hx_tmp = ::verb::core::Vec_obj::mul(i,u);
HXDLIN( 119)		return ::verb::core::Vec_obj::add(_hx_tmp,::verb::core::Vec_obj::mul((((Float)1.0) - i),v));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vec_obj,lerp,return )

::Array< Float > Vec_obj::normalized(::Array< Float > arr){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_123_normalized)
HXDLIN( 123)		return ::verb::core::Vec_obj::div(arr,::verb::core::Vec_obj::norm(arr));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vec_obj,normalized,return )

::Array< Float > Vec_obj::cross(::Array< Float > u,::Array< Float > v){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_127_cross)
HXDLIN( 127)		return ::Array_obj< Float >::__new(3)->init(0,((u->__get(1) * v->__get(2)) - (u->__get(2) * v->__get(1))))->init(1,((u->__get(2) * v->__get(0)) - (u->__get(0) * v->__get(2))))->init(2,((u->__get(0) * v->__get(1)) - (u->__get(1) * v->__get(0))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_obj,cross,return )

Float Vec_obj::dist(::Array< Float > a,::Array< Float > b){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_131_dist)
HXDLIN( 131)		return ::verb::core::Vec_obj::norm(::verb::core::Vec_obj::sub(a,b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_obj,dist,return )

Float Vec_obj::distSquared(::Array< Float > a,::Array< Float > b){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_135_distSquared)
HXDLIN( 135)		return ::verb::core::Vec_obj::normSquared(::verb::core::Vec_obj::sub(a,b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_obj,distSquared,return )

Float Vec_obj::sum(::Array< Float > a){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Float _hx_run(Float x,Float a){
            			HX_STACKFRAME(&_hx_pos_5be3e7be31265109_139_sum)
HXDLIN( 139)			return (a + x);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_139_sum)
HXDLIN( 139)		return ( (Float)(::Lambda_obj::fold(a, ::Dynamic(new _hx_Closure_0()),0)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vec_obj,sum,return )

::Array< Float > Vec_obj::addAll( ::Dynamic a){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		::Array< Float > _hx_run(::Array< Float > x,::Array< Float > a){
            			HX_STACKFRAME(&_hx_pos_5be3e7be31265109_148_addAll)
HXLINE( 148)			return ::verb::core::Vec_obj::add(a,x);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_142_addAll)
HXLINE( 143)		 ::Dynamic i = a->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
HXLINE( 144)		if (!(( (bool)(i->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) ))) {
HXLINE( 144)			return null();
            		}
HXLINE( 146)		int f = ( (::Array< Float >)(i->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) )->length;
HXLINE( 148)		return ( (::Array< Float >)(::Lambda_obj::fold(a, ::Dynamic(new _hx_Closure_0()),::verb::core::Vec_obj::rep(f,((Float)0.0)))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vec_obj,addAll,return )

void Vec_obj::addAllMutate(::Array< ::Dynamic> a){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_151_addAllMutate)
HXLINE( 152)		::Array< Float > f = a->__get(0).StaticCast< ::Array< Float > >();
HXLINE( 153)		{
HXLINE( 153)			int _g = 1;
HXDLIN( 153)			int _g1 = a->length;
HXDLIN( 153)			while((_g < _g1)){
HXLINE( 153)				_g = (_g + 1);
HXDLIN( 153)				int i = (_g - 1);
HXLINE( 154)				::verb::core::Vec_obj::addMutate(f,a->__get(i).StaticCast< ::Array< Float > >());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vec_obj,addAllMutate,(void))

void Vec_obj::addMulMutate(::Array< Float > a,Float s,::Array< Float > b){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_158_addMulMutate)
HXDLIN( 158)		int _g = 0;
HXDLIN( 158)		int _g1 = a->length;
HXDLIN( 158)		while((_g < _g1)){
HXDLIN( 158)			_g = (_g + 1);
HXDLIN( 158)			int i = (_g - 1);
HXLINE( 159)			a[i] = (a->__get(i) + (s * b->__get(i)));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vec_obj,addMulMutate,(void))

void Vec_obj::subMulMutate(::Array< Float > a,Float s,::Array< Float > b){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_163_subMulMutate)
HXDLIN( 163)		int _g = 0;
HXDLIN( 163)		int _g1 = a->length;
HXDLIN( 163)		while((_g < _g1)){
HXDLIN( 163)			_g = (_g + 1);
HXDLIN( 163)			int i = (_g - 1);
HXLINE( 164)			a[i] = (a->__get(i) - (s * b->__get(i)));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vec_obj,subMulMutate,(void))

void Vec_obj::addMutate(::Array< Float > a,::Array< Float > b){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_168_addMutate)
HXDLIN( 168)		int _g = 0;
HXDLIN( 168)		int _g1 = a->length;
HXDLIN( 168)		while((_g < _g1)){
HXDLIN( 168)			_g = (_g + 1);
HXDLIN( 168)			int i = (_g - 1);
HXLINE( 169)			a[i] = (a->__get(i) + b->__get(i));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_obj,addMutate,(void))

void Vec_obj::subMutate(::Array< Float > a,::Array< Float > b){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_173_subMutate)
HXDLIN( 173)		int _g = 0;
HXDLIN( 173)		int _g1 = a->length;
HXDLIN( 173)		while((_g < _g1)){
HXDLIN( 173)			_g = (_g + 1);
HXDLIN( 173)			int i = (_g - 1);
HXLINE( 174)			a[i] = (a->__get(i) - b->__get(i));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_obj,subMutate,(void))

void Vec_obj::mulMutate(Float a,::Array< Float > b){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_178_mulMutate)
HXDLIN( 178)		int _g = 0;
HXDLIN( 178)		int _g1 = b->length;
HXDLIN( 178)		while((_g < _g1)){
HXDLIN( 178)			_g = (_g + 1);
HXDLIN( 178)			int i = (_g - 1);
HXLINE( 179)			b[i] = (b->__get(i) * a);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_obj,mulMutate,(void))

Float Vec_obj::norm(::Array< Float > a){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_182_norm)
HXLINE( 183)		Float norm2 = ::verb::core::Vec_obj::normSquared(a);
HXLINE( 184)		if ((norm2 != ((Float)0.0))) {
HXLINE( 184)			return ::Math_obj::sqrt(norm2);
            		}
            		else {
HXLINE( 184)			return norm2;
            		}
HXDLIN( 184)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vec_obj,norm,return )

Float Vec_obj::normSquared(::Array< Float > a){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Float _hx_run(Float x,Float a){
            			HX_STACKFRAME(&_hx_pos_5be3e7be31265109_188_normSquared)
HXDLIN( 188)			return (a + (x * x));
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_188_normSquared)
HXDLIN( 188)		return ( (Float)(::Lambda_obj::fold(a, ::Dynamic(new _hx_Closure_0()),0)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vec_obj,normSquared,return )

::cpp::VirtualArray Vec_obj::rep(int num, ::Dynamic ele){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_192_rep)
HXDLIN( 192)		::cpp::VirtualArray _g = ::cpp::VirtualArray_obj::__new(0);
HXDLIN( 192)		{
HXDLIN( 192)			int _g1 = 0;
HXDLIN( 192)			int _g2 = num;
HXDLIN( 192)			while((_g1 < _g2)){
HXDLIN( 192)				_g1 = (_g1 + 1);
HXDLIN( 192)				int i = (_g1 - 1);
HXDLIN( 192)				_g->push(ele);
            			}
            		}
HXDLIN( 192)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_obj,rep,return )

::Array< Float > Vec_obj::fill(int num,Float ele){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_196_fill)
HXDLIN( 196)		::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN( 196)		{
HXDLIN( 196)			int _g1 = 0;
HXDLIN( 196)			int _g2 = num;
HXDLIN( 196)			while((_g1 < _g2)){
HXDLIN( 196)				_g1 = (_g1 + 1);
HXDLIN( 196)				int i = (_g1 - 1);
HXDLIN( 196)				_g->push(ele);
            			}
            		}
HXDLIN( 196)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_obj,fill,return )

::Array< Float > Vec_obj::zeros1d(int rows){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_200_zeros1d)
HXDLIN( 200)		::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN( 200)		{
HXDLIN( 200)			int _g1 = 0;
HXDLIN( 200)			int _g2 = rows;
HXDLIN( 200)			while((_g1 < _g2)){
HXDLIN( 200)				_g1 = (_g1 + 1);
HXDLIN( 200)				int i = (_g1 - 1);
HXDLIN( 200)				_g->push(((Float)0.0));
            			}
            		}
HXDLIN( 200)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vec_obj,zeros1d,return )

::Array< ::Dynamic> Vec_obj::zeros2d(int rows,int cols){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_204_zeros2d)
HXDLIN( 204)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 204)		{
HXDLIN( 204)			int _g1 = 0;
HXDLIN( 204)			int _g2 = rows;
HXDLIN( 204)			while((_g1 < _g2)){
HXDLIN( 204)				_g1 = (_g1 + 1);
HXDLIN( 204)				int i = (_g1 - 1);
HXDLIN( 204)				_g->push(::verb::core::Vec_obj::zeros1d(cols));
            			}
            		}
HXDLIN( 204)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_obj,zeros2d,return )

::Array< ::Dynamic> Vec_obj::zeros3d(int rows,int cols,int depth){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_208_zeros3d)
HXDLIN( 208)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 208)		{
HXDLIN( 208)			int _g1 = 0;
HXDLIN( 208)			int _g2 = rows;
HXDLIN( 208)			while((_g1 < _g2)){
HXDLIN( 208)				_g1 = (_g1 + 1);
HXDLIN( 208)				int i = (_g1 - 1);
HXDLIN( 208)				_g->push(::verb::core::Vec_obj::zeros2d(cols,depth));
            			}
            		}
HXDLIN( 208)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Vec_obj,zeros3d,return )

Float Vec_obj::dot(::Array< Float > a,::Array< Float > b){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_211_dot)
HXLINE( 212)		Float sum = ( (Float)(0) );
HXLINE( 213)		{
HXLINE( 213)			int _g = 0;
HXDLIN( 213)			int _g1 = a->length;
HXDLIN( 213)			while((_g < _g1)){
HXLINE( 213)				_g = (_g + 1);
HXDLIN( 213)				int i = (_g - 1);
HXLINE( 214)				sum = (sum + (a->__get(i) * b->__get(i)));
            			}
            		}
HXLINE( 216)		return sum;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_obj,dot,return )

::Array< Float > Vec_obj::add(::Array< Float > a,::Array< Float > b){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_220_add)
HXDLIN( 220)		::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN( 220)		{
HXDLIN( 220)			int _g1 = 0;
HXDLIN( 220)			int _g2 = a->length;
HXDLIN( 220)			while((_g1 < _g2)){
HXDLIN( 220)				_g1 = (_g1 + 1);
HXDLIN( 220)				int i = (_g1 - 1);
HXDLIN( 220)				_g->push((a->__get(i) + b->__get(i)));
            			}
            		}
HXDLIN( 220)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_obj,add,return )

::Array< Float > Vec_obj::mul(Float a,::Array< Float > b){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_224_mul)
HXDLIN( 224)		::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN( 224)		{
HXDLIN( 224)			int _g1 = 0;
HXDLIN( 224)			int _g2 = b->length;
HXDLIN( 224)			while((_g1 < _g2)){
HXDLIN( 224)				_g1 = (_g1 + 1);
HXDLIN( 224)				int i = (_g1 - 1);
HXDLIN( 224)				_g->push((a * b->__get(i)));
            			}
            		}
HXDLIN( 224)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_obj,mul,return )

::Array< Float > Vec_obj::div(::Array< Float > a,Float b){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_228_div)
HXDLIN( 228)		::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN( 228)		{
HXDLIN( 228)			int _g1 = 0;
HXDLIN( 228)			int _g2 = a->length;
HXDLIN( 228)			while((_g1 < _g2)){
HXDLIN( 228)				_g1 = (_g1 + 1);
HXDLIN( 228)				int i = (_g1 - 1);
HXDLIN( 228)				_g->push((a->__get(i) / b));
            			}
            		}
HXDLIN( 228)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_obj,div,return )

::Array< Float > Vec_obj::sub(::Array< Float > a,::Array< Float > b){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_232_sub)
HXDLIN( 232)		::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN( 232)		{
HXDLIN( 232)			int _g1 = 0;
HXDLIN( 232)			int _g2 = a->length;
HXDLIN( 232)			while((_g1 < _g2)){
HXDLIN( 232)				_g1 = (_g1 + 1);
HXDLIN( 232)				int i = (_g1 - 1);
HXDLIN( 232)				_g->push((a->__get(i) - b->__get(i)));
            			}
            		}
HXDLIN( 232)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_obj,sub,return )

bool Vec_obj::isZero(::Array< Float > vec){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_235_isZero)
HXLINE( 237)		{
HXLINE( 237)			int _g = 0;
HXDLIN( 237)			int _g1 = vec->length;
HXDLIN( 237)			while((_g < _g1)){
HXLINE( 237)				_g = (_g + 1);
HXDLIN( 237)				int i = (_g - 1);
HXLINE( 238)				if ((::Math_obj::abs(vec->__get(i)) > ::verb::core::Constants_obj::TOLERANCE)) {
HXLINE( 238)					return false;
            				}
            			}
            		}
HXLINE( 241)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Vec_obj,isZero,return )

::Array< Float > Vec_obj::sortedSetUnion(::Array< Float > a,::Array< Float > b){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_244_sortedSetUnion)
HXLINE( 246)		::Array< Float > merged = ::Array_obj< Float >::__new(0);
HXLINE( 248)		int ai = 0;
HXLINE( 249)		int bi = 0;
HXLINE( 250)		while(true){
HXLINE( 250)			bool _hx_tmp;
HXDLIN( 250)			if ((ai >= a->length)) {
HXLINE( 250)				_hx_tmp = (bi < b->length);
            			}
            			else {
HXLINE( 250)				_hx_tmp = true;
            			}
HXDLIN( 250)			if (!(_hx_tmp)) {
HXLINE( 250)				goto _hx_goto_66;
            			}
HXLINE( 252)			if ((ai >= a->length)) {
HXLINE( 253)				merged->push(b->__get(bi));
HXLINE( 254)				bi = (bi + 1);
HXLINE( 255)				continue;
            			}
            			else {
HXLINE( 256)				if ((bi >= b->length)) {
HXLINE( 257)					merged->push(a->__get(ai));
HXLINE( 258)					ai = (ai + 1);
HXLINE( 259)					continue;
            				}
            			}
HXLINE( 262)			Float diff = (a->__get(ai) - b->__get(bi));
HXLINE( 264)			if ((::Math_obj::abs(diff) < ::verb::core::Constants_obj::EPSILON)) {
HXLINE( 265)				merged->push(a->__get(ai));
HXLINE( 266)				ai = (ai + 1);
HXLINE( 267)				bi = (bi + 1);
HXLINE( 268)				continue;
            			}
HXLINE( 271)			if ((diff > ((Float)0.0))) {
HXLINE( 273)				merged->push(b->__get(bi));
HXLINE( 274)				bi = (bi + 1);
HXLINE( 275)				continue;
            			}
HXLINE( 279)			merged->push(a->__get(ai));
HXLINE( 280)			ai = (ai + 1);
            		}
            		_hx_goto_66:;
HXLINE( 284)		return merged;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_obj,sortedSetUnion,return )

::Array< Float > Vec_obj::sortedSetSub(::Array< Float > a,::Array< Float > b){
            	HX_STACKFRAME(&_hx_pos_5be3e7be31265109_288_sortedSetSub)
HXLINE( 290)		::Array< Float > result = ::Array_obj< Float >::__new(0);
HXLINE( 292)		int ai = 0;
HXLINE( 293)		int bi = 0;
HXLINE( 294)		while((ai < a->length)){
HXLINE( 296)			if ((bi >= b->length)) {
HXLINE( 297)				result->push(a->__get(ai));
HXLINE( 298)				ai = (ai + 1);
HXLINE( 299)				continue;
            			}
HXLINE( 302)			if ((::Math_obj::abs((a->__get(ai) - b->__get(bi))) < ::verb::core::Constants_obj::EPSILON)) {
HXLINE( 303)				ai = (ai + 1);
HXLINE( 304)				bi = (bi + 1);
HXLINE( 305)				continue;
            			}
HXLINE( 308)			result->push(a->__get(ai));
HXLINE( 309)			ai = (ai + 1);
            		}
HXLINE( 312)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec_obj,sortedSetSub,return )


Vec_obj::Vec_obj()
{
}

bool Vec_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"neg") ) { outValue = neg_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"min") ) { outValue = min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"max") ) { outValue = max_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"all") ) { outValue = all_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sum") ) { outValue = sum_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rep") ) { outValue = rep_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dot") ) { outValue = dot_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mul") ) { outValue = mul_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"div") ) { outValue = div_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sub") ) { outValue = sub_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"span") ) { outValue = span_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lerp") ) { outValue = lerp_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dist") ) { outValue = dist_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"norm") ) { outValue = norm_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fill") ) { outValue = fill_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"range") ) { outValue = range_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"onRay") ) { outValue = onRay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cross") ) { outValue = cross_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"domain") ) { outValue = domain_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"finite") ) { outValue = finite_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addAll") ) { outValue = addAll_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isZero") ) { outValue = isZero_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"zeros1d") ) { outValue = zeros1d_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"zeros2d") ) { outValue = zeros2d_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"zeros3d") ) { outValue = zeros3d_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addMutate") ) { outValue = addMutate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subMutate") ) { outValue = subMutate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mulMutate") ) { outValue = mulMutate_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"normalized") ) { outValue = normalized_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"distSquared") ) { outValue = distSquared_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"normSquared") ) { outValue = normSquared_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"angleBetween") ) { outValue = angleBetween_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addAllMutate") ) { outValue = addAllMutate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addMulMutate") ) { outValue = addMulMutate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subMulMutate") ) { outValue = subMulMutate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sortedSetSub") ) { outValue = sortedSetSub_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sortedSetUnion") ) { outValue = sortedSetUnion_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"signedAngleBetween") ) { outValue = signedAngleBetween_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"positiveAngleBetween") ) { outValue = positiveAngleBetween_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"angleBetweenNormalized2d") ) { outValue = angleBetweenNormalized2d_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Vec_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Vec_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Vec_obj::__mClass;

static ::String Vec_obj_sStaticFields[] = {
	HX_("angleBetween",35,e6,d4,69),
	HX_("positiveAngleBetween",8e,8a,5d,c5),
	HX_("signedAngleBetween",31,be,de,60),
	HX_("angleBetweenNormalized2d",be,79,bc,48),
	HX_("domain",44,b1,80,2d),
	HX_("range",bd,a5,1f,e4),
	HX_("span",ca,da,58,4c),
	HX_("neg",50,d0,53,00),
	HX_("min",92,11,53,00),
	HX_("max",a4,0a,53,00),
	HX_("all",21,f9,49,00),
	HX_("finite",2f,41,7f,86),
	HX_("onRay",0b,6a,6e,32),
	HX_("lerp",77,12,b0,47),
	HX_("normalized",37,64,6f,81),
	HX_("cross",80,5f,5a,4c),
	HX_("dist",66,67,69,42),
	HX_("distSquared",61,a2,da,2a),
	HX_("sum",8b,a9,57,00),
	HX_("addAll",80,09,fb,9e),
	HX_("addAllMutate",26,91,76,0d),
	HX_("addMulMutate",49,80,8d,f3),
	HX_("subMulMutate",0a,65,33,a1),
	HX_("addMutate",87,28,e3,f7),
	HX_("subMutate",26,31,0b,46),
	HX_("mulMutate",aa,5e,39,f4),
	HX_("norm",3c,16,0a,49),
	HX_("normSquared",4b,1a,f7,51),
	HX_("rep",5d,d9,56,00),
	HX_("fill",83,ce,bb,43),
	HX_("zeros1d",1e,48,aa,20),
	HX_("zeros2d",fd,48,aa,20),
	HX_("zeros3d",dc,49,aa,20),
	HX_("dot",89,42,4c,00),
	HX_("add",21,f2,49,00),
	HX_("mul",04,1c,53,00),
	HX_("div",51,3d,4c,00),
	HX_("sub",80,a9,57,00),
	HX_("isZero",32,d4,57,6e),
	HX_("sortedSetUnion",6a,22,d6,30),
	HX_("sortedSetSub",1b,ca,48,13),
	::String(null())
};

void Vec_obj::__register()
{
	Vec_obj _hx_dummy;
	Vec_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.Vec",54,61,50,ff);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vec_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Vec_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Vec_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vec_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vec_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
