// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_verb_core_Binomial
#include <verb/core/Binomial.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_3bffb81353661561_9_get,"verb.core.Binomial","get",0x0052e2b7,"verb.core.Binomial.get","verb/core/Binomial.hx",9,0xe28c97af)
HX_LOCAL_STACK_FRAME(_hx_pos_3bffb81353661561_47_get_no_memo,"verb.core.Binomial","get_no_memo",0x008fbff0,"verb.core.Binomial.get_no_memo","verb/core/Binomial.hx",47,0xe28c97af)
HX_LOCAL_STACK_FRAME(_hx_pos_3bffb81353661561_72_memo_exists,"verb.core.Binomial","memo_exists",0xc76a4122,"verb.core.Binomial.memo_exists","verb/core/Binomial.hx",72,0xe28c97af)
HX_LOCAL_STACK_FRAME(_hx_pos_3bffb81353661561_76_get_memo,"verb.core.Binomial","get_memo",0x64b34682,"verb.core.Binomial.get_memo","verb/core/Binomial.hx",76,0xe28c97af)
HX_LOCAL_STACK_FRAME(_hx_pos_3bffb81353661561_79_memoize,"verb.core.Binomial","memoize",0xba21897b,"verb.core.Binomial.memoize","verb/core/Binomial.hx",79,0xe28c97af)
HX_LOCAL_STACK_FRAME(_hx_pos_3bffb81353661561_7_boot,"verb.core.Binomial","boot",0x44ecfef1,"verb.core.Binomial.boot","verb/core/Binomial.hx",7,0xe28c97af)
namespace verb{
namespace core{

void Binomial_obj::__construct() { }

Dynamic Binomial_obj::__CreateEmpty() { return new Binomial_obj; }

void *Binomial_obj::_hx_vtable = 0;

Dynamic Binomial_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Binomial_obj > _hx_result = new Binomial_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Binomial_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1b566e2d;
}

 ::haxe::ds::IntMap Binomial_obj::memo;

Float Binomial_obj::get(int n,int k){
            	HX_STACKFRAME(&_hx_pos_3bffb81353661561_9_get)
HXLINE(  10)		if ((k == ((Float)0.0))) {
HXLINE(  11)			return ((Float)1.0);
            		}
HXLINE(  14)		bool _hx_tmp;
HXDLIN(  14)		if ((n != 0)) {
HXLINE(  14)			_hx_tmp = (k > n);
            		}
            		else {
HXLINE(  14)			_hx_tmp = true;
            		}
HXDLIN(  14)		if (_hx_tmp) {
HXLINE(  15)			return ((Float)0.0);
            		}
HXLINE(  18)		if ((k > (n - k))) {
HXLINE(  19)			k = (n - k);
            		}
HXLINE(  22)		if (::verb::core::Binomial_obj::memo_exists(n,k)) {
HXLINE(  23)			return ::verb::core::Binomial_obj::get_memo(n,k);
            		}
HXLINE(  26)		Float r = ( (Float)(1) );
HXDLIN(  26)		int n_o = n;
HXLINE(  29)		{
HXLINE(  29)			int _g = 1;
HXDLIN(  29)			int _g1 = (k + 1);
HXDLIN(  29)			while((_g < _g1)){
HXLINE(  29)				_g = (_g + 1);
HXDLIN(  29)				int d = (_g - 1);
HXLINE(  31)				if (::verb::core::Binomial_obj::memo_exists(n_o,d)) {
HXLINE(  32)					n = (n - 1);
HXLINE(  33)					r = ::verb::core::Binomial_obj::get_memo(n_o,d);
HXLINE(  34)					continue;
            				}
HXLINE(  37)				n = (n - 1);
HXDLIN(  37)				r = (r * ( (Float)((n + 1)) ));
HXLINE(  38)				r = (r / ( (Float)(d) ));
HXLINE(  40)				::verb::core::Binomial_obj::memoize(n_o,d,r);
            			}
            		}
HXLINE(  44)		return r;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Binomial_obj,get,return )

Float Binomial_obj::get_no_memo(int n,int k){
            	HX_STACKFRAME(&_hx_pos_3bffb81353661561_47_get_no_memo)
HXLINE(  48)		if ((k == 0)) {
HXLINE(  49)			return ( (Float)(1) );
            		}
HXLINE(  52)		bool _hx_tmp;
HXDLIN(  52)		if ((n != 0)) {
HXLINE(  52)			_hx_tmp = (k > n);
            		}
            		else {
HXLINE(  52)			_hx_tmp = true;
            		}
HXDLIN(  52)		if (_hx_tmp) {
HXLINE(  53)			return ( (Float)(0) );
            		}
HXLINE(  56)		if ((k > (n - k))) {
HXLINE(  57)			k = (n - k);
            		}
HXLINE(  60)		Float r = ( (Float)(1) );
HXDLIN(  60)		int n_o = n;
HXLINE(  63)		{
HXLINE(  63)			int _g = 1;
HXDLIN(  63)			int _g1 = (k + 1);
HXDLIN(  63)			while((_g < _g1)){
HXLINE(  63)				_g = (_g + 1);
HXDLIN(  63)				int d = (_g - 1);
HXLINE(  64)				n = (n - 1);
HXDLIN(  64)				r = (r * ( (Float)((n + 1)) ));
HXLINE(  65)				r = (r / ( (Float)(d) ));
            			}
            		}
HXLINE(  68)		return r;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Binomial_obj,get_no_memo,return )

bool Binomial_obj::memo_exists(int n,int k){
            	HX_STACKFRAME(&_hx_pos_3bffb81353661561_72_memo_exists)
HXDLIN(  72)		if (::verb::core::Binomial_obj::memo->exists(n)) {
HXDLIN(  72)			return ( ( ::haxe::ds::IntMap)(::verb::core::Binomial_obj::memo->get(n)) )->exists(k);
            		}
            		else {
HXDLIN(  72)			return false;
            		}
HXDLIN(  72)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Binomial_obj,memo_exists,return )

Float Binomial_obj::get_memo(int n,int k){
            	HX_STACKFRAME(&_hx_pos_3bffb81353661561_76_get_memo)
HXDLIN(  76)		return ( ( ::haxe::ds::IntMap)(::verb::core::Binomial_obj::memo->get(n)) )->get_float(k);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Binomial_obj,get_memo,return )

void Binomial_obj::memoize(int n,int k,Float val){
            	HX_GC_STACKFRAME(&_hx_pos_3bffb81353661561_79_memoize)
HXLINE(  80)		if (!(::verb::core::Binomial_obj::memo->exists(n))) {
HXLINE(  81)			 ::haxe::ds::IntMap _hx_tmp = ::verb::core::Binomial_obj::memo;
HXDLIN(  81)			_hx_tmp->set(n, ::haxe::ds::IntMap_obj::__alloc( HX_CTX ));
            		}
HXLINE(  84)		( ( ::haxe::ds::IntMap)(::verb::core::Binomial_obj::memo->get(n)) )->set(k,val);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Binomial_obj,memoize,(void))


Binomial_obj::Binomial_obj()
{
}

bool Binomial_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"memo") ) { outValue = ( memo ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"memoize") ) { outValue = memoize_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_memo") ) { outValue = get_memo_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_no_memo") ) { outValue = get_no_memo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"memo_exists") ) { outValue = memo_exists_dyn(); return true; }
	}
	return false;
}

bool Binomial_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"memo") ) { memo=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Binomial_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Binomial_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &Binomial_obj::memo,HX_("memo",ba,44,59,48)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Binomial_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Binomial_obj::memo,"memo");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Binomial_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Binomial_obj::memo,"memo");
};

#endif

::hx::Class Binomial_obj::__mClass;

static ::String Binomial_obj_sStaticFields[] = {
	HX_("memo",ba,44,59,48),
	HX_("get",96,80,4e,00),
	HX_("get_no_memo",cf,d4,3a,c1),
	HX_("memo_exists",01,56,15,88),
	HX_("get_memo",43,00,14,c8),
	HX_("memoize",da,02,0b,23),
	::String(null())
};

void Binomial_obj::__register()
{
	Binomial_obj _hx_dummy;
	Binomial_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.Binomial",0f,de,d2,78);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Binomial_obj::__GetStatic;
	__mClass->mSetStaticField = &Binomial_obj::__SetStatic;
	__mClass->mMarkFunc = Binomial_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Binomial_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Binomial_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Binomial_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Binomial_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Binomial_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Binomial_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_3bffb81353661561_7_boot)
HXDLIN(   7)		memo =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace verb
} // end namespace core
