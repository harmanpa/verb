// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_verb_core_BoundingBox
#include <verb/core/BoundingBox.h>
#endif
#ifndef INCLUDED_verb_core_Interval
#include <verb/core/Interval.h>
#endif
#ifndef INCLUDED_verb_core_LazyPolylineBoundingBoxTree
#include <verb/core/LazyPolylineBoundingBoxTree.h>
#endif
#ifndef INCLUDED_verb_core_Pair
#include <verb/core/Pair.h>
#endif
#ifndef INCLUDED_verb_core_PolylineData
#include <verb/core/PolylineData.h>
#endif
#ifndef INCLUDED_verb_core_SerializableBase
#include <verb/core/SerializableBase.h>
#endif
#ifndef INCLUDED_verb_eval_IBoundingBoxTree
#include <verb/eval/IBoundingBoxTree.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_51d4074f2be2598e_6_new,"verb.core.LazyPolylineBoundingBoxTree","new",0x18c1b003,"verb.core.LazyPolylineBoundingBoxTree.new","verb/core/LazyPolylineBoundingBoxTree.hx",6,0xcaea852d)
HX_LOCAL_STACK_FRAME(_hx_pos_51d4074f2be2598e_21_split,"verb.core.LazyPolylineBoundingBoxTree","split",0xf8ce393d,"verb.core.LazyPolylineBoundingBoxTree.split","verb/core/LazyPolylineBoundingBoxTree.hx",21,0xcaea852d)
HX_LOCAL_STACK_FRAME(_hx_pos_51d4074f2be2598e_36_boundingBox,"verb.core.LazyPolylineBoundingBoxTree","boundingBox",0xed424faa,"verb.core.LazyPolylineBoundingBoxTree.boundingBox","verb/core/LazyPolylineBoundingBoxTree.hx",36,0xcaea852d)
HX_LOCAL_STACK_FRAME(_hx_pos_51d4074f2be2598e_45_yield,"verb.core.LazyPolylineBoundingBoxTree","yield",0x688fe8b0,"verb.core.LazyPolylineBoundingBoxTree.yield","verb/core/LazyPolylineBoundingBoxTree.hx",45,0xcaea852d)
HX_LOCAL_STACK_FRAME(_hx_pos_51d4074f2be2598e_49_indivisible,"verb.core.LazyPolylineBoundingBoxTree","indivisible",0x61f685ab,"verb.core.LazyPolylineBoundingBoxTree.indivisible","verb/core/LazyPolylineBoundingBoxTree.hx",49,0xcaea852d)
HX_LOCAL_STACK_FRAME(_hx_pos_51d4074f2be2598e_53_empty,"verb.core.LazyPolylineBoundingBoxTree","empty",0xe73988f0,"verb.core.LazyPolylineBoundingBoxTree.empty","verb/core/LazyPolylineBoundingBoxTree.hx",53,0xcaea852d)
namespace verb{
namespace core{

void LazyPolylineBoundingBoxTree_obj::__construct( ::verb::core::PolylineData polyline, ::verb::core::Interval interval){
            	HX_GC_STACKFRAME(&_hx_pos_51d4074f2be2598e_6_new)
HXLINE(  10)		this->_boundingBox = null();
HXLINE(  13)		this->_polyline = polyline;
HXLINE(  15)		if (::hx::IsNull( interval )) {
HXLINE(  16)			int interval1;
HXDLIN(  16)			if ((polyline->points->length != 0)) {
HXLINE(  16)				interval1 = (polyline->points->length - 1);
            			}
            			else {
HXLINE(  16)				interval1 = 0;
            			}
HXDLIN(  16)			interval =  ::verb::core::Interval_obj::__alloc( HX_CTX ,0,interval1);
            		}
HXLINE(  18)		this->_interval = interval;
            	}

Dynamic LazyPolylineBoundingBoxTree_obj::__CreateEmpty() { return new LazyPolylineBoundingBoxTree_obj; }

void *LazyPolylineBoundingBoxTree_obj::_hx_vtable = 0;

Dynamic LazyPolylineBoundingBoxTree_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LazyPolylineBoundingBoxTree_obj > _hx_result = new LazyPolylineBoundingBoxTree_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool LazyPolylineBoundingBoxTree_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6f4cad33;
}

static ::verb::eval::IBoundingBoxTree_obj _hx_verb_core_LazyPolylineBoundingBoxTree__hx_verb_eval_IBoundingBoxTree= {
	(  ::verb::core::BoundingBox (::hx::Object::*)())&::verb::core::LazyPolylineBoundingBoxTree_obj::boundingBox,
	(  ::verb::core::Pair (::hx::Object::*)())&::verb::core::LazyPolylineBoundingBoxTree_obj::split,
	(  ::Dynamic (::hx::Object::*)())&::verb::core::LazyPolylineBoundingBoxTree_obj::yield_2aa2127b,
	( bool (::hx::Object::*)(Float))&::verb::core::LazyPolylineBoundingBoxTree_obj::indivisible,
	( bool (::hx::Object::*)())&::verb::core::LazyPolylineBoundingBoxTree_obj::empty,
};

 ::Dynamic LazyPolylineBoundingBoxTree_obj::yield_2aa2127b() {
			return yield();
}
void *LazyPolylineBoundingBoxTree_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x9907fd77: return &_hx_verb_core_LazyPolylineBoundingBoxTree__hx_verb_eval_IBoundingBoxTree;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::verb::core::Pair LazyPolylineBoundingBoxTree_obj::split(){
            	HX_GC_STACKFRAME(&_hx_pos_51d4074f2be2598e_21_split)
HXLINE(  22)		int min = ( (int)(this->_interval->min) );
HXLINE(  23)		int max = ( (int)(this->_interval->max) );
HXLINE(  25)		int pivot = (min + ::Math_obj::ceil((( (Float)((max - min)) ) / ( (Float)(2) ))));
HXLINE(  27)		 ::verb::core::Interval l =  ::verb::core::Interval_obj::__alloc( HX_CTX ,min,pivot);
HXDLIN(  27)		 ::verb::core::Interval r =  ::verb::core::Interval_obj::__alloc( HX_CTX ,pivot,max);
HXLINE(  31)		 ::verb::core::LazyPolylineBoundingBoxTree _hx_tmp =  ::verb::core::LazyPolylineBoundingBoxTree_obj::__alloc( HX_CTX ,this->_polyline,l);
HXLINE(  30)		return  ::verb::core::Pair_obj::__alloc( HX_CTX ,_hx_tmp, ::verb::core::LazyPolylineBoundingBoxTree_obj::__alloc( HX_CTX ,this->_polyline,r));
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazyPolylineBoundingBoxTree_obj,split,return )

 ::verb::core::BoundingBox LazyPolylineBoundingBoxTree_obj::boundingBox(){
            	HX_GC_STACKFRAME(&_hx_pos_51d4074f2be2598e_36_boundingBox)
HXLINE(  37)		if (::hx::IsNull( this->_boundingBox )) {
HXLINE(  38)			this->_boundingBox =  ::verb::core::BoundingBox_obj::__alloc( HX_CTX ,this->_polyline->points);
            		}
HXLINE(  41)		return this->_boundingBox;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazyPolylineBoundingBoxTree_obj,boundingBox,return )

int LazyPolylineBoundingBoxTree_obj::yield(){
            	HX_STACKFRAME(&_hx_pos_51d4074f2be2598e_45_yield)
HXDLIN(  45)		return ( (int)(this->_interval->min) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazyPolylineBoundingBoxTree_obj,yield,return )

bool LazyPolylineBoundingBoxTree_obj::indivisible(Float tolerance){
            	HX_STACKFRAME(&_hx_pos_51d4074f2be2598e_49_indivisible)
HXDLIN(  49)		return ((( (int)(this->_interval->max) ) - ( (int)(this->_interval->min) )) == 1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(LazyPolylineBoundingBoxTree_obj,indivisible,return )

bool LazyPolylineBoundingBoxTree_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_51d4074f2be2598e_53_empty)
HXDLIN(  53)		return ((( (int)(this->_interval->max) ) - ( (int)(this->_interval->min) )) == 0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazyPolylineBoundingBoxTree_obj,empty,return )


::hx::ObjectPtr< LazyPolylineBoundingBoxTree_obj > LazyPolylineBoundingBoxTree_obj::__new( ::verb::core::PolylineData polyline, ::verb::core::Interval interval) {
	::hx::ObjectPtr< LazyPolylineBoundingBoxTree_obj > __this = new LazyPolylineBoundingBoxTree_obj();
	__this->__construct(polyline,interval);
	return __this;
}

::hx::ObjectPtr< LazyPolylineBoundingBoxTree_obj > LazyPolylineBoundingBoxTree_obj::__alloc(::hx::Ctx *_hx_ctx, ::verb::core::PolylineData polyline, ::verb::core::Interval interval) {
	LazyPolylineBoundingBoxTree_obj *__this = (LazyPolylineBoundingBoxTree_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LazyPolylineBoundingBoxTree_obj), true, "verb.core.LazyPolylineBoundingBoxTree"));
	*(void **)__this = LazyPolylineBoundingBoxTree_obj::_hx_vtable;
	__this->__construct(polyline,interval);
	return __this;
}

LazyPolylineBoundingBoxTree_obj::LazyPolylineBoundingBoxTree_obj()
{
}

void LazyPolylineBoundingBoxTree_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LazyPolylineBoundingBoxTree);
	HX_MARK_MEMBER_NAME(_interval,"_interval");
	HX_MARK_MEMBER_NAME(_polyline,"_polyline");
	HX_MARK_MEMBER_NAME(_boundingBox,"_boundingBox");
	HX_MARK_END_CLASS();
}

void LazyPolylineBoundingBoxTree_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_interval,"_interval");
	HX_VISIT_MEMBER_NAME(_polyline,"_polyline");
	HX_VISIT_MEMBER_NAME(_boundingBox,"_boundingBox");
}

::hx::Val LazyPolylineBoundingBoxTree_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"split") ) { return ::hx::Val( split_dyn() ); }
		if (HX_FIELD_EQ(inName,"yield") ) { return ::hx::Val( yield_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return ::hx::Val( empty_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_interval") ) { return ::hx::Val( _interval ); }
		if (HX_FIELD_EQ(inName,"_polyline") ) { return ::hx::Val( _polyline ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"boundingBox") ) { return ::hx::Val( boundingBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"indivisible") ) { return ::hx::Val( indivisible_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_boundingBox") ) { return ::hx::Val( _boundingBox ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LazyPolylineBoundingBoxTree_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_interval") ) { _interval=inValue.Cast<  ::verb::core::Interval >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_polyline") ) { _polyline=inValue.Cast<  ::verb::core::PolylineData >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_boundingBox") ) { _boundingBox=inValue.Cast<  ::verb::core::BoundingBox >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LazyPolylineBoundingBoxTree_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_interval",a4,70,12,70));
	outFields->push(HX_("_polyline",9f,a3,30,77));
	outFields->push(HX_("_boundingBox",08,43,b1,eb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LazyPolylineBoundingBoxTree_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::verb::core::Interval */ ,(int)offsetof(LazyPolylineBoundingBoxTree_obj,_interval),HX_("_interval",a4,70,12,70)},
	{::hx::fsObject /*  ::verb::core::PolylineData */ ,(int)offsetof(LazyPolylineBoundingBoxTree_obj,_polyline),HX_("_polyline",9f,a3,30,77)},
	{::hx::fsObject /*  ::verb::core::BoundingBox */ ,(int)offsetof(LazyPolylineBoundingBoxTree_obj,_boundingBox),HX_("_boundingBox",08,43,b1,eb)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LazyPolylineBoundingBoxTree_obj_sStaticStorageInfo = 0;
#endif

static ::String LazyPolylineBoundingBoxTree_obj_sMemberFields[] = {
	HX_("_interval",a4,70,12,70),
	HX_("_polyline",9f,a3,30,77),
	HX_("_boundingBox",08,43,b1,eb),
	HX_("split",da,ea,6e,81),
	HX_("boundingBox",07,95,a7,85),
	HX_("yield",4d,9a,30,f1),
	HX_("indivisible",08,cb,5b,fa),
	HX_("empty",8d,3a,da,6f),
	::String(null()) };

::hx::Class LazyPolylineBoundingBoxTree_obj::__mClass;

void LazyPolylineBoundingBoxTree_obj::__register()
{
	LazyPolylineBoundingBoxTree_obj _hx_dummy;
	LazyPolylineBoundingBoxTree_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.LazyPolylineBoundingBoxTree",91,f2,8a,f7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LazyPolylineBoundingBoxTree_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LazyPolylineBoundingBoxTree_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LazyPolylineBoundingBoxTree_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LazyPolylineBoundingBoxTree_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
