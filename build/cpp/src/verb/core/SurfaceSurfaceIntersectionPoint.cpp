// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_SurfaceSurfaceIntersectionPoint
#include <verb/core/SurfaceSurfaceIntersectionPoint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_656529a149ee8526_94_new,"verb.core.SurfaceSurfaceIntersectionPoint","new",0x8d527119,"verb.core.SurfaceSurfaceIntersectionPoint.new","verb/core/Intersections.hx",94,0x2e2a0454)
namespace verb{
namespace core{

void SurfaceSurfaceIntersectionPoint_obj::__construct(::Array< Float > uv0,::Array< Float > uv1,::Array< Float > point,Float dist){
            	HX_STACKFRAME(&_hx_pos_656529a149ee8526_94_new)
HXLINE(  95)		this->uv0 = uv0;
HXLINE(  96)		this->uv1 = uv1;
HXLINE(  97)		this->point = point;
HXLINE(  98)		this->dist = dist;
            	}

Dynamic SurfaceSurfaceIntersectionPoint_obj::__CreateEmpty() { return new SurfaceSurfaceIntersectionPoint_obj; }

void *SurfaceSurfaceIntersectionPoint_obj::_hx_vtable = 0;

Dynamic SurfaceSurfaceIntersectionPoint_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SurfaceSurfaceIntersectionPoint_obj > _hx_result = new SurfaceSurfaceIntersectionPoint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool SurfaceSurfaceIntersectionPoint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6104a449;
}


SurfaceSurfaceIntersectionPoint_obj::SurfaceSurfaceIntersectionPoint_obj()
{
}

void SurfaceSurfaceIntersectionPoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SurfaceSurfaceIntersectionPoint);
	HX_MARK_MEMBER_NAME(uv0,"uv0");
	HX_MARK_MEMBER_NAME(uv1,"uv1");
	HX_MARK_MEMBER_NAME(point,"point");
	HX_MARK_MEMBER_NAME(dist,"dist");
	HX_MARK_END_CLASS();
}

void SurfaceSurfaceIntersectionPoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(uv0,"uv0");
	HX_VISIT_MEMBER_NAME(uv1,"uv1");
	HX_VISIT_MEMBER_NAME(point,"point");
	HX_VISIT_MEMBER_NAME(dist,"dist");
}

::hx::Val SurfaceSurfaceIntersectionPoint_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"uv0") ) { return ::hx::Val( uv0 ); }
		if (HX_FIELD_EQ(inName,"uv1") ) { return ::hx::Val( uv1 ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"dist") ) { return ::hx::Val( dist ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"point") ) { return ::hx::Val( point ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SurfaceSurfaceIntersectionPoint_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"uv0") ) { uv0=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uv1") ) { uv1=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"dist") ) { dist=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"point") ) { point=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SurfaceSurfaceIntersectionPoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("uv0",af,2e,59,00));
	outFields->push(HX_("uv1",b0,2e,59,00));
	outFields->push(HX_("point",50,b4,8f,c6));
	outFields->push(HX_("dist",66,67,69,42));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SurfaceSurfaceIntersectionPoint_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(SurfaceSurfaceIntersectionPoint_obj,uv0),HX_("uv0",af,2e,59,00)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(SurfaceSurfaceIntersectionPoint_obj,uv1),HX_("uv1",b0,2e,59,00)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(SurfaceSurfaceIntersectionPoint_obj,point),HX_("point",50,b4,8f,c6)},
	{::hx::fsFloat,(int)offsetof(SurfaceSurfaceIntersectionPoint_obj,dist),HX_("dist",66,67,69,42)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SurfaceSurfaceIntersectionPoint_obj_sStaticStorageInfo = 0;
#endif

static ::String SurfaceSurfaceIntersectionPoint_obj_sMemberFields[] = {
	HX_("uv0",af,2e,59,00),
	HX_("uv1",b0,2e,59,00),
	HX_("point",50,b4,8f,c6),
	HX_("dist",66,67,69,42),
	::String(null()) };

::hx::Class SurfaceSurfaceIntersectionPoint_obj::__mClass;

void SurfaceSurfaceIntersectionPoint_obj::__register()
{
	SurfaceSurfaceIntersectionPoint_obj _hx_dummy;
	SurfaceSurfaceIntersectionPoint_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.SurfaceSurfaceIntersectionPoint",a7,f0,f3,a5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SurfaceSurfaceIntersectionPoint_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SurfaceSurfaceIntersectionPoint_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SurfaceSurfaceIntersectionPoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SurfaceSurfaceIntersectionPoint_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
