// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_SerializableBase
#include <verb/core/SerializableBase.h>
#endif
#ifndef INCLUDED_verb_core_VolumeData
#include <verb/core/VolumeData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_211c9a1f2406fde7_165_new,"verb.core.VolumeData","new",0x12eb8516,"verb.core.VolumeData.new","verb/core/Data.hx",165,0x26519174)
namespace verb{
namespace core{

void VolumeData_obj::__construct(int degreeU,int degreeV,int degreeW,::Array< Float > knotsU,::Array< Float > knotsV,::Array< Float > knotsW,::Array< ::Dynamic> controlPoints){
            	HX_STACKFRAME(&_hx_pos_211c9a1f2406fde7_165_new)
HXLINE( 166)		this->degreeU = degreeU;
HXLINE( 167)		this->degreeV = degreeV;
HXLINE( 168)		this->degreeW = degreeW;
HXLINE( 169)		this->knotsU = knotsU;
HXLINE( 170)		this->knotsV = knotsV;
HXLINE( 171)		this->knotsW = knotsW;
HXLINE( 172)		this->controlPoints = controlPoints;
            	}

Dynamic VolumeData_obj::__CreateEmpty() { return new VolumeData_obj; }

void *VolumeData_obj::_hx_vtable = 0;

Dynamic VolumeData_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VolumeData_obj > _hx_result = new VolumeData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool VolumeData_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x06d9bbfa) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x06d9bbfa;
	} else {
		return inClassId==(int)0x150b6226;
	}
}


::hx::ObjectPtr< VolumeData_obj > VolumeData_obj::__new(int degreeU,int degreeV,int degreeW,::Array< Float > knotsU,::Array< Float > knotsV,::Array< Float > knotsW,::Array< ::Dynamic> controlPoints) {
	::hx::ObjectPtr< VolumeData_obj > __this = new VolumeData_obj();
	__this->__construct(degreeU,degreeV,degreeW,knotsU,knotsV,knotsW,controlPoints);
	return __this;
}

::hx::ObjectPtr< VolumeData_obj > VolumeData_obj::__alloc(::hx::Ctx *_hx_ctx,int degreeU,int degreeV,int degreeW,::Array< Float > knotsU,::Array< Float > knotsV,::Array< Float > knotsW,::Array< ::Dynamic> controlPoints) {
	VolumeData_obj *__this = (VolumeData_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VolumeData_obj), true, "verb.core.VolumeData"));
	*(void **)__this = VolumeData_obj::_hx_vtable;
	__this->__construct(degreeU,degreeV,degreeW,knotsU,knotsV,knotsW,controlPoints);
	return __this;
}

VolumeData_obj::VolumeData_obj()
{
}

void VolumeData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VolumeData);
	HX_MARK_MEMBER_NAME(degreeU,"degreeU");
	HX_MARK_MEMBER_NAME(degreeV,"degreeV");
	HX_MARK_MEMBER_NAME(degreeW,"degreeW");
	HX_MARK_MEMBER_NAME(knotsU,"knotsU");
	HX_MARK_MEMBER_NAME(knotsV,"knotsV");
	HX_MARK_MEMBER_NAME(knotsW,"knotsW");
	HX_MARK_MEMBER_NAME(controlPoints,"controlPoints");
	HX_MARK_END_CLASS();
}

void VolumeData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(degreeU,"degreeU");
	HX_VISIT_MEMBER_NAME(degreeV,"degreeV");
	HX_VISIT_MEMBER_NAME(degreeW,"degreeW");
	HX_VISIT_MEMBER_NAME(knotsU,"knotsU");
	HX_VISIT_MEMBER_NAME(knotsV,"knotsV");
	HX_VISIT_MEMBER_NAME(knotsW,"knotsW");
	HX_VISIT_MEMBER_NAME(controlPoints,"controlPoints");
}

::hx::Val VolumeData_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"knotsU") ) { return ::hx::Val( knotsU ); }
		if (HX_FIELD_EQ(inName,"knotsV") ) { return ::hx::Val( knotsV ); }
		if (HX_FIELD_EQ(inName,"knotsW") ) { return ::hx::Val( knotsW ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"degreeU") ) { return ::hx::Val( degreeU ); }
		if (HX_FIELD_EQ(inName,"degreeV") ) { return ::hx::Val( degreeV ); }
		if (HX_FIELD_EQ(inName,"degreeW") ) { return ::hx::Val( degreeW ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"controlPoints") ) { return ::hx::Val( controlPoints ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val VolumeData_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"knotsU") ) { knotsU=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"knotsV") ) { knotsV=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"knotsW") ) { knotsW=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"degreeU") ) { degreeU=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"degreeV") ) { degreeV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"degreeW") ) { degreeW=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"controlPoints") ) { controlPoints=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VolumeData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("degreeU",89,e3,5a,3a));
	outFields->push(HX_("degreeV",8a,e3,5a,3a));
	outFields->push(HX_("degreeW",8b,e3,5a,3a));
	outFields->push(HX_("knotsU",0a,84,fa,67));
	outFields->push(HX_("knotsV",0b,84,fa,67));
	outFields->push(HX_("knotsW",0c,84,fa,67));
	outFields->push(HX_("controlPoints",60,55,f2,6f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo VolumeData_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(VolumeData_obj,degreeU),HX_("degreeU",89,e3,5a,3a)},
	{::hx::fsInt,(int)offsetof(VolumeData_obj,degreeV),HX_("degreeV",8a,e3,5a,3a)},
	{::hx::fsInt,(int)offsetof(VolumeData_obj,degreeW),HX_("degreeW",8b,e3,5a,3a)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(VolumeData_obj,knotsU),HX_("knotsU",0a,84,fa,67)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(VolumeData_obj,knotsV),HX_("knotsV",0b,84,fa,67)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(VolumeData_obj,knotsW),HX_("knotsW",0c,84,fa,67)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(VolumeData_obj,controlPoints),HX_("controlPoints",60,55,f2,6f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *VolumeData_obj_sStaticStorageInfo = 0;
#endif

static ::String VolumeData_obj_sMemberFields[] = {
	HX_("degreeU",89,e3,5a,3a),
	HX_("degreeV",8a,e3,5a,3a),
	HX_("degreeW",8b,e3,5a,3a),
	HX_("knotsU",0a,84,fa,67),
	HX_("knotsV",0b,84,fa,67),
	HX_("knotsW",0c,84,fa,67),
	HX_("controlPoints",60,55,f2,6f),
	::String(null()) };

::hx::Class VolumeData_obj::__mClass;

void VolumeData_obj::__register()
{
	VolumeData_obj _hx_dummy;
	VolumeData_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.VolumeData",24,02,9a,97);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VolumeData_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VolumeData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VolumeData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VolumeData_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
