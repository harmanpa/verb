// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_verb_core_BinaryHeap_verb_core_KdNode_verb_core_MeshIntersectionPoint
#include <verb/core/BinaryHeap_verb_core_KdNode_verb_core_MeshIntersectionPoint.h>
#endif
#ifndef INCLUDED_verb_core_HeapElement_verb_core_KdNode_verb_core_MeshIntersectionPoint
#include <verb/core/HeapElement_verb_core_KdNode_verb_core_MeshIntersectionPoint.h>
#endif
#ifndef INCLUDED_verb_core_HeapElement_verb_core_KdPoint_verb_core_MeshIntersectionPoint
#include <verb/core/HeapElement_verb_core_KdPoint_verb_core_MeshIntersectionPoint.h>
#endif
#ifndef INCLUDED_verb_core_KdNode_verb_core_MeshIntersectionPoint
#include <verb/core/KdNode_verb_core_MeshIntersectionPoint.h>
#endif
#ifndef INCLUDED_verb_core_KdPoint_verb_core_MeshIntersectionPoint
#include <verb/core/KdPoint_verb_core_MeshIntersectionPoint.h>
#endif
#ifndef INCLUDED_verb_core_KdTree_verb_core_MeshIntersectionPoint
#include <verb/core/KdTree_verb_core_MeshIntersectionPoint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6dede0f5c4dccc0f_17_new,"verb.core.KdTree_verb_core_MeshIntersectionPoint","new",0x92681044,"verb.core.KdTree_verb_core_MeshIntersectionPoint.new","verb/core/KdTree.hx",17,0x3d59ce27)
HX_LOCAL_STACK_FRAME(_hx_pos_6dede0f5c4dccc0f_40_buildTree,"verb.core.KdTree_verb_core_MeshIntersectionPoint","buildTree",0x17ab1290,"verb.core.KdTree_verb_core_MeshIntersectionPoint.buildTree","verb/core/KdTree.hx",40,0x3d59ce27)
HX_LOCAL_STACK_FRAME(_hx_pos_6dede0f5c4dccc0f_32_buildTree,"verb.core.KdTree_verb_core_MeshIntersectionPoint","buildTree",0x17ab1290,"verb.core.KdTree_verb_core_MeshIntersectionPoint.buildTree","verb/core/KdTree.hx",32,0x3d59ce27)
HX_LOCAL_STACK_FRAME(_hx_pos_6dede0f5c4dccc0f_64_nearest,"verb.core.KdTree_verb_core_MeshIntersectionPoint","nearest",0x17c61a42,"verb.core.KdTree_verb_core_MeshIntersectionPoint.nearest","verb/core/KdTree.hx",64,0x3d59ce27)
HX_LOCAL_STACK_FRAME(_hx_pos_6dede0f5c4dccc0f_77_nearest,"verb.core.KdTree_verb_core_MeshIntersectionPoint","nearest",0x17c61a42,"verb.core.KdTree_verb_core_MeshIntersectionPoint.nearest","verb/core/KdTree.hx",77,0x3d59ce27)
HX_LOCAL_STACK_FRAME(_hx_pos_6dede0f5c4dccc0f_67_nearest,"verb.core.KdTree_verb_core_MeshIntersectionPoint","nearest",0x17c61a42,"verb.core.KdTree_verb_core_MeshIntersectionPoint.nearest","verb/core/KdTree.hx",67,0x3d59ce27)
HX_LOCAL_STACK_FRAME(_hx_pos_6dede0f5c4dccc0f_61_nearest,"verb.core.KdTree_verb_core_MeshIntersectionPoint","nearest",0x17c61a42,"verb.core.KdTree_verb_core_MeshIntersectionPoint.nearest","verb/core/KdTree.hx",61,0x3d59ce27)
namespace verb{
namespace core{

void KdTree_verb_core_MeshIntersectionPoint_obj::__construct(::Array< ::Dynamic> points, ::Dynamic distanceFunction){
            	HX_STACKFRAME(&_hx_pos_6dede0f5c4dccc0f_17_new)
HXLINE(  21)		this->dim = 3;
HXLINE(  25)		this->points = points;
HXLINE(  26)		this->distanceFunction = distanceFunction;
HXLINE(  27)		this->dim = points->__get(0).StaticCast<  ::verb::core::KdPoint_verb_core_MeshIntersectionPoint >()->point->length;
HXLINE(  29)		this->root = this->buildTree(points,0,null());
            	}

Dynamic KdTree_verb_core_MeshIntersectionPoint_obj::__CreateEmpty() { return new KdTree_verb_core_MeshIntersectionPoint_obj; }

void *KdTree_verb_core_MeshIntersectionPoint_obj::_hx_vtable = 0;

Dynamic KdTree_verb_core_MeshIntersectionPoint_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< KdTree_verb_core_MeshIntersectionPoint_obj > _hx_result = new KdTree_verb_core_MeshIntersectionPoint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool KdTree_verb_core_MeshIntersectionPoint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2b6a121c;
}

 ::verb::core::KdNode_verb_core_MeshIntersectionPoint KdTree_verb_core_MeshIntersectionPoint_obj::buildTree(::Array< ::Dynamic> points,int depth, ::verb::core::KdNode_verb_core_MeshIntersectionPoint parent){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,int,dim) HXARGC(2)
            		int _hx_run( ::verb::core::KdPoint_verb_core_MeshIntersectionPoint a, ::verb::core::KdPoint_verb_core_MeshIntersectionPoint b){
            			HX_GC_STACKFRAME(&_hx_pos_6dede0f5c4dccc0f_40_buildTree)
HXLINE(  41)			Float diff = (a->point->__get(dim) - b->point->__get(dim));
HXLINE(  42)			if ((diff == ((Float)0.0))) {
HXLINE(  43)				return 0;
            			}
            			else {
HXLINE(  44)				if ((diff > 0)) {
HXLINE(  45)					return 1;
            				}
            				else {
HXLINE(  47)					return -1;
            				}
            			}
HXLINE(  42)			return 0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_6dede0f5c4dccc0f_32_buildTree)
HXLINE(  33)		int dim = ::hx::Mod(depth,this->dim);
HXLINE(  37)		if ((points->length == 0)) {
HXLINE(  37)			return null();
            		}
HXLINE(  38)		if ((points->length == 1)) {
HXLINE(  38)			return  ::verb::core::KdNode_verb_core_MeshIntersectionPoint_obj::__alloc( HX_CTX ,points->__get(0).StaticCast<  ::verb::core::KdPoint_verb_core_MeshIntersectionPoint >(),dim,parent);
            		}
HXLINE(  40)		points->sort( ::Dynamic(new _hx_Closure_0(dim)));
HXLINE(  33)		int median = ::Math_obj::floor((( (Float)(points->length) ) / ( (Float)(2) )));
HXDLIN(  33)		 ::verb::core::KdNode_verb_core_MeshIntersectionPoint node =  ::verb::core::KdNode_verb_core_MeshIntersectionPoint_obj::__alloc( HX_CTX ,points->__get(median).StaticCast<  ::verb::core::KdPoint_verb_core_MeshIntersectionPoint >(),dim,parent);
HXLINE(  55)		node->left = this->buildTree(points->slice(0,median),(depth + 1),node);
HXLINE(  56)		node->right = this->buildTree(points->slice((median + 1),null()),(depth + 1),node);
HXLINE(  58)		return node;
            	}


HX_DEFINE_DYNAMIC_FUNC3(KdTree_verb_core_MeshIntersectionPoint_obj,buildTree,return )

::Array< ::Dynamic> KdTree_verb_core_MeshIntersectionPoint_obj::nearest(::Array< Float > point,int maxNodes,Float maxDistance){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		Float _hx_run( ::verb::core::HeapElement_verb_core_KdNode_verb_core_MeshIntersectionPoint e){
            			HX_STACKFRAME(&_hx_pos_6dede0f5c4dccc0f_64_nearest)
HXLINE(  64)			return -(e->value);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_2, ::verb::core::KdTree_verb_core_MeshIntersectionPoint,_gthis,::Array< ::Dynamic>,nearestSearch, ::verb::core::BinaryHeap_verb_core_KdNode_verb_core_MeshIntersectionPoint,bestNodes,::Array< Float >,point,int,maxNodes) HXARGC(1)
            		void _hx_run( ::verb::core::KdNode_verb_core_MeshIntersectionPoint node){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::verb::core::BinaryHeap_verb_core_KdNode_verb_core_MeshIntersectionPoint,bestNodes,int,maxNodes) HXARGC(2)
            			void _hx_run( ::verb::core::KdNode_verb_core_MeshIntersectionPoint node,Float distance){
            				HX_GC_STACKFRAME(&_hx_pos_6dede0f5c4dccc0f_77_nearest)
HXLINE(  78)				 ::verb::core::BinaryHeap_verb_core_KdNode_verb_core_MeshIntersectionPoint bestNodes1 = bestNodes;
HXDLIN(  78)				bestNodes1->push( ::verb::core::HeapElement_verb_core_KdNode_verb_core_MeshIntersectionPoint_obj::__alloc( HX_CTX ,node,distance));
HXLINE(  79)				int saveNode = bestNodes->size();
HXDLIN(  79)				if ((saveNode > maxNodes)) {
HXLINE(  80)					bestNodes->pop();
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

            			HX_GC_STACKFRAME(&_hx_pos_6dede0f5c4dccc0f_67_nearest)
HXLINE(  69)			 ::verb::core::KdNode_verb_core_MeshIntersectionPoint bestChild;
HXDLIN(  69)			int dimension = node->dimension;
HXDLIN(  69)			Float ownDistance = ( (Float)(_gthis->distanceFunction(point,node->kdPoint->point)) );
HXLINE(  72)			::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN(  72)			{
HXLINE(  72)				int _g1 = 0;
HXDLIN(  72)				int _g2 = _gthis->dim;
HXDLIN(  72)				while((_g1 < _g2)){
HXLINE(  72)					_g1 = (_g1 + 1);
HXDLIN(  72)					int i = (_g1 - 1);
HXDLIN(  72)					_g->push(((Float)0.0));
            				}
            			}
HXLINE(  69)			::Array< Float > linearPoint = _g;
HXDLIN(  69)			 ::verb::core::KdNode_verb_core_MeshIntersectionPoint otherChild;
HXDLIN(  69)			 ::Dynamic i;
HXLINE(  77)			 ::Dynamic saveNode =  ::Dynamic(new _hx_Closure_1(bestNodes,maxNodes));
HXLINE(  84)			{
HXLINE(  84)				int _g3 = 0;
HXDLIN(  84)				int _g4 = _gthis->dim;
HXDLIN(  84)				while((_g3 < _g4)){
HXLINE(  84)					_g3 = (_g3 + 1);
HXDLIN(  84)					int i = (_g3 - 1);
HXLINE(  85)					if ((i == node->dimension)) {
HXLINE(  86)						linearPoint[i] = point->__get(i);
            					}
            					else {
HXLINE(  88)						linearPoint[i] = node->kdPoint->point->__get(i);
            					}
            				}
            			}
HXLINE(  69)			Float linearDistance = ( (Float)(_gthis->distanceFunction(linearPoint,node->kdPoint->point)) );
HXLINE(  94)			bool _hx_tmp;
HXDLIN(  94)			if (::hx::IsNull( node->right )) {
HXLINE(  94)				_hx_tmp = ::hx::IsNull( node->left );
            			}
            			else {
HXLINE(  94)				_hx_tmp = false;
            			}
HXDLIN(  94)			if (_hx_tmp) {
HXLINE(  95)				bool _hx_tmp;
HXDLIN(  95)				int _hx_tmp1 = bestNodes->size();
HXDLIN(  95)				if ((_hx_tmp1 >= maxNodes)) {
HXLINE(  95)					_hx_tmp = (ownDistance < bestNodes->peek()->value);
            				}
            				else {
HXLINE(  95)					_hx_tmp = true;
            				}
HXDLIN(  95)				if (_hx_tmp) {
HXLINE(  96)					saveNode(node,ownDistance);
            				}
HXLINE(  98)				return;
            			}
HXLINE( 101)			if (::hx::IsNull( node->right )) {
HXLINE( 102)				bestChild = node->left;
            			}
            			else {
HXLINE( 103)				if (::hx::IsNull( node->left )) {
HXLINE( 104)					bestChild = node->right;
            				}
            				else {
HXLINE( 106)					if ((point->__get(dimension) < node->kdPoint->point->__get(dimension))) {
HXLINE( 107)						bestChild = node->left;
            					}
            					else {
HXLINE( 109)						bestChild = node->right;
            					}
            				}
            			}
HXLINE( 113)			nearestSearch->__get(0)(bestChild);
HXLINE( 115)			bool _hx_tmp1;
HXDLIN( 115)			int _hx_tmp2 = bestNodes->size();
HXDLIN( 115)			if ((_hx_tmp2 >= maxNodes)) {
HXLINE( 115)				_hx_tmp1 = (ownDistance < bestNodes->peek()->value);
            			}
            			else {
HXLINE( 115)				_hx_tmp1 = true;
            			}
HXDLIN( 115)			if (_hx_tmp1) {
HXLINE( 116)				saveNode(node,ownDistance);
            			}
HXLINE( 119)			bool _hx_tmp3;
HXDLIN( 119)			int _hx_tmp4 = bestNodes->size();
HXDLIN( 119)			if ((_hx_tmp4 >= maxNodes)) {
HXLINE( 119)				Float _hx_tmp = ::Math_obj::abs(linearDistance);
HXDLIN( 119)				_hx_tmp3 = (_hx_tmp < bestNodes->peek()->value);
            			}
            			else {
HXLINE( 119)				_hx_tmp3 = true;
            			}
HXDLIN( 119)			if (_hx_tmp3) {
HXLINE( 120)				if (::hx::IsEq( bestChild,node->left )) {
HXLINE( 121)					otherChild = node->right;
            				}
            				else {
HXLINE( 123)					otherChild = node->left;
            				}
HXLINE( 125)				if (::hx::IsNotNull( otherChild )) {
HXLINE( 126)					nearestSearch->__get(0)(otherChild);
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_6dede0f5c4dccc0f_61_nearest)
HXDLIN(  61)		 ::verb::core::KdTree_verb_core_MeshIntersectionPoint _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  63)		 ::verb::core::BinaryHeap_verb_core_KdNode_verb_core_MeshIntersectionPoint bestNodes =  ::verb::core::BinaryHeap_verb_core_KdNode_verb_core_MeshIntersectionPoint_obj::__alloc( HX_CTX , ::Dynamic(new _hx_Closure_0()));
HXLINE(  67)		::Array< ::Dynamic> nearestSearch = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN(  67)		nearestSearch[0] =  ::Dynamic(new _hx_Closure_2(_gthis,nearestSearch,bestNodes,point,maxNodes));
HXLINE( 131)		{
HXLINE( 131)			int _g = 0;
HXDLIN( 131)			int _g1 = maxNodes;
HXDLIN( 131)			while((_g < _g1)){
HXLINE( 131)				_g = (_g + 1);
HXDLIN( 131)				int i = (_g - 1);
HXLINE( 132)				 ::verb::core::BinaryHeap_verb_core_KdNode_verb_core_MeshIntersectionPoint bestNodes1 = bestNodes;
HXDLIN( 132)				bestNodes1->push( ::verb::core::HeapElement_verb_core_KdNode_verb_core_MeshIntersectionPoint_obj::__alloc( HX_CTX ,null(),maxDistance));
            			}
            		}
HXLINE( 135)		nearestSearch->__get(0)(this->root);
HXLINE( 137)		::Array< ::Dynamic> result = ::Array_obj< ::Dynamic>::__new();
HXLINE( 139)		{
HXLINE( 139)			int _g2 = 0;
HXDLIN( 139)			int _g3 = maxNodes;
HXDLIN( 139)			while((_g2 < _g3)){
HXLINE( 139)				_g2 = (_g2 + 1);
HXDLIN( 139)				int i = (_g2 - 1);
HXLINE( 140)				if (::hx::IsNotNull( bestNodes->content->__get(i).StaticCast<  ::verb::core::HeapElement_verb_core_KdNode_verb_core_MeshIntersectionPoint >()->obj )) {
HXLINE( 141)					result->push( ::verb::core::HeapElement_verb_core_KdPoint_verb_core_MeshIntersectionPoint_obj::__alloc( HX_CTX ,bestNodes->content->__get(i).StaticCast<  ::verb::core::HeapElement_verb_core_KdNode_verb_core_MeshIntersectionPoint >()->obj->kdPoint,bestNodes->content->__get(i).StaticCast<  ::verb::core::HeapElement_verb_core_KdNode_verb_core_MeshIntersectionPoint >()->value));
            				}
            			}
            		}
HXLINE( 145)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC3(KdTree_verb_core_MeshIntersectionPoint_obj,nearest,return )


::hx::ObjectPtr< KdTree_verb_core_MeshIntersectionPoint_obj > KdTree_verb_core_MeshIntersectionPoint_obj::__new(::Array< ::Dynamic> points, ::Dynamic distanceFunction) {
	::hx::ObjectPtr< KdTree_verb_core_MeshIntersectionPoint_obj > __this = new KdTree_verb_core_MeshIntersectionPoint_obj();
	__this->__construct(points,distanceFunction);
	return __this;
}

::hx::ObjectPtr< KdTree_verb_core_MeshIntersectionPoint_obj > KdTree_verb_core_MeshIntersectionPoint_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< ::Dynamic> points, ::Dynamic distanceFunction) {
	KdTree_verb_core_MeshIntersectionPoint_obj *__this = (KdTree_verb_core_MeshIntersectionPoint_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(KdTree_verb_core_MeshIntersectionPoint_obj), true, "verb.core.KdTree_verb_core_MeshIntersectionPoint"));
	*(void **)__this = KdTree_verb_core_MeshIntersectionPoint_obj::_hx_vtable;
	__this->__construct(points,distanceFunction);
	return __this;
}

KdTree_verb_core_MeshIntersectionPoint_obj::KdTree_verb_core_MeshIntersectionPoint_obj()
{
}

void KdTree_verb_core_MeshIntersectionPoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(KdTree_verb_core_MeshIntersectionPoint);
	HX_MARK_MEMBER_NAME(points,"points");
	HX_MARK_MEMBER_NAME(distanceFunction,"distanceFunction");
	HX_MARK_MEMBER_NAME(dim,"dim");
	HX_MARK_MEMBER_NAME(root,"root");
	HX_MARK_END_CLASS();
}

void KdTree_verb_core_MeshIntersectionPoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(points,"points");
	HX_VISIT_MEMBER_NAME(distanceFunction,"distanceFunction");
	HX_VISIT_MEMBER_NAME(dim,"dim");
	HX_VISIT_MEMBER_NAME(root,"root");
}

::hx::Val KdTree_verb_core_MeshIntersectionPoint_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"dim") ) { return ::hx::Val( dim ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { return ::hx::Val( root ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"points") ) { return ::hx::Val( points ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"nearest") ) { return ::hx::Val( nearest_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"buildTree") ) { return ::hx::Val( buildTree_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"distanceFunction") ) { return ::hx::Val( distanceFunction ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val KdTree_verb_core_MeshIntersectionPoint_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"dim") ) { dim=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { root=inValue.Cast<  ::verb::core::KdNode_verb_core_MeshIntersectionPoint >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"points") ) { points=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"distanceFunction") ) { distanceFunction=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void KdTree_verb_core_MeshIntersectionPoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("points",23,12,2e,f7));
	outFields->push(HX_("dim",48,3d,4c,00));
	outFields->push(HX_("root",22,ee,ae,4b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo KdTree_verb_core_MeshIntersectionPoint_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(KdTree_verb_core_MeshIntersectionPoint_obj,points),HX_("points",23,12,2e,f7)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(KdTree_verb_core_MeshIntersectionPoint_obj,distanceFunction),HX_("distanceFunction",6d,b7,43,c6)},
	{::hx::fsInt,(int)offsetof(KdTree_verb_core_MeshIntersectionPoint_obj,dim),HX_("dim",48,3d,4c,00)},
	{::hx::fsObject /*  ::verb::core::KdNode_verb_core_MeshIntersectionPoint */ ,(int)offsetof(KdTree_verb_core_MeshIntersectionPoint_obj,root),HX_("root",22,ee,ae,4b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *KdTree_verb_core_MeshIntersectionPoint_obj_sStaticStorageInfo = 0;
#endif

static ::String KdTree_verb_core_MeshIntersectionPoint_obj_sMemberFields[] = {
	HX_("points",23,12,2e,f7),
	HX_("distanceFunction",6d,b7,43,c6),
	HX_("dim",48,3d,4c,00),
	HX_("root",22,ee,ae,4b),
	HX_("buildTree",ac,cf,3f,ed),
	HX_("nearest",5e,18,ca,65),
	::String(null()) };

::hx::Class KdTree_verb_core_MeshIntersectionPoint_obj::__mClass;

void KdTree_verb_core_MeshIntersectionPoint_obj::__register()
{
	KdTree_verb_core_MeshIntersectionPoint_obj _hx_dummy;
	KdTree_verb_core_MeshIntersectionPoint_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.KdTree_verb_core_MeshIntersectionPoint",52,de,89,4f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(KdTree_verb_core_MeshIntersectionPoint_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< KdTree_verb_core_MeshIntersectionPoint_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KdTree_verb_core_MeshIntersectionPoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KdTree_verb_core_MeshIntersectionPoint_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
