// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_CurvePoint
#include <verb/core/CurvePoint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_515173e2ececd148_164_new,"verb.core.CurvePoint","new",0x7068a393,"verb.core.CurvePoint.new","verb/core/Intersections.hx",164,0x2e2a0454)
namespace verb{
namespace core{

void CurvePoint_obj::__construct(Float u,::Array< Float > pt){
            	HX_STACKFRAME(&_hx_pos_515173e2ececd148_164_new)
HXLINE( 165)		this->u = u;
HXLINE( 166)		this->pt = pt;
            	}

Dynamic CurvePoint_obj::__CreateEmpty() { return new CurvePoint_obj; }

void *CurvePoint_obj::_hx_vtable = 0;

Dynamic CurvePoint_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CurvePoint_obj > _hx_result = new CurvePoint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CurvePoint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x141e3e23;
}


CurvePoint_obj::CurvePoint_obj()
{
}

void CurvePoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CurvePoint);
	HX_MARK_MEMBER_NAME(u,"u");
	HX_MARK_MEMBER_NAME(pt,"pt");
	HX_MARK_END_CLASS();
}

void CurvePoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(u,"u");
	HX_VISIT_MEMBER_NAME(pt,"pt");
}

::hx::Val CurvePoint_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"u") ) { return ::hx::Val( u ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"pt") ) { return ::hx::Val( pt ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CurvePoint_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"u") ) { u=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"pt") ) { pt=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CurvePoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("u",75,00,00,00));
	outFields->push(HX_("pt",04,62,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CurvePoint_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(CurvePoint_obj,u),HX_("u",75,00,00,00)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(CurvePoint_obj,pt),HX_("pt",04,62,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CurvePoint_obj_sStaticStorageInfo = 0;
#endif

static ::String CurvePoint_obj_sMemberFields[] = {
	HX_("u",75,00,00,00),
	HX_("pt",04,62,00,00),
	::String(null()) };

::hx::Class CurvePoint_obj::__mClass;

void CurvePoint_obj::__register()
{
	CurvePoint_obj _hx_dummy;
	CurvePoint_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.CurvePoint",21,de,ac,96);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CurvePoint_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CurvePoint_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CurvePoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CurvePoint_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
