// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core__Mat_LUDecomp
#include <verb/core/_Mat/LUDecomp.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6acac2099b5ee449_227_new,"verb.core._Mat.LUDecomp","new",0xdb282218,"verb.core._Mat.LUDecomp.new","verb/core/Mat.hx",227,0x57cc617e)
namespace verb{
namespace core{
namespace _Mat{

void LUDecomp_obj::__construct(::Array< ::Dynamic> lu,::Array< int > p){
            	HX_STACKFRAME(&_hx_pos_6acac2099b5ee449_227_new)
HXLINE( 228)		this->LU = lu;
HXLINE( 229)		this->P = p;
            	}

Dynamic LUDecomp_obj::__CreateEmpty() { return new LUDecomp_obj; }

void *LUDecomp_obj::_hx_vtable = 0;

Dynamic LUDecomp_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LUDecomp_obj > _hx_result = new LUDecomp_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool LUDecomp_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x23d5d240;
}


LUDecomp_obj::LUDecomp_obj()
{
}

void LUDecomp_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LUDecomp);
	HX_MARK_MEMBER_NAME(LU,"LU");
	HX_MARK_MEMBER_NAME(P,"P");
	HX_MARK_END_CLASS();
}

void LUDecomp_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(LU,"LU");
	HX_VISIT_MEMBER_NAME(P,"P");
}

::hx::Val LUDecomp_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"P") ) { return ::hx::Val( P ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"LU") ) { return ::hx::Val( LU ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LUDecomp_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"P") ) { P=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"LU") ) { LU=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LUDecomp_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("LU",89,42,00,00));
	outFields->push(HX_("P",50,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LUDecomp_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(LUDecomp_obj,LU),HX_("LU",89,42,00,00)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(LUDecomp_obj,P),HX_("P",50,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LUDecomp_obj_sStaticStorageInfo = 0;
#endif

static ::String LUDecomp_obj_sMemberFields[] = {
	HX_("LU",89,42,00,00),
	HX_("P",50,00,00,00),
	::String(null()) };

::hx::Class LUDecomp_obj::__mClass;

void LUDecomp_obj::__register()
{
	LUDecomp_obj _hx_dummy;
	LUDecomp_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core._Mat.LUDecomp",26,76,3f,87);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LUDecomp_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LUDecomp_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LUDecomp_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LUDecomp_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
} // end namespace _Mat
