// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_NurbsSurfaceData
#include <verb/core/NurbsSurfaceData.h>
#endif
#ifndef INCLUDED_verb_core_SerializableBase
#include <verb/core/SerializableBase.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f2174f2a818b98f2_84_new,"verb.core.NurbsSurfaceData","new",0xba9fceed,"verb.core.NurbsSurfaceData.new","verb/core/Data.hx",84,0x26519174)
namespace verb{
namespace core{

void NurbsSurfaceData_obj::__construct(int degreeU,int degreeV,::Array< Float > knotsU,::Array< Float > knotsV,::Array< ::Dynamic> controlPoints){
            	HX_STACKFRAME(&_hx_pos_f2174f2a818b98f2_84_new)
HXLINE(  85)		this->degreeU = degreeU;
HXLINE(  86)		this->degreeV = degreeV;
HXLINE(  87)		this->knotsU = knotsU;
HXLINE(  88)		this->knotsV = knotsV;
HXLINE(  89)		this->controlPoints = controlPoints;
            	}

Dynamic NurbsSurfaceData_obj::__CreateEmpty() { return new NurbsSurfaceData_obj; }

void *NurbsSurfaceData_obj::_hx_vtable = 0;

Dynamic NurbsSurfaceData_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NurbsSurfaceData_obj > _hx_result = new NurbsSurfaceData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool NurbsSurfaceData_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x06d9bbfa) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x06d9bbfa;
	} else {
		return inClassId==(int)0x0e8521fd;
	}
}


::hx::ObjectPtr< NurbsSurfaceData_obj > NurbsSurfaceData_obj::__new(int degreeU,int degreeV,::Array< Float > knotsU,::Array< Float > knotsV,::Array< ::Dynamic> controlPoints) {
	::hx::ObjectPtr< NurbsSurfaceData_obj > __this = new NurbsSurfaceData_obj();
	__this->__construct(degreeU,degreeV,knotsU,knotsV,controlPoints);
	return __this;
}

::hx::ObjectPtr< NurbsSurfaceData_obj > NurbsSurfaceData_obj::__alloc(::hx::Ctx *_hx_ctx,int degreeU,int degreeV,::Array< Float > knotsU,::Array< Float > knotsV,::Array< ::Dynamic> controlPoints) {
	NurbsSurfaceData_obj *__this = (NurbsSurfaceData_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NurbsSurfaceData_obj), true, "verb.core.NurbsSurfaceData"));
	*(void **)__this = NurbsSurfaceData_obj::_hx_vtable;
	__this->__construct(degreeU,degreeV,knotsU,knotsV,controlPoints);
	return __this;
}

NurbsSurfaceData_obj::NurbsSurfaceData_obj()
{
}

void NurbsSurfaceData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NurbsSurfaceData);
	HX_MARK_MEMBER_NAME(degreeU,"degreeU");
	HX_MARK_MEMBER_NAME(degreeV,"degreeV");
	HX_MARK_MEMBER_NAME(knotsU,"knotsU");
	HX_MARK_MEMBER_NAME(knotsV,"knotsV");
	HX_MARK_MEMBER_NAME(controlPoints,"controlPoints");
	HX_MARK_END_CLASS();
}

void NurbsSurfaceData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(degreeU,"degreeU");
	HX_VISIT_MEMBER_NAME(degreeV,"degreeV");
	HX_VISIT_MEMBER_NAME(knotsU,"knotsU");
	HX_VISIT_MEMBER_NAME(knotsV,"knotsV");
	HX_VISIT_MEMBER_NAME(controlPoints,"controlPoints");
}

::hx::Val NurbsSurfaceData_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"knotsU") ) { return ::hx::Val( knotsU ); }
		if (HX_FIELD_EQ(inName,"knotsV") ) { return ::hx::Val( knotsV ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"degreeU") ) { return ::hx::Val( degreeU ); }
		if (HX_FIELD_EQ(inName,"degreeV") ) { return ::hx::Val( degreeV ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"controlPoints") ) { return ::hx::Val( controlPoints ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val NurbsSurfaceData_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"knotsU") ) { knotsU=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"knotsV") ) { knotsV=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"degreeU") ) { degreeU=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"degreeV") ) { degreeV=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"controlPoints") ) { controlPoints=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NurbsSurfaceData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("degreeU",89,e3,5a,3a));
	outFields->push(HX_("degreeV",8a,e3,5a,3a));
	outFields->push(HX_("knotsU",0a,84,fa,67));
	outFields->push(HX_("knotsV",0b,84,fa,67));
	outFields->push(HX_("controlPoints",60,55,f2,6f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo NurbsSurfaceData_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(NurbsSurfaceData_obj,degreeU),HX_("degreeU",89,e3,5a,3a)},
	{::hx::fsInt,(int)offsetof(NurbsSurfaceData_obj,degreeV),HX_("degreeV",8a,e3,5a,3a)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(NurbsSurfaceData_obj,knotsU),HX_("knotsU",0a,84,fa,67)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(NurbsSurfaceData_obj,knotsV),HX_("knotsV",0b,84,fa,67)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(NurbsSurfaceData_obj,controlPoints),HX_("controlPoints",60,55,f2,6f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *NurbsSurfaceData_obj_sStaticStorageInfo = 0;
#endif

static ::String NurbsSurfaceData_obj_sMemberFields[] = {
	HX_("degreeU",89,e3,5a,3a),
	HX_("degreeV",8a,e3,5a,3a),
	HX_("knotsU",0a,84,fa,67),
	HX_("knotsV",0b,84,fa,67),
	HX_("controlPoints",60,55,f2,6f),
	::String(null()) };

::hx::Class NurbsSurfaceData_obj::__mClass;

void NurbsSurfaceData_obj::__register()
{
	NurbsSurfaceData_obj _hx_dummy;
	NurbsSurfaceData_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.NurbsSurfaceData",7b,d4,a0,06);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NurbsSurfaceData_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NurbsSurfaceData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NurbsSurfaceData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NurbsSurfaceData_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
