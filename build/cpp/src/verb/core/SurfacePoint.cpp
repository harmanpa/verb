// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_SurfacePoint
#include <verb/core/SurfacePoint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_959611cb896c5e6e_146_new,"verb.core.SurfacePoint","new",0xb12daa55,"verb.core.SurfacePoint.new","verb/core/Intersections.hx",146,0x2e2a0454)
HX_LOCAL_STACK_FRAME(_hx_pos_959611cb896c5e6e_155_fromUv,"verb.core.SurfacePoint","fromUv",0x63cbab96,"verb.core.SurfacePoint.fromUv","verb/core/Intersections.hx",155,0x2e2a0454)
namespace verb{
namespace core{

void SurfacePoint_obj::__construct(::Array< Float > point,::Array< Float > normal,::Array< Float > uv,::hx::Null< int >  __o_id,::hx::Null< bool >  __o_degen){
            		int id = __o_id.Default(-1);
            		bool degen = __o_degen.Default(false);
            	HX_STACKFRAME(&_hx_pos_959611cb896c5e6e_146_new)
HXLINE( 147)		this->uv = uv;
HXLINE( 148)		this->point = point;
HXLINE( 149)		this->normal = normal;
HXLINE( 150)		this->id = id;
HXLINE( 151)		this->degen = degen;
            	}

Dynamic SurfacePoint_obj::__CreateEmpty() { return new SurfacePoint_obj; }

void *SurfacePoint_obj::_hx_vtable = 0;

Dynamic SurfacePoint_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SurfacePoint_obj > _hx_result = new SurfacePoint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool SurfacePoint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x16f19b2d;
}

 ::verb::core::SurfacePoint SurfacePoint_obj::fromUv(Float u,Float v){
            	HX_GC_STACKFRAME(&_hx_pos_959611cb896c5e6e_155_fromUv)
HXDLIN( 155)		return  ::verb::core::SurfacePoint_obj::__alloc( HX_CTX ,null(),null(),::Array_obj< Float >::__new(2)->init(0,u)->init(1,v),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SurfacePoint_obj,fromUv,return )


SurfacePoint_obj::SurfacePoint_obj()
{
}

void SurfacePoint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SurfacePoint);
	HX_MARK_MEMBER_NAME(uv,"uv");
	HX_MARK_MEMBER_NAME(point,"point");
	HX_MARK_MEMBER_NAME(normal,"normal");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(degen,"degen");
	HX_MARK_END_CLASS();
}

void SurfacePoint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(uv,"uv");
	HX_VISIT_MEMBER_NAME(point,"point");
	HX_VISIT_MEMBER_NAME(normal,"normal");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(degen,"degen");
}

::hx::Val SurfacePoint_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"uv") ) { return ::hx::Val( uv ); }
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"point") ) { return ::hx::Val( point ); }
		if (HX_FIELD_EQ(inName,"degen") ) { return ::hx::Val( degen ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { return ::hx::Val( normal ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SurfacePoint_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"fromUv") ) { outValue = fromUv_dyn(); return true; }
	}
	return false;
}

::hx::Val SurfacePoint_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"uv") ) { uv=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"point") ) { point=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"degen") ) { degen=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { normal=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SurfacePoint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("uv",61,66,00,00));
	outFields->push(HX_("point",50,b4,8f,c6));
	outFields->push(HX_("normal",27,72,69,30));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("degen",af,0f,23,d7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SurfacePoint_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(SurfacePoint_obj,uv),HX_("uv",61,66,00,00)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(SurfacePoint_obj,point),HX_("point",50,b4,8f,c6)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(SurfacePoint_obj,normal),HX_("normal",27,72,69,30)},
	{::hx::fsInt,(int)offsetof(SurfacePoint_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsBool,(int)offsetof(SurfacePoint_obj,degen),HX_("degen",af,0f,23,d7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SurfacePoint_obj_sStaticStorageInfo = 0;
#endif

static ::String SurfacePoint_obj_sMemberFields[] = {
	HX_("uv",61,66,00,00),
	HX_("point",50,b4,8f,c6),
	HX_("normal",27,72,69,30),
	HX_("id",db,5b,00,00),
	HX_("degen",af,0f,23,d7),
	::String(null()) };

::hx::Class SurfacePoint_obj::__mClass;

static ::String SurfacePoint_obj_sStaticFields[] = {
	HX_("fromUv",6b,9e,c6,b5),
	::String(null())
};

void SurfacePoint_obj::__register()
{
	SurfacePoint_obj _hx_dummy;
	SurfacePoint_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.SurfacePoint",e3,db,72,fc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SurfacePoint_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(SurfacePoint_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SurfacePoint_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SurfacePoint_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SurfacePoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SurfacePoint_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
