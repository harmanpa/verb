// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_CurveSurfaceIntersection
#include <verb/core/CurveSurfaceIntersection.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a30cb200c0bb4454_36_new,"verb.core.CurveSurfaceIntersection","new",0xb4ebba19,"verb.core.CurveSurfaceIntersection.new","verb/core/Intersections.hx",36,0x2e2a0454)
namespace verb{
namespace core{

void CurveSurfaceIntersection_obj::__construct(Float u,::Array< Float > uv,::Array< Float > curvePoint,::Array< Float > surfacePoint){
            	HX_STACKFRAME(&_hx_pos_a30cb200c0bb4454_36_new)
HXLINE(  37)		this->u = u;
HXLINE(  38)		this->uv = uv;
HXLINE(  39)		this->curvePoint = curvePoint;
HXLINE(  40)		this->surfacePoint = surfacePoint;
            	}

Dynamic CurveSurfaceIntersection_obj::__CreateEmpty() { return new CurveSurfaceIntersection_obj; }

void *CurveSurfaceIntersection_obj::_hx_vtable = 0;

Dynamic CurveSurfaceIntersection_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CurveSurfaceIntersection_obj > _hx_result = new CurveSurfaceIntersection_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool CurveSurfaceIntersection_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5a2ae5c5;
}


CurveSurfaceIntersection_obj::CurveSurfaceIntersection_obj()
{
}

void CurveSurfaceIntersection_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CurveSurfaceIntersection);
	HX_MARK_MEMBER_NAME(u,"u");
	HX_MARK_MEMBER_NAME(uv,"uv");
	HX_MARK_MEMBER_NAME(curvePoint,"curvePoint");
	HX_MARK_MEMBER_NAME(surfacePoint,"surfacePoint");
	HX_MARK_END_CLASS();
}

void CurveSurfaceIntersection_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(u,"u");
	HX_VISIT_MEMBER_NAME(uv,"uv");
	HX_VISIT_MEMBER_NAME(curvePoint,"curvePoint");
	HX_VISIT_MEMBER_NAME(surfacePoint,"surfacePoint");
}

::hx::Val CurveSurfaceIntersection_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"u") ) { return ::hx::Val( u ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"uv") ) { return ::hx::Val( uv ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"curvePoint") ) { return ::hx::Val( curvePoint ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"surfacePoint") ) { return ::hx::Val( surfacePoint ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CurveSurfaceIntersection_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"u") ) { u=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"uv") ) { uv=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"curvePoint") ) { curvePoint=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"surfacePoint") ) { surfacePoint=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CurveSurfaceIntersection_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("u",75,00,00,00));
	outFields->push(HX_("uv",61,66,00,00));
	outFields->push(HX_("curvePoint",21,7d,45,24));
	outFields->push(HX_("surfacePoint",e3,3a,b1,98));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CurveSurfaceIntersection_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(CurveSurfaceIntersection_obj,u),HX_("u",75,00,00,00)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(CurveSurfaceIntersection_obj,uv),HX_("uv",61,66,00,00)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(CurveSurfaceIntersection_obj,curvePoint),HX_("curvePoint",21,7d,45,24)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(CurveSurfaceIntersection_obj,surfacePoint),HX_("surfacePoint",e3,3a,b1,98)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CurveSurfaceIntersection_obj_sStaticStorageInfo = 0;
#endif

static ::String CurveSurfaceIntersection_obj_sMemberFields[] = {
	HX_("u",75,00,00,00),
	HX_("uv",61,66,00,00),
	HX_("curvePoint",21,7d,45,24),
	HX_("surfacePoint",e3,3a,b1,98),
	::String(null()) };

::hx::Class CurveSurfaceIntersection_obj::__mClass;

void CurveSurfaceIntersection_obj::__register()
{
	CurveSurfaceIntersection_obj _hx_dummy;
	CurveSurfaceIntersection_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.CurveSurfaceIntersection",a7,b9,f4,c2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CurveSurfaceIntersection_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CurveSurfaceIntersection_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CurveSurfaceIntersection_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CurveSurfaceIntersection_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
