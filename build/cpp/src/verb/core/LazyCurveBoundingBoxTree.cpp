// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_verb_core_ArrayExtensions
#include <verb/core/ArrayExtensions.h>
#endif
#ifndef INCLUDED_verb_core_BoundingBox
#include <verb/core/BoundingBox.h>
#endif
#ifndef INCLUDED_verb_core_LazyCurveBoundingBoxTree
#include <verb/core/LazyCurveBoundingBoxTree.h>
#endif
#ifndef INCLUDED_verb_core_NurbsCurveData
#include <verb/core/NurbsCurveData.h>
#endif
#ifndef INCLUDED_verb_core_Pair
#include <verb/core/Pair.h>
#endif
#ifndef INCLUDED_verb_core_SerializableBase
#include <verb/core/SerializableBase.h>
#endif
#ifndef INCLUDED_verb_eval_Divide
#include <verb/eval/Divide.h>
#endif
#ifndef INCLUDED_verb_eval_Eval
#include <verb/eval/Eval.h>
#endif
#ifndef INCLUDED_verb_eval_IBoundingBoxTree
#include <verb/eval/IBoundingBoxTree.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_141deef88314ad54_11_new,"verb.core.LazyCurveBoundingBoxTree","new",0xba470f9c,"verb.core.LazyCurveBoundingBoxTree.new","verb/core/LazyCurveBoundingBoxTree.hx",11,0x881e56f4)
HX_LOCAL_STACK_FRAME(_hx_pos_141deef88314ad54_25_split,"verb.core.LazyCurveBoundingBoxTree","split",0x0e1d7116,"verb.core.LazyCurveBoundingBoxTree.split","verb/core/LazyCurveBoundingBoxTree.hx",25,0x881e56f4)
HX_LOCAL_STACK_FRAME(_hx_pos_141deef88314ad54_37_boundingBox,"verb.core.LazyCurveBoundingBoxTree","boundingBox",0xc4067043,"verb.core.LazyCurveBoundingBoxTree.boundingBox","verb/core/LazyCurveBoundingBoxTree.hx",37,0x881e56f4)
HX_LOCAL_STACK_FRAME(_hx_pos_141deef88314ad54_45_yield,"verb.core.LazyCurveBoundingBoxTree","yield",0x7ddf2089,"verb.core.LazyCurveBoundingBoxTree.yield","verb/core/LazyCurveBoundingBoxTree.hx",45,0x881e56f4)
HX_LOCAL_STACK_FRAME(_hx_pos_141deef88314ad54_49_indivisible,"verb.core.LazyCurveBoundingBoxTree","indivisible",0x38baa644,"verb.core.LazyCurveBoundingBoxTree.indivisible","verb/core/LazyCurveBoundingBoxTree.hx",49,0x881e56f4)
HX_LOCAL_STACK_FRAME(_hx_pos_141deef88314ad54_53_empty,"verb.core.LazyCurveBoundingBoxTree","empty",0xfc88c0c9,"verb.core.LazyCurveBoundingBoxTree.empty","verb/core/LazyCurveBoundingBoxTree.hx",53,0x881e56f4)
namespace verb{
namespace core{

void LazyCurveBoundingBoxTree_obj::__construct( ::verb::core::NurbsCurveData curve, ::Dynamic knotTol){
            	HX_STACKFRAME(&_hx_pos_141deef88314ad54_11_new)
HXLINE(  14)		this->_boundingBox = null();
HXLINE(  18)		this->_curve = curve;
HXLINE(  19)		if (::hx::IsNull( knotTol )) {
HXLINE(  20)			::Array< Float > a = this->_curve->knots;
HXDLIN(  20)			Float knotTol1 = ( (Float)(::verb::core::ArrayExtensions_obj::last(a)) );
HXDLIN(  20)			knotTol = ((knotTol1 - ( (Float)(::verb::core::ArrayExtensions_obj::first(a)) )) / ( (Float)(64) ));
            		}
HXLINE(  22)		this->_knotTol = ( (Float)(knotTol) );
            	}

Dynamic LazyCurveBoundingBoxTree_obj::__CreateEmpty() { return new LazyCurveBoundingBoxTree_obj; }

void *LazyCurveBoundingBoxTree_obj::_hx_vtable = 0;

Dynamic LazyCurveBoundingBoxTree_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LazyCurveBoundingBoxTree_obj > _hx_result = new LazyCurveBoundingBoxTree_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool LazyCurveBoundingBoxTree_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x435b6490;
}

static ::verb::eval::IBoundingBoxTree_obj _hx_verb_core_LazyCurveBoundingBoxTree__hx_verb_eval_IBoundingBoxTree= {
	(  ::verb::core::BoundingBox (::hx::Object::*)())&::verb::core::LazyCurveBoundingBoxTree_obj::boundingBox,
	(  ::verb::core::Pair (::hx::Object::*)())&::verb::core::LazyCurveBoundingBoxTree_obj::split,
	(  ::Dynamic (::hx::Object::*)())&::verb::core::LazyCurveBoundingBoxTree_obj::yield_2aa2127b,
	( bool (::hx::Object::*)(Float))&::verb::core::LazyCurveBoundingBoxTree_obj::indivisible,
	( bool (::hx::Object::*)())&::verb::core::LazyCurveBoundingBoxTree_obj::empty,
};

 ::Dynamic LazyCurveBoundingBoxTree_obj::yield_2aa2127b() {
			return yield();
}
void *LazyCurveBoundingBoxTree_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x9907fd77: return &_hx_verb_core_LazyCurveBoundingBoxTree__hx_verb_eval_IBoundingBoxTree;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::verb::core::Pair LazyCurveBoundingBoxTree_obj::split(){
            	HX_GC_STACKFRAME(&_hx_pos_141deef88314ad54_25_split)
HXLINE(  26)		Float min = ( (Float)(::verb::core::ArrayExtensions_obj::first(this->_curve->knots)) );
HXLINE(  27)		Float max = ( (Float)(::verb::core::ArrayExtensions_obj::last(this->_curve->knots)) );
HXLINE(  28)		Float dom = (max - min);
HXLINE(  30)		::Array< ::Dynamic> crvs = ::verb::eval::Divide_obj::curveSplit(this->_curve,(((max + min) / ((Float)2.0)) + ((dom * ((Float)0.1)) * ::Math_obj::random())));
HXLINE(  33)		 ::verb::core::LazyCurveBoundingBoxTree _hx_tmp =  ::verb::core::LazyCurveBoundingBoxTree_obj::__alloc( HX_CTX ,crvs->__get(0).StaticCast<  ::verb::core::NurbsCurveData >(),this->_knotTol);
HXLINE(  32)		return  ::verb::core::Pair_obj::__alloc( HX_CTX ,_hx_tmp, ::verb::core::LazyCurveBoundingBoxTree_obj::__alloc( HX_CTX ,crvs->__get(1).StaticCast<  ::verb::core::NurbsCurveData >(),this->_knotTol));
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazyCurveBoundingBoxTree_obj,split,return )

 ::verb::core::BoundingBox LazyCurveBoundingBoxTree_obj::boundingBox(){
            	HX_GC_STACKFRAME(&_hx_pos_141deef88314ad54_37_boundingBox)
HXLINE(  38)		if (::hx::IsNull( this->_boundingBox )) {
HXLINE(  39)			this->_boundingBox =  ::verb::core::BoundingBox_obj::__alloc( HX_CTX ,::verb::eval::Eval_obj::dehomogenize1d(this->_curve->controlPoints));
            		}
HXLINE(  41)		return this->_boundingBox;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazyCurveBoundingBoxTree_obj,boundingBox,return )

 ::verb::core::NurbsCurveData LazyCurveBoundingBoxTree_obj::yield(){
            	HX_STACKFRAME(&_hx_pos_141deef88314ad54_45_yield)
HXDLIN(  45)		return this->_curve;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazyCurveBoundingBoxTree_obj,yield,return )

bool LazyCurveBoundingBoxTree_obj::indivisible(Float tolerance){
            	HX_STACKFRAME(&_hx_pos_141deef88314ad54_49_indivisible)
HXDLIN(  49)		::Array< Float > a = this->_curve->knots;
HXDLIN(  49)		Float _hx_tmp = ( (Float)(::verb::core::ArrayExtensions_obj::last(a)) );
HXDLIN(  49)		Float _hx_tmp1 = (_hx_tmp - ( (Float)(::verb::core::ArrayExtensions_obj::first(a)) ));
HXDLIN(  49)		return (_hx_tmp1 < this->_knotTol);
            	}


HX_DEFINE_DYNAMIC_FUNC1(LazyCurveBoundingBoxTree_obj,indivisible,return )

bool LazyCurveBoundingBoxTree_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_141deef88314ad54_53_empty)
HXDLIN(  53)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazyCurveBoundingBoxTree_obj,empty,return )


::hx::ObjectPtr< LazyCurveBoundingBoxTree_obj > LazyCurveBoundingBoxTree_obj::__new( ::verb::core::NurbsCurveData curve, ::Dynamic knotTol) {
	::hx::ObjectPtr< LazyCurveBoundingBoxTree_obj > __this = new LazyCurveBoundingBoxTree_obj();
	__this->__construct(curve,knotTol);
	return __this;
}

::hx::ObjectPtr< LazyCurveBoundingBoxTree_obj > LazyCurveBoundingBoxTree_obj::__alloc(::hx::Ctx *_hx_ctx, ::verb::core::NurbsCurveData curve, ::Dynamic knotTol) {
	LazyCurveBoundingBoxTree_obj *__this = (LazyCurveBoundingBoxTree_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LazyCurveBoundingBoxTree_obj), true, "verb.core.LazyCurveBoundingBoxTree"));
	*(void **)__this = LazyCurveBoundingBoxTree_obj::_hx_vtable;
	__this->__construct(curve,knotTol);
	return __this;
}

LazyCurveBoundingBoxTree_obj::LazyCurveBoundingBoxTree_obj()
{
}

void LazyCurveBoundingBoxTree_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LazyCurveBoundingBoxTree);
	HX_MARK_MEMBER_NAME(_curve,"_curve");
	HX_MARK_MEMBER_NAME(_boundingBox,"_boundingBox");
	HX_MARK_MEMBER_NAME(_knotTol,"_knotTol");
	HX_MARK_END_CLASS();
}

void LazyCurveBoundingBoxTree_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_curve,"_curve");
	HX_VISIT_MEMBER_NAME(_boundingBox,"_boundingBox");
	HX_VISIT_MEMBER_NAME(_knotTol,"_knotTol");
}

::hx::Val LazyCurveBoundingBoxTree_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"split") ) { return ::hx::Val( split_dyn() ); }
		if (HX_FIELD_EQ(inName,"yield") ) { return ::hx::Val( yield_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return ::hx::Val( empty_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_curve") ) { return ::hx::Val( _curve ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_knotTol") ) { return ::hx::Val( _knotTol ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"boundingBox") ) { return ::hx::Val( boundingBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"indivisible") ) { return ::hx::Val( indivisible_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_boundingBox") ) { return ::hx::Val( _boundingBox ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LazyCurveBoundingBoxTree_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"_curve") ) { _curve=inValue.Cast<  ::verb::core::NurbsCurveData >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_knotTol") ) { _knotTol=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_boundingBox") ) { _boundingBox=inValue.Cast<  ::verb::core::BoundingBox >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LazyCurveBoundingBoxTree_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_curve",f0,93,3f,4a));
	outFields->push(HX_("_boundingBox",08,43,b1,eb));
	outFields->push(HX_("_knotTol",6a,ef,d9,cc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LazyCurveBoundingBoxTree_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::verb::core::NurbsCurveData */ ,(int)offsetof(LazyCurveBoundingBoxTree_obj,_curve),HX_("_curve",f0,93,3f,4a)},
	{::hx::fsObject /*  ::verb::core::BoundingBox */ ,(int)offsetof(LazyCurveBoundingBoxTree_obj,_boundingBox),HX_("_boundingBox",08,43,b1,eb)},
	{::hx::fsFloat,(int)offsetof(LazyCurveBoundingBoxTree_obj,_knotTol),HX_("_knotTol",6a,ef,d9,cc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LazyCurveBoundingBoxTree_obj_sStaticStorageInfo = 0;
#endif

static ::String LazyCurveBoundingBoxTree_obj_sMemberFields[] = {
	HX_("_curve",f0,93,3f,4a),
	HX_("_boundingBox",08,43,b1,eb),
	HX_("_knotTol",6a,ef,d9,cc),
	HX_("split",da,ea,6e,81),
	HX_("boundingBox",07,95,a7,85),
	HX_("yield",4d,9a,30,f1),
	HX_("indivisible",08,cb,5b,fa),
	HX_("empty",8d,3a,da,6f),
	::String(null()) };

::hx::Class LazyCurveBoundingBoxTree_obj::__mClass;

void LazyCurveBoundingBoxTree_obj::__register()
{
	LazyCurveBoundingBoxTree_obj _hx_dummy;
	LazyCurveBoundingBoxTree_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.LazyCurveBoundingBoxTree",aa,51,70,4c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LazyCurveBoundingBoxTree_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LazyCurveBoundingBoxTree_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LazyCurveBoundingBoxTree_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LazyCurveBoundingBoxTree_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
