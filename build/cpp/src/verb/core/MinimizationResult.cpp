// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_MinimizationResult
#include <verb/core/MinimizationResult.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7da8099096ccb318_160_new,"verb.core.MinimizationResult","new",0xa16fb8dd,"verb.core.MinimizationResult.new","verb/core/Minimizer.hx",160,0x5dedc90a)
namespace verb{
namespace core{

void MinimizationResult_obj::__construct(::Array< Float > solution,Float value,::Array< Float > gradient,::Array< ::Dynamic> invHessian,int iterations,::String message){
            	HX_STACKFRAME(&_hx_pos_7da8099096ccb318_160_new)
HXLINE( 161)		this->solution = solution;
HXLINE( 162)		this->value = value;
HXLINE( 163)		this->gradient = gradient;
HXLINE( 164)		this->invHessian = invHessian;
HXLINE( 165)		this->iterations = iterations;
HXLINE( 166)		this->message = message;
            	}

Dynamic MinimizationResult_obj::__CreateEmpty() { return new MinimizationResult_obj; }

void *MinimizationResult_obj::_hx_vtable = 0;

Dynamic MinimizationResult_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MinimizationResult_obj > _hx_result = new MinimizationResult_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool MinimizationResult_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6b9948d1;
}


MinimizationResult_obj::MinimizationResult_obj()
{
}

void MinimizationResult_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MinimizationResult);
	HX_MARK_MEMBER_NAME(solution,"solution");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(gradient,"gradient");
	HX_MARK_MEMBER_NAME(invHessian,"invHessian");
	HX_MARK_MEMBER_NAME(iterations,"iterations");
	HX_MARK_MEMBER_NAME(message,"message");
	HX_MARK_END_CLASS();
}

void MinimizationResult_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(solution,"solution");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(gradient,"gradient");
	HX_VISIT_MEMBER_NAME(invHessian,"invHessian");
	HX_VISIT_MEMBER_NAME(iterations,"iterations");
	HX_VISIT_MEMBER_NAME(message,"message");
}

::hx::Val MinimizationResult_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return ::hx::Val( value ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"message") ) { return ::hx::Val( message ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"solution") ) { return ::hx::Val( solution ); }
		if (HX_FIELD_EQ(inName,"gradient") ) { return ::hx::Val( gradient ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"invHessian") ) { return ::hx::Val( invHessian ); }
		if (HX_FIELD_EQ(inName,"iterations") ) { return ::hx::Val( iterations ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MinimizationResult_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"message") ) { message=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"solution") ) { solution=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gradient") ) { gradient=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"invHessian") ) { invHessian=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iterations") ) { iterations=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MinimizationResult_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("solution",79,66,e1,92));
	outFields->push(HX_("value",71,7f,b8,31));
	outFields->push(HX_("gradient",f0,39,3f,2a));
	outFields->push(HX_("invHessian",e8,fb,03,77));
	outFields->push(HX_("iterations",36,f3,39,62));
	outFields->push(HX_("message",c7,35,11,9a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MinimizationResult_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(MinimizationResult_obj,solution),HX_("solution",79,66,e1,92)},
	{::hx::fsFloat,(int)offsetof(MinimizationResult_obj,value),HX_("value",71,7f,b8,31)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(MinimizationResult_obj,gradient),HX_("gradient",f0,39,3f,2a)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MinimizationResult_obj,invHessian),HX_("invHessian",e8,fb,03,77)},
	{::hx::fsInt,(int)offsetof(MinimizationResult_obj,iterations),HX_("iterations",36,f3,39,62)},
	{::hx::fsString,(int)offsetof(MinimizationResult_obj,message),HX_("message",c7,35,11,9a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MinimizationResult_obj_sStaticStorageInfo = 0;
#endif

static ::String MinimizationResult_obj_sMemberFields[] = {
	HX_("solution",79,66,e1,92),
	HX_("value",71,7f,b8,31),
	HX_("gradient",f0,39,3f,2a),
	HX_("invHessian",e8,fb,03,77),
	HX_("iterations",36,f3,39,62),
	HX_("message",c7,35,11,9a),
	::String(null()) };

::hx::Class MinimizationResult_obj::__mClass;

void MinimizationResult_obj::__register()
{
	MinimizationResult_obj _hx_dummy;
	MinimizationResult_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.MinimizationResult",6b,06,d9,9e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MinimizationResult_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MinimizationResult_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MinimizationResult_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MinimizationResult_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
