// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_ArrayExtensions
#include <verb/core/ArrayExtensions.h>
#endif
#ifndef INCLUDED_verb_core_BoundingBox
#include <verb/core/BoundingBox.h>
#endif
#ifndef INCLUDED_verb_core_LazyMeshBoundingBoxTree
#include <verb/core/LazyMeshBoundingBoxTree.h>
#endif
#ifndef INCLUDED_verb_core_Mesh
#include <verb/core/Mesh.h>
#endif
#ifndef INCLUDED_verb_core_MeshData
#include <verb/core/MeshData.h>
#endif
#ifndef INCLUDED_verb_core_Pair
#include <verb/core/Pair.h>
#endif
#ifndef INCLUDED_verb_core_SerializableBase
#include <verb/core/SerializableBase.h>
#endif
#ifndef INCLUDED_verb_eval_IBoundingBoxTree
#include <verb/eval/IBoundingBoxTree.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_94718e56cd80bc0a_8_new,"verb.core.LazyMeshBoundingBoxTree","new",0x34e98c76,"verb.core.LazyMeshBoundingBoxTree.new","verb/core/LazyMeshBoundingBoxTree.hx",8,0x9f2d881a)
HX_LOCAL_STACK_FRAME(_hx_pos_94718e56cd80bc0a_21_split,"verb.core.LazyMeshBoundingBoxTree","split",0x53fc5870,"verb.core.LazyMeshBoundingBoxTree.split","verb/core/LazyMeshBoundingBoxTree.hx",21,0x9f2d881a)
HX_LOCAL_STACK_FRAME(_hx_pos_94718e56cd80bc0a_31_boundingBox,"verb.core.LazyMeshBoundingBoxTree","boundingBox",0x4118571d,"verb.core.LazyMeshBoundingBoxTree.boundingBox","verb/core/LazyMeshBoundingBoxTree.hx",31,0x9f2d881a)
HX_LOCAL_STACK_FRAME(_hx_pos_94718e56cd80bc0a_39_yield,"verb.core.LazyMeshBoundingBoxTree","yield",0xc3be07e3,"verb.core.LazyMeshBoundingBoxTree.yield","verb/core/LazyMeshBoundingBoxTree.hx",39,0x9f2d881a)
HX_LOCAL_STACK_FRAME(_hx_pos_94718e56cd80bc0a_43_indivisible,"verb.core.LazyMeshBoundingBoxTree","indivisible",0xb5cc8d1e,"verb.core.LazyMeshBoundingBoxTree.indivisible","verb/core/LazyMeshBoundingBoxTree.hx",43,0x9f2d881a)
HX_LOCAL_STACK_FRAME(_hx_pos_94718e56cd80bc0a_47_empty,"verb.core.LazyMeshBoundingBoxTree","empty",0x4267a823,"verb.core.LazyMeshBoundingBoxTree.empty","verb/core/LazyMeshBoundingBoxTree.hx",47,0x9f2d881a)
namespace verb{
namespace core{

void LazyMeshBoundingBoxTree_obj::__construct( ::verb::core::MeshData mesh,::Array< int > faceIndices){
            	HX_STACKFRAME(&_hx_pos_94718e56cd80bc0a_8_new)
HXLINE(  11)		this->_boundingBox = null();
HXLINE(  14)		this->_mesh = mesh;
HXLINE(  15)		if (::hx::IsNull( faceIndices )) {
HXLINE(  16)			::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN(  16)			{
HXLINE(  16)				int _g1 = 0;
HXDLIN(  16)				int _g2 = mesh->faces->length;
HXDLIN(  16)				while((_g1 < _g2)){
HXLINE(  16)					_g1 = (_g1 + 1);
HXDLIN(  16)					int i = (_g1 - 1);
HXDLIN(  16)					_g->push(i);
            				}
            			}
HXDLIN(  16)			faceIndices = _g;
            		}
HXLINE(  18)		this->_faceIndices = faceIndices;
            	}

Dynamic LazyMeshBoundingBoxTree_obj::__CreateEmpty() { return new LazyMeshBoundingBoxTree_obj; }

void *LazyMeshBoundingBoxTree_obj::_hx_vtable = 0;

Dynamic LazyMeshBoundingBoxTree_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LazyMeshBoundingBoxTree_obj > _hx_result = new LazyMeshBoundingBoxTree_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool LazyMeshBoundingBoxTree_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x650c1b26;
}

static ::verb::eval::IBoundingBoxTree_obj _hx_verb_core_LazyMeshBoundingBoxTree__hx_verb_eval_IBoundingBoxTree= {
	(  ::verb::core::BoundingBox (::hx::Object::*)())&::verb::core::LazyMeshBoundingBoxTree_obj::boundingBox,
	(  ::verb::core::Pair (::hx::Object::*)())&::verb::core::LazyMeshBoundingBoxTree_obj::split,
	(  ::Dynamic (::hx::Object::*)())&::verb::core::LazyMeshBoundingBoxTree_obj::yield_2aa2127b,
	( bool (::hx::Object::*)(Float))&::verb::core::LazyMeshBoundingBoxTree_obj::indivisible,
	( bool (::hx::Object::*)())&::verb::core::LazyMeshBoundingBoxTree_obj::empty,
};

 ::Dynamic LazyMeshBoundingBoxTree_obj::yield_2aa2127b() {
			return yield();
}
void *LazyMeshBoundingBoxTree_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x9907fd77: return &_hx_verb_core_LazyMeshBoundingBoxTree__hx_verb_eval_IBoundingBoxTree;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::verb::core::Pair LazyMeshBoundingBoxTree_obj::split(){
            	HX_GC_STACKFRAME(&_hx_pos_94718e56cd80bc0a_21_split)
HXLINE(  22)		 ::verb::core::BoundingBox as = this->boundingBox();
HXDLIN(  22)		::Array< int > as1 = ::verb::core::Mesh_obj::sortTrianglesOnLongestAxis(as,this->_mesh,this->_faceIndices);
HXDLIN(  22)		::Array< int > l = ::verb::core::ArrayExtensions_obj::left(as1);
HXDLIN(  22)		::Array< int > r = ::verb::core::ArrayExtensions_obj::right(as1);
HXLINE(  27)		 ::verb::core::LazyMeshBoundingBoxTree _hx_tmp =  ::verb::core::LazyMeshBoundingBoxTree_obj::__alloc( HX_CTX ,this->_mesh,l);
HXLINE(  26)		return  ::verb::core::Pair_obj::__alloc( HX_CTX ,_hx_tmp, ::verb::core::LazyMeshBoundingBoxTree_obj::__alloc( HX_CTX ,this->_mesh,r));
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazyMeshBoundingBoxTree_obj,split,return )

 ::verb::core::BoundingBox LazyMeshBoundingBoxTree_obj::boundingBox(){
            	HX_STACKFRAME(&_hx_pos_94718e56cd80bc0a_31_boundingBox)
HXLINE(  32)		if (::hx::IsNull( this->_boundingBox )) {
HXLINE(  33)			this->_boundingBox = ::verb::core::Mesh_obj::makeMeshAabb(this->_mesh,this->_faceIndices);
            		}
HXLINE(  35)		return this->_boundingBox;
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazyMeshBoundingBoxTree_obj,boundingBox,return )

int LazyMeshBoundingBoxTree_obj::yield(){
            	HX_STACKFRAME(&_hx_pos_94718e56cd80bc0a_39_yield)
HXDLIN(  39)		return this->_faceIndices->__get(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazyMeshBoundingBoxTree_obj,yield,return )

bool LazyMeshBoundingBoxTree_obj::indivisible(Float tolerance){
            	HX_STACKFRAME(&_hx_pos_94718e56cd80bc0a_43_indivisible)
HXDLIN(  43)		return (this->_faceIndices->length == 1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(LazyMeshBoundingBoxTree_obj,indivisible,return )

bool LazyMeshBoundingBoxTree_obj::empty(){
            	HX_STACKFRAME(&_hx_pos_94718e56cd80bc0a_47_empty)
HXDLIN(  47)		return (this->_faceIndices->length == 0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(LazyMeshBoundingBoxTree_obj,empty,return )


::hx::ObjectPtr< LazyMeshBoundingBoxTree_obj > LazyMeshBoundingBoxTree_obj::__new( ::verb::core::MeshData mesh,::Array< int > faceIndices) {
	::hx::ObjectPtr< LazyMeshBoundingBoxTree_obj > __this = new LazyMeshBoundingBoxTree_obj();
	__this->__construct(mesh,faceIndices);
	return __this;
}

::hx::ObjectPtr< LazyMeshBoundingBoxTree_obj > LazyMeshBoundingBoxTree_obj::__alloc(::hx::Ctx *_hx_ctx, ::verb::core::MeshData mesh,::Array< int > faceIndices) {
	LazyMeshBoundingBoxTree_obj *__this = (LazyMeshBoundingBoxTree_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LazyMeshBoundingBoxTree_obj), true, "verb.core.LazyMeshBoundingBoxTree"));
	*(void **)__this = LazyMeshBoundingBoxTree_obj::_hx_vtable;
	__this->__construct(mesh,faceIndices);
	return __this;
}

LazyMeshBoundingBoxTree_obj::LazyMeshBoundingBoxTree_obj()
{
}

void LazyMeshBoundingBoxTree_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LazyMeshBoundingBoxTree);
	HX_MARK_MEMBER_NAME(_mesh,"_mesh");
	HX_MARK_MEMBER_NAME(_faceIndices,"_faceIndices");
	HX_MARK_MEMBER_NAME(_boundingBox,"_boundingBox");
	HX_MARK_END_CLASS();
}

void LazyMeshBoundingBoxTree_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_mesh,"_mesh");
	HX_VISIT_MEMBER_NAME(_faceIndices,"_faceIndices");
	HX_VISIT_MEMBER_NAME(_boundingBox,"_boundingBox");
}

::hx::Val LazyMeshBoundingBoxTree_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_mesh") ) { return ::hx::Val( _mesh ); }
		if (HX_FIELD_EQ(inName,"split") ) { return ::hx::Val( split_dyn() ); }
		if (HX_FIELD_EQ(inName,"yield") ) { return ::hx::Val( yield_dyn() ); }
		if (HX_FIELD_EQ(inName,"empty") ) { return ::hx::Val( empty_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"boundingBox") ) { return ::hx::Val( boundingBox_dyn() ); }
		if (HX_FIELD_EQ(inName,"indivisible") ) { return ::hx::Val( indivisible_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_faceIndices") ) { return ::hx::Val( _faceIndices ); }
		if (HX_FIELD_EQ(inName,"_boundingBox") ) { return ::hx::Val( _boundingBox ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LazyMeshBoundingBoxTree_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_mesh") ) { _mesh=inValue.Cast<  ::verb::core::MeshData >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_faceIndices") ) { _faceIndices=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_boundingBox") ) { _boundingBox=inValue.Cast<  ::verb::core::BoundingBox >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LazyMeshBoundingBoxTree_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_mesh",cc,65,6a,fb));
	outFields->push(HX_("_faceIndices",0b,e6,c7,6f));
	outFields->push(HX_("_boundingBox",08,43,b1,eb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LazyMeshBoundingBoxTree_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::verb::core::MeshData */ ,(int)offsetof(LazyMeshBoundingBoxTree_obj,_mesh),HX_("_mesh",cc,65,6a,fb)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(LazyMeshBoundingBoxTree_obj,_faceIndices),HX_("_faceIndices",0b,e6,c7,6f)},
	{::hx::fsObject /*  ::verb::core::BoundingBox */ ,(int)offsetof(LazyMeshBoundingBoxTree_obj,_boundingBox),HX_("_boundingBox",08,43,b1,eb)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LazyMeshBoundingBoxTree_obj_sStaticStorageInfo = 0;
#endif

static ::String LazyMeshBoundingBoxTree_obj_sMemberFields[] = {
	HX_("_mesh",cc,65,6a,fb),
	HX_("_faceIndices",0b,e6,c7,6f),
	HX_("_boundingBox",08,43,b1,eb),
	HX_("split",da,ea,6e,81),
	HX_("boundingBox",07,95,a7,85),
	HX_("yield",4d,9a,30,f1),
	HX_("indivisible",08,cb,5b,fa),
	HX_("empty",8d,3a,da,6f),
	::String(null()) };

::hx::Class LazyMeshBoundingBoxTree_obj::__mClass;

void LazyMeshBoundingBoxTree_obj::__register()
{
	LazyMeshBoundingBoxTree_obj _hx_dummy;
	LazyMeshBoundingBoxTree_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.LazyMeshBoundingBoxTree",84,d9,68,4d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LazyMeshBoundingBoxTree_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LazyMeshBoundingBoxTree_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LazyMeshBoundingBoxTree_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LazyMeshBoundingBoxTree_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
