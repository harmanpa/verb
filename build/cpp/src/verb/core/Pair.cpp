// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_core_Pair
#include <verb/core/Pair.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fbc105299af82c50_206_new,"verb.core.Pair","new",0xddb3b30c,"verb.core.Pair.new","verb/core/Data.hx",206,0x26519174)
namespace verb{
namespace core{

void Pair_obj::__construct( ::Dynamic item1, ::Dynamic item2){
            	HX_STACKFRAME(&_hx_pos_fbc105299af82c50_206_new)
HXLINE( 207)		this->item0 = item1;
HXLINE( 208)		this->item1 = item2;
            	}

Dynamic Pair_obj::__CreateEmpty() { return new Pair_obj; }

void *Pair_obj::_hx_vtable = 0;

Dynamic Pair_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Pair_obj > _hx_result = new Pair_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Pair_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x69002638;
}


Pair_obj::Pair_obj()
{
}

void Pair_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Pair);
	HX_MARK_MEMBER_NAME(item0,"item0");
	HX_MARK_MEMBER_NAME(item1,"item1");
	HX_MARK_END_CLASS();
}

void Pair_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(item0,"item0");
	HX_VISIT_MEMBER_NAME(item1,"item1");
}

::hx::Val Pair_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"item0") ) { return ::hx::Val( item0 ); }
		if (HX_FIELD_EQ(inName,"item1") ) { return ::hx::Val( item1 ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Pair_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"item0") ) { item0=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"item1") ) { item1=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Pair_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("item0",bd,ab,0c,c2));
	outFields->push(HX_("item1",be,ab,0c,c2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Pair_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Pair_obj,item0),HX_("item0",bd,ab,0c,c2)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Pair_obj,item1),HX_("item1",be,ab,0c,c2)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Pair_obj_sStaticStorageInfo = 0;
#endif

static ::String Pair_obj_sMemberFields[] = {
	HX_("item0",bd,ab,0c,c2),
	HX_("item1",be,ab,0c,c2),
	::String(null()) };

::hx::Class Pair_obj::__mClass;

void Pair_obj::__register()
{
	Pair_obj _hx_dummy;
	Pair_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.core.Pair",1a,7d,0a,63);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Pair_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Pair_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Pair_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Pair_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace core
