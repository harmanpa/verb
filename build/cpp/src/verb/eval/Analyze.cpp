// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_verb_core_ArrayExtensions
#include <verb/core/ArrayExtensions.h>
#endif
#ifndef INCLUDED_verb_core_Constants
#include <verb/core/Constants.h>
#endif
#ifndef INCLUDED_verb_core_Mat
#include <verb/core/Mat.h>
#endif
#ifndef INCLUDED_verb_core_MeshData
#include <verb/core/MeshData.h>
#endif
#ifndef INCLUDED_verb_core_NurbsCurveData
#include <verb/core/NurbsCurveData.h>
#endif
#ifndef INCLUDED_verb_core_NurbsSurfaceData
#include <verb/core/NurbsSurfaceData.h>
#endif
#ifndef INCLUDED_verb_core_SerializableBase
#include <verb/core/SerializableBase.h>
#endif
#ifndef INCLUDED_verb_core_Trig
#include <verb/core/Trig.h>
#endif
#ifndef INCLUDED_verb_core_Vec
#include <verb/core/Vec.h>
#endif
#ifndef INCLUDED_verb_eval_AdaptiveRefinementOptions
#include <verb/eval/AdaptiveRefinementOptions.h>
#endif
#ifndef INCLUDED_verb_eval_Analyze
#include <verb/eval/Analyze.h>
#endif
#ifndef INCLUDED_verb_eval_Eval
#include <verb/eval/Eval.h>
#endif
#ifndef INCLUDED_verb_eval_KnotMultiplicity
#include <verb/eval/KnotMultiplicity.h>
#endif
#ifndef INCLUDED_verb_eval_Modify
#include <verb/eval/Modify.h>
#endif
#ifndef INCLUDED_verb_eval_Tess
#include <verb/eval/Tess.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ddc72136fb266ff3_39_knotMultiplicities,"verb.eval.Analyze","knotMultiplicities",0x0a37df4a,"verb.eval.Analyze.knotMultiplicities","verb/eval/Analyze.hx",39,0xfbb34535)
HX_LOCAL_STACK_FRAME(_hx_pos_ddc72136fb266ff3_68_isRationalSurfaceClosed,"verb.eval.Analyze","isRationalSurfaceClosed",0xc31683fc,"verb.eval.Analyze.isRationalSurfaceClosed","verb/eval/Analyze.hx",68,0xfbb34535)
HX_LOCAL_STACK_FRAME(_hx_pos_ddc72136fb266ff3_91_rationalSurfaceClosestPoint,"verb.eval.Analyze","rationalSurfaceClosestPoint",0x063ea491,"verb.eval.Analyze.rationalSurfaceClosestPoint","verb/eval/Analyze.hx",91,0xfbb34535)
HX_LOCAL_STACK_FRAME(_hx_pos_ddc72136fb266ff3_183_rationalSurfaceClosestParam,"verb.eval.Analyze","rationalSurfaceClosestParam",0xfd0470ce,"verb.eval.Analyze.rationalSurfaceClosestParam","verb/eval/Analyze.hx",183,0xfbb34535)
HX_LOCAL_STACK_FRAME(_hx_pos_ddc72136fb266ff3_186_rationalSurfaceClosestParam,"verb.eval.Analyze","rationalSurfaceClosestParam",0xfd0470ce,"verb.eval.Analyze.rationalSurfaceClosestParam","verb/eval/Analyze.hx",186,0xfbb34535)
HX_LOCAL_STACK_FRAME(_hx_pos_ddc72136fb266ff3_107_rationalSurfaceClosestParam,"verb.eval.Analyze","rationalSurfaceClosestParam",0xfd0470ce,"verb.eval.Analyze.rationalSurfaceClosestParam","verb/eval/Analyze.hx",107,0xfbb34535)
HX_LOCAL_STACK_FRAME(_hx_pos_ddc72136fb266ff3_309_rationalCurveClosestPoint,"verb.eval.Analyze","rationalCurveClosestPoint",0x31c458d3,"verb.eval.Analyze.rationalCurveClosestPoint","verb/eval/Analyze.hx",309,0xfbb34535)
HX_LOCAL_STACK_FRAME(_hx_pos_ddc72136fb266ff3_389_rationalCurveClosestParam,"verb.eval.Analyze","rationalCurveClosestParam",0x288a2510,"verb.eval.Analyze.rationalCurveClosestParam","verb/eval/Analyze.hx",389,0xfbb34535)
HX_LOCAL_STACK_FRAME(_hx_pos_ddc72136fb266ff3_392_rationalCurveClosestParam,"verb.eval.Analyze","rationalCurveClosestParam",0x288a2510,"verb.eval.Analyze.rationalCurveClosestParam","verb/eval/Analyze.hx",392,0xfbb34535)
HX_LOCAL_STACK_FRAME(_hx_pos_ddc72136fb266ff3_323_rationalCurveClosestParam,"verb.eval.Analyze","rationalCurveClosestParam",0x288a2510,"verb.eval.Analyze.rationalCurveClosestParam","verb/eval/Analyze.hx",323,0xfbb34535)
HX_LOCAL_STACK_FRAME(_hx_pos_ddc72136fb266ff3_471_rationalCurveParamAtArcLength,"verb.eval.Analyze","rationalCurveParamAtArcLength",0x81d90d74,"verb.eval.Analyze.rationalCurveParamAtArcLength","verb/eval/Analyze.hx",471,0xfbb34535)
HX_LOCAL_STACK_FRAME(_hx_pos_ddc72136fb266ff3_514_rationalBezierCurveParamAtArcLength,"verb.eval.Analyze","rationalBezierCurveParamAtArcLength",0x501b5695,"verb.eval.Analyze.rationalBezierCurveParamAtArcLength","verb/eval/Analyze.hx",514,0xfbb34535)
HX_LOCAL_STACK_FRAME(_hx_pos_ddc72136fb266ff3_559_rationalCurveArcLength,"verb.eval.Analyze","rationalCurveArcLength",0x958085bc,"verb.eval.Analyze.rationalCurveArcLength","verb/eval/Analyze.hx",559,0xfbb34535)
HX_LOCAL_STACK_FRAME(_hx_pos_ddc72136fb266ff3_588_rationalBezierCurveArcLength,"verb.eval.Analyze","rationalBezierCurveArcLength",0x9964e27b,"verb.eval.Analyze.rationalBezierCurveArcLength","verb/eval/Analyze.hx",588,0xfbb34535)
HX_LOCAL_STACK_FRAME(_hx_pos_ddc72136fb266ff3_610_boot,"verb.eval.Analyze","boot",0x66d49537,"verb.eval.Analyze.boot","verb/eval/Analyze.hx",610,0xfbb34535)
static const Float _hx_array_data_7d5eed89_25[] = {
	-0.5773502691896257645091487805019574556476,0.5773502691896257645091487805019574556476,
};
static const Float _hx_array_data_7d5eed89_26[] = {
	(Float)0,-0.7745966692414833770358530799564799221665,0.7745966692414833770358530799564799221665,
};
static const Float _hx_array_data_7d5eed89_27[] = {
	-0.3399810435848562648026657591032446872005,0.3399810435848562648026657591032446872005,-0.8611363115940525752239464888928095050957,0.8611363115940525752239464888928095050957,
};
static const Float _hx_array_data_7d5eed89_28[] = {
	(Float)0,-0.5384693101056830910363144207002088049672,0.5384693101056830910363144207002088049672,-0.9061798459386639927976268782993929651256,0.9061798459386639927976268782993929651256,
};
static const Float _hx_array_data_7d5eed89_29[] = {
	0.6612093864662645136613995950199053470064,-0.6612093864662645136613995950199053470064,-0.2386191860831969086305017216807119354186,0.2386191860831969086305017216807119354186,-0.9324695142031520278123015544939946091347,0.9324695142031520278123015544939946091347,
};
static const Float _hx_array_data_7d5eed89_30[] = {
	(Float)0,0.4058451513773971669066064120769614633473,-0.4058451513773971669066064120769614633473,-0.7415311855993944398638647732807884070741,0.7415311855993944398638647732807884070741,-0.9491079123427585245261896840478512624007,0.9491079123427585245261896840478512624007,
};
static const Float _hx_array_data_7d5eed89_31[] = {
	-0.1834346424956498049394761423601839806667,0.1834346424956498049394761423601839806667,-0.5255324099163289858177390491892463490419,0.5255324099163289858177390491892463490419,-0.7966664774136267395915539364758304368371,0.7966664774136267395915539364758304368371,-0.9602898564975362316835608685694729904282,0.9602898564975362316835608685694729904282,
};
static const Float _hx_array_data_7d5eed89_32[] = {
	(Float)0,-0.8360311073266357942994297880697348765441,0.8360311073266357942994297880697348765441,-0.9681602395076260898355762029036728700494,0.9681602395076260898355762029036728700494,-0.3242534234038089290385380146433366085719,0.3242534234038089290385380146433366085719,-0.6133714327005903973087020393414741847857,0.6133714327005903973087020393414741847857,
};
static const Float _hx_array_data_7d5eed89_33[] = {
	-0.1488743389816312108848260011297199846175,0.1488743389816312108848260011297199846175,-0.4333953941292471907992659431657841622000,0.4333953941292471907992659431657841622000,-0.6794095682990244062343273651148735757692,0.6794095682990244062343273651148735757692,-0.8650633666889845107320966884234930485275,0.8650633666889845107320966884234930485275,-0.9739065285171717200779640120844520534282,0.9739065285171717200779640120844520534282,
};
static const Float _hx_array_data_7d5eed89_34[] = {
	(Float)0,-0.2695431559523449723315319854008615246796,0.2695431559523449723315319854008615246796,-0.5190961292068118159257256694586095544802,0.5190961292068118159257256694586095544802,-0.7301520055740493240934162520311534580496,0.7301520055740493240934162520311534580496,-0.8870625997680952990751577693039272666316,0.8870625997680952990751577693039272666316,-0.9782286581460569928039380011228573907714,0.9782286581460569928039380011228573907714,
};
static const Float _hx_array_data_7d5eed89_35[] = {
	-0.1252334085114689154724413694638531299833,0.1252334085114689154724413694638531299833,-0.3678314989981801937526915366437175612563,0.3678314989981801937526915366437175612563,-0.5873179542866174472967024189405342803690,0.5873179542866174472967024189405342803690,-0.7699026741943046870368938332128180759849,0.7699026741943046870368938332128180759849,-0.9041172563704748566784658661190961925375,0.9041172563704748566784658661190961925375,-0.9815606342467192506905490901492808229601,0.9815606342467192506905490901492808229601,
};
static const Float _hx_array_data_7d5eed89_36[] = {
	(Float)0,-0.2304583159551347940655281210979888352115,0.2304583159551347940655281210979888352115,-0.4484927510364468528779128521276398678019,0.4484927510364468528779128521276398678019,-0.6423493394403402206439846069955156500716,0.6423493394403402206439846069955156500716,-0.8015780907333099127942064895828598903056,0.8015780907333099127942064895828598903056,-0.9175983992229779652065478365007195123904,0.9175983992229779652065478365007195123904,-0.9841830547185881494728294488071096110649,0.9841830547185881494728294488071096110649,
};
static const Float _hx_array_data_7d5eed89_37[] = {
	-0.1080549487073436620662446502198347476119,0.1080549487073436620662446502198347476119,-0.3191123689278897604356718241684754668342,0.3191123689278897604356718241684754668342,-0.5152486363581540919652907185511886623088,0.5152486363581540919652907185511886623088,-0.6872929048116854701480198030193341375384,0.6872929048116854701480198030193341375384,-0.8272013150697649931897947426503949610397,0.8272013150697649931897947426503949610397,-0.9284348836635735173363911393778742644770,0.9284348836635735173363911393778742644770,-0.9862838086968123388415972667040528016760,0.9862838086968123388415972667040528016760,
};
static const Float _hx_array_data_7d5eed89_38[] = {
	(Float)0,-0.2011940939974345223006283033945962078128,0.2011940939974345223006283033945962078128,-0.3941513470775633698972073709810454683627,0.3941513470775633698972073709810454683627,-0.5709721726085388475372267372539106412383,0.5709721726085388475372267372539106412383,-0.7244177313601700474161860546139380096308,0.7244177313601700474161860546139380096308,-0.8482065834104272162006483207742168513662,0.8482065834104272162006483207742168513662,-0.9372733924007059043077589477102094712439,0.9372733924007059043077589477102094712439,-0.9879925180204854284895657185866125811469,0.9879925180204854284895657185866125811469,
};
static const Float _hx_array_data_7d5eed89_39[] = {
	-0.0950125098376374401853193354249580631303,0.0950125098376374401853193354249580631303,-0.2816035507792589132304605014604961064860,0.2816035507792589132304605014604961064860,-0.4580167776572273863424194429835775735400,0.4580167776572273863424194429835775735400,-0.6178762444026437484466717640487910189918,0.6178762444026437484466717640487910189918,-0.7554044083550030338951011948474422683538,0.7554044083550030338951011948474422683538,-0.8656312023878317438804678977123931323873,0.8656312023878317438804678977123931323873,-0.9445750230732325760779884155346083450911,0.9445750230732325760779884155346083450911,-0.9894009349916499325961541734503326274262,0.9894009349916499325961541734503326274262,
};
static const Float _hx_array_data_7d5eed89_40[] = {
	(Float)0,-0.1784841814958478558506774936540655574754,0.1784841814958478558506774936540655574754,-0.3512317634538763152971855170953460050405,0.3512317634538763152971855170953460050405,-0.5126905370864769678862465686295518745829,0.5126905370864769678862465686295518745829,-0.6576711592166907658503022166430023351478,0.6576711592166907658503022166430023351478,-0.7815140038968014069252300555204760502239,0.7815140038968014069252300555204760502239,-0.8802391537269859021229556944881556926234,0.8802391537269859021229556944881556926234,-0.9506755217687677612227169578958030214433,0.9506755217687677612227169578958030214433,-0.9905754753144173356754340199406652765077,0.9905754753144173356754340199406652765077,
};
static const Float _hx_array_data_7d5eed89_41[] = {
	-0.0847750130417353012422618529357838117333,0.0847750130417353012422618529357838117333,-0.2518862256915055095889728548779112301628,0.2518862256915055095889728548779112301628,-0.4117511614628426460359317938330516370789,0.4117511614628426460359317938330516370789,-0.5597708310739475346078715485253291369276,0.5597708310739475346078715485253291369276,-0.6916870430603532078748910812888483894522,0.6916870430603532078748910812888483894522,-0.8037049589725231156824174550145907971032,0.8037049589725231156824174550145907971032,-0.8926024664975557392060605911271455154078,0.8926024664975557392060605911271455154078,-0.9558239495713977551811958929297763099728,0.9558239495713977551811958929297763099728,-0.9915651684209309467300160047061507702525,0.9915651684209309467300160047061507702525,
};
static const Float _hx_array_data_7d5eed89_42[] = {
	(Float)0,-0.1603586456402253758680961157407435495048,0.1603586456402253758680961157407435495048,-0.3165640999636298319901173288498449178922,0.3165640999636298319901173288498449178922,-0.4645707413759609457172671481041023679762,0.4645707413759609457172671481041023679762,-0.6005453046616810234696381649462392798683,0.6005453046616810234696381649462392798683,-0.7209661773352293786170958608237816296571,0.7209661773352293786170958608237816296571,-0.8227146565371428249789224867127139017745,0.8227146565371428249789224867127139017745,-0.9031559036148179016426609285323124878093,0.9031559036148179016426609285323124878093,-0.9602081521348300308527788406876515266150,0.9602081521348300308527788406876515266150,-0.9924068438435844031890176702532604935893,0.9924068438435844031890176702532604935893,
};
static const Float _hx_array_data_7d5eed89_43[] = {
	-0.0765265211334973337546404093988382110047,0.0765265211334973337546404093988382110047,-0.2277858511416450780804961953685746247430,0.2277858511416450780804961953685746247430,-0.3737060887154195606725481770249272373957,0.3737060887154195606725481770249272373957,-0.5108670019508270980043640509552509984254,0.5108670019508270980043640509552509984254,-0.6360536807265150254528366962262859367433,0.6360536807265150254528366962262859367433,-0.7463319064601507926143050703556415903107,0.7463319064601507926143050703556415903107,-0.8391169718222188233945290617015206853296,0.8391169718222188233945290617015206853296,-0.9122344282513259058677524412032981130491,0.9122344282513259058677524412032981130491,-0.9639719272779137912676661311972772219120,0.9639719272779137912676661311972772219120,-0.9931285991850949247861223884713202782226,0.9931285991850949247861223884713202782226,
};
static const Float _hx_array_data_7d5eed89_44[] = {
	(Float)0,-0.1455618541608950909370309823386863301163,0.1455618541608950909370309823386863301163,-0.2880213168024010966007925160646003199090,0.2880213168024010966007925160646003199090,-0.4243421202074387835736688885437880520964,0.4243421202074387835736688885437880520964,-0.5516188358872198070590187967243132866220,0.5516188358872198070590187967243132866220,-0.6671388041974123193059666699903391625970,0.6671388041974123193059666699903391625970,-0.7684399634756779086158778513062280348209,0.7684399634756779086158778513062280348209,-0.8533633645833172836472506385875676702761,0.8533633645833172836472506385875676702761,-0.9200993341504008287901871337149688941591,0.9200993341504008287901871337149688941591,-0.9672268385663062943166222149076951614246,0.9672268385663062943166222149076951614246,-0.9937521706203895002602420359379409291933,0.9937521706203895002602420359379409291933,
};
static const Float _hx_array_data_7d5eed89_45[] = {
	-0.0697392733197222212138417961186280818222,0.0697392733197222212138417961186280818222,-0.2078604266882212854788465339195457342156,0.2078604266882212854788465339195457342156,-0.3419358208920842251581474204273796195591,0.3419358208920842251581474204273796195591,-0.4693558379867570264063307109664063460953,0.4693558379867570264063307109664063460953,-0.5876404035069115929588769276386473488776,0.5876404035069115929588769276386473488776,-0.6944872631866827800506898357622567712673,0.6944872631866827800506898357622567712673,-0.7878168059792081620042779554083515213881,0.7878168059792081620042779554083515213881,-0.8658125777203001365364256370193787290847,0.8658125777203001365364256370193787290847,-0.9269567721871740005206929392590531966353,0.9269567721871740005206929392590531966353,-0.9700604978354287271239509867652687108059,0.9700604978354287271239509867652687108059,-0.9942945854823992920730314211612989803930,0.9942945854823992920730314211612989803930,
};
static const Float _hx_array_data_7d5eed89_46[] = {
	(Float)0,-0.1332568242984661109317426822417661370104,0.1332568242984661109317426822417661370104,-0.2641356809703449305338695382833096029790,0.2641356809703449305338695382833096029790,-0.3903010380302908314214888728806054585780,0.3903010380302908314214888728806054585780,-0.5095014778460075496897930478668464305448,0.5095014778460075496897930478668464305448,-0.6196098757636461563850973116495956533871,0.6196098757636461563850973116495956533871,-0.7186613631319501944616244837486188483299,0.7186613631319501944616244837486188483299,-0.8048884016188398921511184069967785579414,0.8048884016188398921511184069967785579414,-0.8767523582704416673781568859341456716389,0.8767523582704416673781568859341456716389,-0.9329710868260161023491969890384229782357,0.9329710868260161023491969890384229782357,-0.9725424712181152319560240768207773751816,0.9725424712181152319560240768207773751816,-0.9947693349975521235239257154455743605736,0.9947693349975521235239257154455743605736,
};
static const Float _hx_array_data_7d5eed89_47[] = {
	-0.0640568928626056260850430826247450385909,0.0640568928626056260850430826247450385909,-0.1911188674736163091586398207570696318404,0.1911188674736163091586398207570696318404,-0.3150426796961633743867932913198102407864,0.3150426796961633743867932913198102407864,-0.4337935076260451384870842319133497124524,0.4337935076260451384870842319133497124524,-0.5454214713888395356583756172183723700107,0.5454214713888395356583756172183723700107,-0.6480936519369755692524957869107476266696,0.6480936519369755692524957869107476266696,-0.7401241915785543642438281030999784255232,0.7401241915785543642438281030999784255232,-0.8200019859739029219539498726697452080761,0.8200019859739029219539498726697452080761,-0.8864155270044010342131543419821967550873,0.8864155270044010342131543419821967550873,-0.9382745520027327585236490017087214496548,0.9382745520027327585236490017087214496548,-0.9747285559713094981983919930081690617411,0.9747285559713094981983919930081690617411,-0.9951872199970213601799974097007368118745,0.9951872199970213601799974097007368118745,
};
HX_LOCAL_STACK_FRAME(_hx_pos_ddc72136fb266ff3_638_boot,"verb.eval.Analyze","boot",0x66d49537,"verb.eval.Analyze.boot","verb/eval/Analyze.hx",638,0xfbb34535)
static const Float _hx_array_data_7d5eed89_49[] = {
	1.0,1.0,
};
static const Float _hx_array_data_7d5eed89_50[] = {
	0.8888888888888888888888888888888888888888,0.5555555555555555555555555555555555555555,0.5555555555555555555555555555555555555555,
};
static const Float _hx_array_data_7d5eed89_51[] = {
	0.6521451548625461426269360507780005927646,0.6521451548625461426269360507780005927646,0.3478548451374538573730639492219994072353,0.3478548451374538573730639492219994072353,
};
static const Float _hx_array_data_7d5eed89_52[] = {
	0.5688888888888888888888888888888888888888,0.4786286704993664680412915148356381929122,0.4786286704993664680412915148356381929122,0.2369268850561890875142640407199173626432,0.2369268850561890875142640407199173626432,
};
static const Float _hx_array_data_7d5eed89_53[] = {
	0.3607615730481386075698335138377161116615,0.3607615730481386075698335138377161116615,0.4679139345726910473898703439895509948116,0.4679139345726910473898703439895509948116,0.1713244923791703450402961421727328935268,0.1713244923791703450402961421727328935268,
};
static const Float _hx_array_data_7d5eed89_54[] = {
	0.4179591836734693877551020408163265306122,0.3818300505051189449503697754889751338783,0.3818300505051189449503697754889751338783,0.2797053914892766679014677714237795824869,0.2797053914892766679014677714237795824869,0.1294849661688696932706114326790820183285,0.1294849661688696932706114326790820183285,
};
static const Float _hx_array_data_7d5eed89_55[] = {
	0.3626837833783619829651504492771956121941,0.3626837833783619829651504492771956121941,0.3137066458778872873379622019866013132603,0.3137066458778872873379622019866013132603,0.2223810344533744705443559944262408844301,0.2223810344533744705443559944262408844301,0.1012285362903762591525313543099621901153,0.1012285362903762591525313543099621901153,
};
static const Float _hx_array_data_7d5eed89_56[] = {
	0.3302393550012597631645250692869740488788,0.1806481606948574040584720312429128095143,0.1806481606948574040584720312429128095143,0.0812743883615744119718921581105236506756,0.0812743883615744119718921581105236506756,0.3123470770400028400686304065844436655987,0.3123470770400028400686304065844436655987,0.2606106964029354623187428694186328497718,0.2606106964029354623187428694186328497718,
};
static const Float _hx_array_data_7d5eed89_57[] = {
	0.2955242247147528701738929946513383294210,0.2955242247147528701738929946513383294210,0.2692667193099963550912269215694693528597,0.2692667193099963550912269215694693528597,0.2190863625159820439955349342281631924587,0.2190863625159820439955349342281631924587,0.1494513491505805931457763396576973324025,0.1494513491505805931457763396576973324025,0.0666713443086881375935688098933317928578,0.0666713443086881375935688098933317928578,
};
static const Float _hx_array_data_7d5eed89_58[] = {
	0.2729250867779006307144835283363421891560,0.2628045445102466621806888698905091953727,0.2628045445102466621806888698905091953727,0.2331937645919904799185237048431751394317,0.2331937645919904799185237048431751394317,0.1862902109277342514260976414316558916912,0.1862902109277342514260976414316558916912,0.1255803694649046246346942992239401001976,0.1255803694649046246346942992239401001976,0.0556685671161736664827537204425485787285,0.0556685671161736664827537204425485787285,
};
static const Float _hx_array_data_7d5eed89_59[] = {
	0.2491470458134027850005624360429512108304,0.2491470458134027850005624360429512108304,0.2334925365383548087608498989248780562594,0.2334925365383548087608498989248780562594,0.2031674267230659217490644558097983765065,0.2031674267230659217490644558097983765065,0.1600783285433462263346525295433590718720,0.1600783285433462263346525295433590718720,0.1069393259953184309602547181939962242145,0.1069393259953184309602547181939962242145,0.0471753363865118271946159614850170603170,0.0471753363865118271946159614850170603170,
};
static const Float _hx_array_data_7d5eed89_60[] = {
	0.2325515532308739101945895152688359481566,0.2262831802628972384120901860397766184347,0.2262831802628972384120901860397766184347,0.2078160475368885023125232193060527633865,0.2078160475368885023125232193060527633865,0.1781459807619457382800466919960979955128,0.1781459807619457382800466919960979955128,0.1388735102197872384636017768688714676218,0.1388735102197872384636017768688714676218,0.0921214998377284479144217759537971209236,0.0921214998377284479144217759537971209236,0.0404840047653158795200215922009860600419,0.0404840047653158795200215922009860600419,
};
static const Float _hx_array_data_7d5eed89_61[] = {
	0.2152638534631577901958764433162600352749,0.2152638534631577901958764433162600352749,0.2051984637212956039659240656612180557103,0.2051984637212956039659240656612180557103,0.1855383974779378137417165901251570362489,0.1855383974779378137417165901251570362489,0.1572031671581935345696019386238421566056,0.1572031671581935345696019386238421566056,0.1215185706879031846894148090724766259566,0.1215185706879031846894148090724766259566,0.0801580871597602098056332770628543095836,0.0801580871597602098056332770628543095836,0.0351194603317518630318328761381917806197,0.0351194603317518630318328761381917806197,
};
static const Float _hx_array_data_7d5eed89_62[] = {
	0.2025782419255612728806201999675193148386,0.1984314853271115764561183264438393248186,0.1984314853271115764561183264438393248186,0.1861610000155622110268005618664228245062,0.1861610000155622110268005618664228245062,0.1662692058169939335532008604812088111309,0.1662692058169939335532008604812088111309,0.1395706779261543144478047945110283225208,0.1395706779261543144478047945110283225208,0.1071592204671719350118695466858693034155,0.1071592204671719350118695466858693034155,0.0703660474881081247092674164506673384667,0.0703660474881081247092674164506673384667,0.0307532419961172683546283935772044177217,0.0307532419961172683546283935772044177217,
};
static const Float _hx_array_data_7d5eed89_63[] = {
	0.1894506104550684962853967232082831051469,0.1894506104550684962853967232082831051469,0.1826034150449235888667636679692199393835,0.1826034150449235888667636679692199393835,0.1691565193950025381893120790303599622116,0.1691565193950025381893120790303599622116,0.1495959888165767320815017305474785489704,0.1495959888165767320815017305474785489704,0.1246289712555338720524762821920164201448,0.1246289712555338720524762821920164201448,0.0951585116824927848099251076022462263552,0.0951585116824927848099251076022462263552,0.0622535239386478928628438369943776942749,0.0622535239386478928628438369943776942749,0.0271524594117540948517805724560181035122,0.0271524594117540948517805724560181035122,
};
static const Float _hx_array_data_7d5eed89_64[] = {
	0.1794464703562065254582656442618856214487,0.1765627053669926463252709901131972391509,0.1765627053669926463252709901131972391509,0.1680041021564500445099706637883231550211,0.1680041021564500445099706637883231550211,0.1540457610768102880814315948019586119404,0.1540457610768102880814315948019586119404,0.1351363684685254732863199817023501973721,0.1351363684685254732863199817023501973721,0.1118838471934039710947883856263559267358,0.1118838471934039710947883856263559267358,0.0850361483171791808835353701910620738504,0.0850361483171791808835353701910620738504,0.0554595293739872011294401653582446605128,0.0554595293739872011294401653582446605128,0.0241483028685479319601100262875653246916,0.0241483028685479319601100262875653246916,
};
static const Float _hx_array_data_7d5eed89_65[] = {
	0.1691423829631435918406564701349866103341,0.1691423829631435918406564701349866103341,0.1642764837458327229860537764659275904123,0.1642764837458327229860537764659275904123,0.1546846751262652449254180038363747721932,0.1546846751262652449254180038363747721932,0.1406429146706506512047313037519472280955,0.1406429146706506512047313037519472280955,0.1225552067114784601845191268002015552281,0.1225552067114784601845191268002015552281,0.1009420441062871655628139849248346070628,0.1009420441062871655628139849248346070628,0.0764257302548890565291296776166365256053,0.0764257302548890565291296776166365256053,0.0497145488949697964533349462026386416808,0.0497145488949697964533349462026386416808,0.0216160135264833103133427102664524693876,0.0216160135264833103133427102664524693876,
};
static const Float _hx_array_data_7d5eed89_66[] = {
	0.1610544498487836959791636253209167350399,0.1589688433939543476499564394650472016787,0.1589688433939543476499564394650472016787,0.1527660420658596667788554008976629984610,0.1527660420658596667788554008976629984610,0.1426067021736066117757461094419029724756,0.1426067021736066117757461094419029724756,0.1287539625393362276755157848568771170558,0.1287539625393362276755157848568771170558,0.1115666455473339947160239016817659974813,0.1115666455473339947160239016817659974813,0.0914900216224499994644620941238396526609,0.0914900216224499994644620941238396526609,0.0690445427376412265807082580060130449618,0.0690445427376412265807082580060130449618,0.0448142267656996003328381574019942119517,0.0448142267656996003328381574019942119517,0.0194617882297264770363120414644384357529,0.0194617882297264770363120414644384357529,
};
static const Float _hx_array_data_7d5eed89_67[] = {
	0.1527533871307258506980843319550975934919,0.1527533871307258506980843319550975934919,0.1491729864726037467878287370019694366926,0.1491729864726037467878287370019694366926,0.1420961093183820513292983250671649330345,0.1420961093183820513292983250671649330345,0.1316886384491766268984944997481631349161,0.1316886384491766268984944997481631349161,0.1181945319615184173123773777113822870050,0.1181945319615184173123773777113822870050,0.1019301198172404350367501354803498761666,0.1019301198172404350367501354803498761666,0.0832767415767047487247581432220462061001,0.0832767415767047487247581432220462061001,0.0626720483341090635695065351870416063516,0.0626720483341090635695065351870416063516,0.0406014298003869413310399522749321098790,0.0406014298003869413310399522749321098790,0.0176140071391521183118619623518528163621,0.0176140071391521183118619623518528163621,
};
static const Float _hx_array_data_7d5eed89_68[] = {
	0.1460811336496904271919851476833711882448,0.1445244039899700590638271665537525436099,0.1445244039899700590638271665537525436099,0.1398873947910731547221334238675831108927,0.1398873947910731547221334238675831108927,0.1322689386333374617810525744967756043290,0.1322689386333374617810525744967756043290,0.1218314160537285341953671771257335983563,0.1218314160537285341953671771257335983563,0.1087972991671483776634745780701056420336,0.1087972991671483776634745780701056420336,0.0934444234560338615532897411139320884835,0.0934444234560338615532897411139320884835,0.0761001136283793020170516533001831792261,0.0761001136283793020170516533001831792261,0.0571344254268572082836358264724479574912,0.0571344254268572082836358264724479574912,0.0369537897708524937999506682993296661889,0.0369537897708524937999506682993296661889,0.0160172282577743333242246168584710152658,0.0160172282577743333242246168584710152658,
};
static const Float _hx_array_data_7d5eed89_69[] = {
	0.1392518728556319933754102483418099578739,0.1392518728556319933754102483418099578739,0.1365414983460151713525738312315173965863,0.1365414983460151713525738312315173965863,0.1311735047870623707329649925303074458757,0.1311735047870623707329649925303074458757,0.1232523768105124242855609861548144719594,0.1232523768105124242855609861548144719594,0.1129322960805392183934006074217843191142,0.1129322960805392183934006074217843191142,0.1004141444428809649320788378305362823508,0.1004141444428809649320788378305362823508,0.0859416062170677274144436813727028661891,0.0859416062170677274144436813727028661891,0.0697964684245204880949614189302176573987,0.0697964684245204880949614189302176573987,0.0522933351526832859403120512732112561121,0.0522933351526832859403120512732112561121,0.0337749015848141547933022468659129013491,0.0337749015848141547933022468659129013491,0.0146279952982722006849910980471854451902,0.0146279952982722006849910980471854451902,
};
static const Float _hx_array_data_7d5eed89_70[] = {
	0.1336545721861061753514571105458443385831,0.1324620394046966173716424647033169258050,0.1324620394046966173716424647033169258050,0.1289057221880821499785953393997936532597,0.1289057221880821499785953393997936532597,0.1230490843067295304675784006720096548158,0.1230490843067295304675784006720096548158,0.1149966402224113649416435129339613014914,0.1149966402224113649416435129339613014914,0.1048920914645414100740861850147438548584,0.1048920914645414100740861850147438548584,0.0929157660600351474770186173697646486034,0.0929157660600351474770186173697646486034,0.0792814117767189549228925247420432269137,0.0792814117767189549228925247420432269137,0.0642324214085258521271696151589109980391,0.0642324214085258521271696151589109980391,0.0480376717310846685716410716320339965612,0.0480376717310846685716410716320339965612,0.0309880058569794443106942196418845053837,0.0309880058569794443106942196418845053837,0.0134118594871417720813094934586150649766,0.0134118594871417720813094934586150649766,
};
static const Float _hx_array_data_7d5eed89_71[] = {
	0.1279381953467521569740561652246953718517,0.1279381953467521569740561652246953718517,0.1258374563468282961213753825111836887264,0.1258374563468282961213753825111836887264,0.1216704729278033912044631534762624256070,0.1216704729278033912044631534762624256070,0.1155056680537256013533444839067835598622,0.1155056680537256013533444839067835598622,0.1074442701159656347825773424466062227946,0.1074442701159656347825773424466062227946,0.0976186521041138882698806644642471544279,0.0976186521041138882698806644642471544279,0.0861901615319532759171852029837426671850,0.0861901615319532759171852029837426671850,0.0733464814110803057340336152531165181193,0.0733464814110803057340336152531165181193,0.0592985849154367807463677585001085845412,0.0592985849154367807463677585001085845412,0.0442774388174198061686027482113382288593,0.0442774388174198061686027482113382288593,0.0285313886289336631813078159518782864491,0.0285313886289336631813078159518782864491,0.0123412297999871995468056670700372915759,0.0123412297999871995468056670700372915759,
};
namespace verb{
namespace eval{

void Analyze_obj::__construct() { }

Dynamic Analyze_obj::__CreateEmpty() { return new Analyze_obj; }

void *Analyze_obj::_hx_vtable = 0;

Dynamic Analyze_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Analyze_obj > _hx_result = new Analyze_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Analyze_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x57c7c72d;
}

::Array< ::Dynamic> Analyze_obj::knotMultiplicities(::Array< Float > knots){
            	HX_GC_STACKFRAME(&_hx_pos_ddc72136fb266ff3_39_knotMultiplicities)
HXLINE(  41)		::Array< ::Dynamic> mults = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::verb::eval::KnotMultiplicity_obj::__alloc( HX_CTX ,knots->__get(0),0));
HXLINE(  42)		 ::verb::eval::KnotMultiplicity curr = mults->__get(0).StaticCast<  ::verb::eval::KnotMultiplicity >();
HXLINE(  44)		{
HXLINE(  44)			int _g = 0;
HXDLIN(  44)			while((_g < knots->length)){
HXLINE(  44)				Float knot = knots->__get(_g);
HXDLIN(  44)				_g = (_g + 1);
HXLINE(  45)				if ((::Math_obj::abs((knot - curr->knot)) > ::verb::core::Constants_obj::EPSILON)) {
HXLINE(  46)					curr =  ::verb::eval::KnotMultiplicity_obj::__alloc( HX_CTX ,knot,0);
HXLINE(  47)					mults->push(curr);
            				}
HXLINE(  50)				curr->inc();
            			}
            		}
HXLINE(  53)		return mults;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Analyze_obj,knotMultiplicities,return )

bool Analyze_obj::isRationalSurfaceClosed( ::verb::core::NurbsSurfaceData surface,::hx::Null< bool >  __o_uDir){
            		bool uDir = __o_uDir.Default(true);
            	HX_STACKFRAME(&_hx_pos_ddc72136fb266ff3_68_isRationalSurfaceClosed)
HXLINE(  70)		::Array< ::Dynamic> cpts;
HXDLIN(  70)		if (uDir) {
HXLINE(  70)			cpts = surface->controlPoints;
            		}
            		else {
HXLINE(  70)			cpts = ::verb::core::Mat_obj::transposeN(surface->controlPoints);
            		}
HXLINE(  72)		{
HXLINE(  72)			int _g = 0;
HXDLIN(  72)			int _g1 = cpts->__get(0).StaticCast< ::Array< ::Dynamic> >()->length;
HXDLIN(  72)			while((_g < _g1)){
HXLINE(  72)				_g = (_g + 1);
HXDLIN(  72)				int i = (_g - 1);
HXLINE(  73)				::Array< Float > test = ( (::Array< Float >)(::verb::core::ArrayExtensions_obj::first(cpts)->__GetItem(i)) );
HXDLIN(  73)				Float test1 = ::verb::core::Vec_obj::dist(test,( (::Array< Float >)(::verb::core::ArrayExtensions_obj::last(cpts)->__GetItem(i)) ));
HXDLIN(  73)				bool test2 = (test1 < ::verb::core::Constants_obj::EPSILON);
HXLINE(  74)				if (!(test2)) {
HXLINE(  74)					return false;
            				}
            			}
            		}
HXLINE(  77)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Analyze_obj,isRationalSurfaceClosed,return )

::Array< Float > Analyze_obj::rationalSurfaceClosestPoint( ::verb::core::NurbsSurfaceData surface,::Array< Float > p){
            	HX_STACKFRAME(&_hx_pos_ddc72136fb266ff3_91_rationalSurfaceClosestPoint)
HXLINE(  92)		::Array< Float > uv = ::verb::eval::Analyze_obj::rationalSurfaceClosestParam(surface,p);
HXLINE(  93)		return ::verb::eval::Eval_obj::rationalSurfacePoint(surface,uv->__get(0),uv->__get(1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Analyze_obj,rationalSurfaceClosestPoint,return )

::Array< Float > Analyze_obj::rationalSurfaceClosestParam( ::verb::core::NurbsSurfaceData surface,::Array< Float > p){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::verb::core::NurbsSurfaceData,surface) HXARGC(1)
            		::Array< ::Dynamic> _hx_run(::Array< Float > uv){
            			HX_GC_STACKFRAME(&_hx_pos_ddc72136fb266ff3_183_rationalSurfaceClosestParam)
HXLINE( 183)			return ::verb::eval::Eval_obj::rationalSurfaceDerivatives(surface,uv->__get(0),uv->__get(1),2);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            		::Array< Float > _hx_run(::Array< Float > uv,::Array< ::Dynamic> e,::Array< Float > r){
            			HX_GC_STACKFRAME(&_hx_pos_ddc72136fb266ff3_186_rationalSurfaceClosestParam)
HXLINE( 191)			::Array< Float > Su = e->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >();
HXLINE( 192)			::Array< Float > Sv = e->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >();
HXLINE( 194)			::Array< Float > Suu = e->__get(2).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >();
HXLINE( 195)			::Array< Float > Svv = e->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(2).StaticCast< ::Array< Float > >();
HXLINE( 197)			::Array< Float > Suv = e->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >();
HXLINE( 198)			::Array< Float > Svu = e->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >();
HXLINE( 200)			Float f = ::verb::core::Vec_obj::dot(Su,r);
HXLINE( 201)			Float g = ::verb::core::Vec_obj::dot(Sv,r);
HXLINE( 203)			::Array< Float > k = ::Array_obj< Float >::__new(2)->init(0,-(f))->init(1,-(g));
HXLINE( 205)			Float J00 = ::verb::core::Vec_obj::dot(Su,Su);
HXDLIN( 205)			Float J001 = (J00 + ::verb::core::Vec_obj::dot(Suu,r));
HXLINE( 206)			Float J01 = ::verb::core::Vec_obj::dot(Su,Sv);
HXDLIN( 206)			Float J011 = (J01 + ::verb::core::Vec_obj::dot(Suv,r));
HXLINE( 207)			Float J10 = ::verb::core::Vec_obj::dot(Su,Sv);
HXDLIN( 207)			Float J101 = (J10 + ::verb::core::Vec_obj::dot(Svu,r));
HXLINE( 208)			Float J11 = ::verb::core::Vec_obj::dot(Sv,Sv);
HXDLIN( 208)			Float J111 = (J11 + ::verb::core::Vec_obj::dot(Svv,r));
HXLINE( 210)			::Array< ::Dynamic> J = ::Array_obj< ::Dynamic>::__new(2)->init(0,::Array_obj< Float >::__new(2)->init(0,J001)->init(1,J011))->init(1,::Array_obj< Float >::__new(2)->init(0,J101)->init(1,J111));
HXLINE( 219)			::Array< Float > d = ::verb::core::Mat_obj::solve(J,k);
HXLINE( 221)			return ::verb::core::Vec_obj::add(d,uv);
            		}
            		HX_END_LOCAL_FUNC3(return)

            	HX_GC_STACKFRAME(&_hx_pos_ddc72136fb266ff3_107_rationalSurfaceClosestParam)
HXLINE( 151)		int maxits = 5;
HXLINE( 152)		int i = 0;
HXDLIN( 152)		::Array< ::Dynamic> e;
HXDLIN( 152)		Float eps1 = ((Float)0.0001);
HXDLIN( 152)		Float eps2 = ((Float)0.0005);
HXDLIN( 152)		::Array< Float > dif;
HXDLIN( 152)		Float minu = surface->knotsU->__get(0);
HXDLIN( 152)		Float maxu = ( (Float)(::verb::core::ArrayExtensions_obj::last(surface->knotsU)) );
HXDLIN( 152)		Float minv = surface->knotsV->__get(0);
HXDLIN( 152)		Float maxv = ( (Float)(::verb::core::ArrayExtensions_obj::last(surface->knotsV)) );
HXDLIN( 152)		bool closedu = ::verb::eval::Analyze_obj::isRationalSurfaceClosed(surface,null());
HXDLIN( 152)		bool closedv = ::verb::eval::Analyze_obj::isRationalSurfaceClosed(surface,false);
HXDLIN( 152)		::Array< Float > cuv;
HXLINE( 168)		 ::verb::core::NurbsSurfaceData surface1 = surface;
HXDLIN( 168)		 ::verb::core::MeshData tess = ::verb::eval::Tess_obj::rationalSurfaceAdaptive(surface1, ::verb::eval::AdaptiveRefinementOptions_obj::__alloc( HX_CTX ));
HXLINE( 170)		Float dmin = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 172)		{
HXLINE( 172)			int _g = 0;
HXDLIN( 172)			int _g1 = tess->points->length;
HXDLIN( 172)			while((_g < _g1)){
HXLINE( 172)				_g = (_g + 1);
HXDLIN( 172)				int i = (_g - 1);
HXLINE( 173)				::Array< Float > x = tess->points->__get(i).StaticCast< ::Array< Float > >();
HXLINE( 174)				Float d = ::verb::core::Vec_obj::normSquared(::verb::core::Vec_obj::sub(p,x));
HXLINE( 176)				if ((d < dmin)) {
HXLINE( 177)					dmin = d;
HXLINE( 178)					cuv = tess->uvs->__get(i).StaticCast< ::Array< Float > >();
            				}
            			}
            		}
HXLINE( 182)		 ::Dynamic f =  ::Dynamic(new _hx_Closure_0(surface));
HXLINE( 186)		 ::Dynamic n =  ::Dynamic(new _hx_Closure_1());
HXLINE( 225)		while((i < maxits)){
HXLINE( 227)			e = ( (::Array< ::Dynamic>)(f(cuv)) );
HXLINE( 228)			dif = ::verb::core::Vec_obj::sub(e->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >(),p);
HXLINE( 233)			Float c1v = ::verb::core::Vec_obj::norm(dif);
HXLINE( 246)			Float c2an = ::verb::core::Vec_obj::dot(e->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >(),dif);
HXLINE( 247)			Float c2ad = (::verb::core::Vec_obj::norm(e->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()) * c1v);
HXLINE( 249)			Float c2bn = ::verb::core::Vec_obj::dot(e->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >(),dif);
HXLINE( 250)			Float c2bd = (::verb::core::Vec_obj::norm(e->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()) * c1v);
HXLINE( 252)			Float c2av = (c2an / c2ad);
HXLINE( 253)			Float c2bv = (c2bn / c2bd);
HXLINE( 255)			bool c1 = (c1v < eps1);
HXLINE( 256)			bool c2a = (c2av < eps2);
HXLINE( 257)			bool c2b = (c2bv < eps2);
HXLINE( 260)			bool _hx_tmp;
HXDLIN( 260)			bool _hx_tmp1;
HXDLIN( 260)			if (c1) {
HXLINE( 260)				_hx_tmp1 = c2a;
            			}
            			else {
HXLINE( 260)				_hx_tmp1 = false;
            			}
HXDLIN( 260)			if (_hx_tmp1) {
HXLINE( 260)				_hx_tmp = c2b;
            			}
            			else {
HXLINE( 260)				_hx_tmp = false;
            			}
HXDLIN( 260)			if (_hx_tmp) {
HXLINE( 261)				return cuv;
            			}
HXLINE( 265)			::Array< Float > ct = ( (::Array< Float >)(n(cuv,e,dif)) );
HXLINE( 268)			if ((ct->__get(0) < minu)) {
HXLINE( 269)				if (closedu) {
HXLINE( 269)					ct = ::Array_obj< Float >::__new(2)->init(0,(maxu - (ct->__get(0) - minu)))->init(1,ct->__get(1));
            				}
            				else {
HXLINE( 269)					ct = ::Array_obj< Float >::__new(2)->init(0,(minu + ::verb::core::Constants_obj::EPSILON))->init(1,ct->__get(1));
            				}
            			}
            			else {
HXLINE( 270)				if ((ct->__get(0) > maxu)) {
HXLINE( 271)					if (closedu) {
HXLINE( 271)						ct = ::Array_obj< Float >::__new(2)->init(0,(minu + (ct->__get(0) - maxu)))->init(1,ct->__get(1));
            					}
            					else {
HXLINE( 271)						ct = ::Array_obj< Float >::__new(2)->init(0,(maxu - ::verb::core::Constants_obj::EPSILON))->init(1,ct->__get(1));
            					}
            				}
            			}
HXLINE( 274)			if ((ct->__get(1) < minv)) {
HXLINE( 275)				if (closedv) {
HXLINE( 275)					ct = ::Array_obj< Float >::__new(2)->init(0,ct->__get(0))->init(1,(maxv - (ct->__get(1) - minv)));
            				}
            				else {
HXLINE( 275)					ct = ::Array_obj< Float >::__new(2)->init(0,ct->__get(0))->init(1,(minv + ::verb::core::Constants_obj::EPSILON));
            				}
            			}
            			else {
HXLINE( 276)				if ((ct->__get(1) > maxv)) {
HXLINE( 277)					if (closedv) {
HXLINE( 277)						ct = ::Array_obj< Float >::__new(2)->init(0,ct->__get(0))->init(1,(minv + (ct->__get(0) - maxv)));
            					}
            					else {
HXLINE( 277)						ct = ::Array_obj< Float >::__new(2)->init(0,ct->__get(0))->init(1,(maxv - ::verb::core::Constants_obj::EPSILON));
            					}
            				}
            			}
HXLINE( 281)			Float c3v0 = ::verb::core::Vec_obj::norm(::verb::core::Vec_obj::mul((ct->__get(0) - cuv->__get(0)),e->__get(1).StaticCast< ::Array< ::Dynamic> >()->__get(0).StaticCast< ::Array< Float > >()));
HXLINE( 282)			Float c3v1 = ::verb::core::Vec_obj::norm(::verb::core::Vec_obj::mul((ct->__get(1) - cuv->__get(1)),e->__get(0).StaticCast< ::Array< ::Dynamic> >()->__get(1).StaticCast< ::Array< Float > >()));
HXLINE( 284)			if (((c3v0 + c3v1) < eps1)) {
HXLINE( 285)				return cuv;
            			}
HXLINE( 288)			cuv = ct;
HXLINE( 289)			i = (i + 1);
            		}
HXLINE( 293)		return cuv;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Analyze_obj,rationalSurfaceClosestParam,return )

::Array< Float > Analyze_obj::rationalCurveClosestPoint( ::verb::core::NurbsCurveData curve,::Array< Float > p){
            	HX_STACKFRAME(&_hx_pos_ddc72136fb266ff3_309_rationalCurveClosestPoint)
HXDLIN( 309)		return ::verb::eval::Eval_obj::rationalCurvePoint(curve,::verb::eval::Analyze_obj::rationalCurveClosestParam(curve,p));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Analyze_obj,rationalCurveClosestPoint,return )

Float Analyze_obj::rationalCurveClosestParam( ::verb::core::NurbsCurveData curve,::Array< Float > p){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::verb::core::NurbsCurveData,curve) HXARGC(1)
            		::Array< ::Dynamic> _hx_run(Float u){
            			HX_STACKFRAME(&_hx_pos_ddc72136fb266ff3_389_rationalCurveClosestParam)
HXLINE( 389)			return ::verb::eval::Eval_obj::rationalCurveDerivatives(curve,u,2);
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(3)
            		Float _hx_run(Float u,::Array< ::Dynamic> e,::Array< Float > d){
            			HX_STACKFRAME(&_hx_pos_ddc72136fb266ff3_392_rationalCurveClosestParam)
HXLINE( 394)			Float f = ::verb::core::Vec_obj::dot(e->__get(1).StaticCast< ::Array< Float > >(),d);
HXLINE( 397)			Float s0 = ::verb::core::Vec_obj::dot(e->__get(2).StaticCast< ::Array< Float > >(),d);
HXDLIN( 397)			Float s1 = ::verb::core::Vec_obj::dot(e->__get(1).StaticCast< ::Array< Float > >(),e->__get(1).StaticCast< ::Array< Float > >());
HXDLIN( 397)			Float df = (s0 + s1);
HXLINE( 401)			return (u - (f / df));
            		}
            		HX_END_LOCAL_FUNC3(return)

            	HX_STACKFRAME(&_hx_pos_ddc72136fb266ff3_323_rationalCurveClosestParam)
HXLINE( 355)		Float min = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 356)		Float u = ((Float)0.0);
HXLINE( 358)		::Array< ::Dynamic> pts = ::verb::eval::Tess_obj::rationalCurveRegularSample(curve,(curve->controlPoints->length * curve->degree),true);
HXLINE( 360)		{
HXLINE( 360)			int _g = 0;
HXDLIN( 360)			int _g1 = (pts->length - 1);
HXDLIN( 360)			while((_g < _g1)){
HXLINE( 360)				_g = (_g + 1);
HXDLIN( 360)				int i = (_g - 1);
HXLINE( 362)				Float u0 = pts->__get(i).StaticCast< ::Array< Float > >()->__get(0);
HXLINE( 363)				Float u1 = pts->__get((i + 1)).StaticCast< ::Array< Float > >()->__get(0);
HXLINE( 365)				::Array< Float > p0 = pts->__get(i).StaticCast< ::Array< Float > >()->slice(1,null());
HXLINE( 366)				::Array< Float > p1 = pts->__get((i + 1)).StaticCast< ::Array< Float > >()->slice(1,null());
HXLINE( 368)				 ::Dynamic proj = ::verb::core::Trig_obj::segmentClosestPoint(p,p0,p1,u0,u1);
HXLINE( 369)				Float d = ::verb::core::Vec_obj::norm(::verb::core::Vec_obj::sub(p,( (::Array< Float >)(proj->__Field(HX_("pt",04,62,00,00),::hx::paccDynamic)) )));
HXLINE( 371)				if ((d < min)) {
HXLINE( 372)					min = d;
HXLINE( 373)					u = ( (Float)(proj->__Field(HX_("u",75,00,00,00),::hx::paccDynamic)) );
            				}
            			}
            		}
HXLINE( 377)		int maxits = 5;
HXDLIN( 377)		int i = 0;
HXDLIN( 377)		::Array< ::Dynamic> e;
HXDLIN( 377)		Float eps1 = ((Float)0.0001);
HXDLIN( 377)		Float eps2 = ((Float)0.0005);
HXDLIN( 377)		::Array< Float > dif;
HXDLIN( 377)		Float minu = curve->knots->__get(0);
HXDLIN( 377)		Float maxu = ( (Float)(::verb::core::ArrayExtensions_obj::last(curve->knots)) );
HXLINE( 385)		::Array< Float > curve1 = curve->controlPoints->__get(0).StaticCast< ::Array< Float > >();
HXDLIN( 385)		Float closed = ::verb::core::Vec_obj::normSquared(::verb::core::Vec_obj::sub(curve1,( (::Array< Float >)(::verb::core::ArrayExtensions_obj::last(curve->controlPoints)) )));
HXLINE( 377)		bool closed1 = (closed < ::verb::core::Constants_obj::EPSILON);
HXDLIN( 377)		Float cu = u;
HXLINE( 388)		 ::Dynamic f =  ::Dynamic(new _hx_Closure_0(curve));
HXLINE( 392)		 ::Dynamic n =  ::Dynamic(new _hx_Closure_1());
HXLINE( 404)		while((i < maxits)){
HXLINE( 406)			e = ( (::Array< ::Dynamic>)(f(cu)) );
HXLINE( 407)			dif = ::verb::core::Vec_obj::sub(e->__get(0).StaticCast< ::Array< Float > >(),p);
HXLINE( 410)			Float c1v = ::verb::core::Vec_obj::norm(dif);
HXLINE( 415)			Float c2n = ::verb::core::Vec_obj::dot(e->__get(1).StaticCast< ::Array< Float > >(),dif);
HXLINE( 416)			Float c2d = (::verb::core::Vec_obj::norm(e->__get(1).StaticCast< ::Array< Float > >()) * c1v);
HXLINE( 418)			Float c2v = (c2n / c2d);
HXLINE( 420)			bool c1 = (c1v < eps1);
HXLINE( 421)			bool c2 = (::Math_obj::abs(c2v) < eps2);
HXLINE( 424)			bool _hx_tmp;
HXDLIN( 424)			if (c1) {
HXLINE( 424)				_hx_tmp = c2;
            			}
            			else {
HXLINE( 424)				_hx_tmp = false;
            			}
HXDLIN( 424)			if (_hx_tmp) {
HXLINE( 425)				return cu;
            			}
HXLINE( 428)			Float ct = ( (Float)(n(cu,e,dif)) );
HXLINE( 431)			if ((ct < minu)) {
HXLINE( 432)				if (closed1) {
HXLINE( 432)					ct = (maxu - (ct - minu));
            				}
            				else {
HXLINE( 432)					ct = minu;
            				}
            			}
            			else {
HXLINE( 433)				if ((ct > maxu)) {
HXLINE( 434)					if (closed1) {
HXLINE( 434)						ct = (minu + (ct - maxu));
            					}
            					else {
HXLINE( 434)						ct = maxu;
            					}
            				}
            			}
HXLINE( 438)			Float c3v = ::verb::core::Vec_obj::norm(::verb::core::Vec_obj::mul((ct - cu),e->__get(1).StaticCast< ::Array< Float > >()));
HXLINE( 440)			if ((c3v < eps1)) {
HXLINE( 441)				return cu;
            			}
HXLINE( 444)			cu = ct;
HXLINE( 445)			i = (i + 1);
            		}
HXLINE( 449)		return cu;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Analyze_obj,rationalCurveClosestParam,return )

Float Analyze_obj::rationalCurveParamAtArcLength( ::verb::core::NurbsCurveData curve,Float len,::hx::Null< Float >  __o_tol,::Array< ::Dynamic> beziers,::Array< Float > bezierLengths){
            		Float tol = __o_tol.Default(((Float)1e-3));
            	HX_STACKFRAME(&_hx_pos_ddc72136fb266ff3_471_rationalCurveParamAtArcLength)
HXLINE( 473)		if ((len < ::verb::core::Constants_obj::EPSILON)) {
HXLINE( 473)			return curve->knots->__get(0);
            		}
HXLINE( 475)		::Array< ::Dynamic> crvs;
HXDLIN( 475)		if (::hx::IsNotNull( beziers )) {
HXLINE( 475)			crvs = beziers;
            		}
            		else {
HXLINE( 475)			crvs = ::verb::eval::Modify_obj::decomposeCurveIntoBeziers(curve);
            		}
HXDLIN( 475)		int i = 0;
HXDLIN( 475)		 ::verb::core::NurbsCurveData cc = crvs->__get(i).StaticCast<  ::verb::core::NurbsCurveData >();
HXDLIN( 475)		Float cl = -(::verb::core::Constants_obj::EPSILON);
HXDLIN( 475)		::Array< Float > bezier_lengths;
HXLINE( 479)		if (::hx::IsNotNull( bezierLengths )) {
HXLINE( 475)			bezier_lengths = bezierLengths;
            		}
            		else {
HXLINE( 475)			bezier_lengths = ::Array_obj< Float >::__new(0);
            		}
HXLINE( 482)		while(true){
HXLINE( 482)			bool _hx_tmp;
HXDLIN( 482)			if ((cl < len)) {
HXLINE( 482)				_hx_tmp = (i < crvs->length);
            			}
            			else {
HXLINE( 482)				_hx_tmp = false;
            			}
HXDLIN( 482)			if (!(_hx_tmp)) {
HXLINE( 482)				goto _hx_goto_16;
            			}
HXLINE( 484)			Float _hx_tmp1;
HXDLIN( 484)			if ((i < bezier_lengths->length)) {
HXLINE( 484)				_hx_tmp1 = bezier_lengths->__get(i);
            			}
            			else {
HXLINE( 484)				_hx_tmp1 = ::verb::eval::Analyze_obj::rationalBezierCurveArcLength(curve,null(),null());
            			}
HXDLIN( 484)			bezier_lengths[i] = _hx_tmp1;
HXLINE( 486)			cl = (cl + bezier_lengths->__get(i));
HXLINE( 488)			if ((len < (cl + ::verb::core::Constants_obj::EPSILON))) {
HXLINE( 489)				return ::verb::eval::Analyze_obj::rationalBezierCurveParamAtArcLength(curve,len,tol,bezier_lengths->__get(i));
            			}
HXLINE( 492)			i = (i + 1);
            		}
            		_hx_goto_16:;
HXLINE( 495)		return ( (Float)(-1) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Analyze_obj,rationalCurveParamAtArcLength,return )

Float Analyze_obj::rationalBezierCurveParamAtArcLength( ::verb::core::NurbsCurveData curve,Float len, ::Dynamic tol, ::Dynamic totalLength){
            	HX_STACKFRAME(&_hx_pos_ddc72136fb266ff3_514_rationalBezierCurveParamAtArcLength)
HXLINE( 515)		if ((len < 0)) {
HXLINE( 515)			return curve->knots->__get(0);
            		}
HXLINE( 518)		 ::Dynamic totalLen;
HXDLIN( 518)		if (::hx::IsNotNull( totalLength )) {
HXLINE( 518)			totalLen = totalLength;
            		}
            		else {
HXLINE( 518)			totalLen = ::verb::eval::Analyze_obj::rationalBezierCurveArcLength(curve,null(),null());
            		}
HXLINE( 520)		if (::hx::IsGreater( len,totalLen )) {
HXLINE( 520)			return ( (Float)(::verb::core::ArrayExtensions_obj::last(curve->knots)) );
            		}
HXLINE( 524)		Float start_p = curve->knots->__get(0);
HXDLIN( 524)		Float start_l = ((Float)0.0);
HXLINE( 525)		Float end_p = ( (Float)(::verb::core::ArrayExtensions_obj::last(curve->knots)) );
HXDLIN( 525)		 ::Dynamic end_l = totalLen;
HXLINE( 526)		Float mid_p = ((Float)0.0);
HXDLIN( 526)		Float mid_l = ((Float)0.0);
HXLINE( 524)		 ::Dynamic tol1;
HXLINE( 527)		if (::hx::IsNotNull( tol )) {
HXLINE( 524)			tol1 = tol;
            		}
            		else {
HXLINE( 524)			tol1 = (::verb::core::Constants_obj::TOLERANCE * ( (Float)(2) ));
            		}
HXLINE( 529)		while(::hx::IsGreater( (( (Float)(end_l) ) - start_l),tol1 )){
HXLINE( 531)			mid_p = ((start_p + end_p) / ( (Float)(2) ));
HXLINE( 532)			mid_l = ::verb::eval::Analyze_obj::rationalBezierCurveArcLength(curve,mid_p,null());
HXLINE( 534)			if ((mid_l > len)) {
HXLINE( 535)				end_p = mid_p;
HXLINE( 536)				end_l = mid_l;
            			}
            			else {
HXLINE( 538)				start_p = mid_p;
HXLINE( 539)				start_l = mid_l;
            			}
            		}
HXLINE( 544)		return ((start_p + end_p) / ( (Float)(2) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Analyze_obj,rationalBezierCurveParamAtArcLength,return )

Float Analyze_obj::rationalCurveArcLength( ::verb::core::NurbsCurveData curve, ::Dynamic u,::hx::Null< int >  __o_gaussDegIncrease){
            		int gaussDegIncrease = __o_gaussDegIncrease.Default(16);
            	HX_STACKFRAME(&_hx_pos_ddc72136fb266ff3_559_rationalCurveArcLength)
HXLINE( 560)		if (::hx::IsNull( u )) {
HXLINE( 560)			u = ::verb::core::ArrayExtensions_obj::last(curve->knots);
            		}
HXLINE( 562)		::Array< ::Dynamic> crvs = ::verb::eval::Modify_obj::decomposeCurveIntoBeziers(curve);
HXDLIN( 562)		int i = 0;
HXDLIN( 562)		 ::verb::core::NurbsCurveData cc = crvs->__get(0).StaticCast<  ::verb::core::NurbsCurveData >();
HXDLIN( 562)		Float sum = ((Float)0.0);
HXLINE( 567)		while(true){
HXLINE( 567)			bool _hx_tmp;
HXDLIN( 567)			if ((i < crvs->length)) {
HXLINE( 567)				_hx_tmp = ::hx::IsLess( (cc->knots->__get(0) + ::verb::core::Constants_obj::EPSILON),u );
            			}
            			else {
HXLINE( 567)				_hx_tmp = false;
            			}
HXDLIN( 567)			if (!(_hx_tmp)) {
HXLINE( 567)				goto _hx_goto_20;
            			}
HXLINE( 568)			Float param = ::Math_obj::min(( (Float)(::verb::core::ArrayExtensions_obj::last(cc->knots)) ),( (Float)(u) ));
HXLINE( 569)			sum = (sum + ::verb::eval::Analyze_obj::rationalBezierCurveArcLength(cc,param,gaussDegIncrease));
HXLINE( 570)			i = (i + 1);
HXDLIN( 570)			cc = crvs->__get(i).StaticCast<  ::verb::core::NurbsCurveData >();
            		}
            		_hx_goto_20:;
HXLINE( 573)		return sum;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Analyze_obj,rationalCurveArcLength,return )

Float Analyze_obj::rationalBezierCurveArcLength( ::verb::core::NurbsCurveData curve, ::Dynamic u,::hx::Null< int >  __o_gaussDegIncrease){
            		int gaussDegIncrease = __o_gaussDegIncrease.Default(16);
            	HX_STACKFRAME(&_hx_pos_ddc72136fb266ff3_588_rationalBezierCurveArcLength)
HXLINE( 590)		 ::Dynamic u1;
HXDLIN( 590)		if (::hx::IsNull( u )) {
HXLINE( 590)			u1 = ::verb::core::ArrayExtensions_obj::last(curve->knots);
            		}
            		else {
HXLINE( 590)			u1 = u;
            		}
HXDLIN( 590)		Float z = ((( (Float)(u1) ) - curve->knots->__get(0)) / ( (Float)(2) ));
HXDLIN( 590)		Float sum = ((Float)0.0);
HXDLIN( 590)		int gaussDeg = (curve->degree + gaussDegIncrease);
HXDLIN( 590)		Float cu;
HXDLIN( 590)		::Array< ::Dynamic> tan;
HXLINE( 597)		{
HXLINE( 597)			int _g = 0;
HXDLIN( 597)			int _g1 = gaussDeg;
HXDLIN( 597)			while((_g < _g1)){
HXLINE( 597)				_g = (_g + 1);
HXDLIN( 597)				int i = (_g - 1);
HXLINE( 599)				cu = (((z * ::verb::eval::Analyze_obj::Tvalues->__get(gaussDeg).StaticCast< ::Array< Float > >()->__get(i)) + z) + curve->knots->__get(0));
HXLINE( 600)				tan = ::verb::eval::Eval_obj::rationalCurveDerivatives(curve,cu,1);
HXLINE( 602)				Float sum1 = ::verb::eval::Analyze_obj::Cvalues->__get(gaussDeg).StaticCast< ::Array< Float > >()->__get(i);
HXDLIN( 602)				sum = (sum + (sum1 * ::verb::core::Vec_obj::norm(tan->__get(1).StaticCast< ::Array< Float > >())));
            			}
            		}
HXLINE( 606)		return (z * sum);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Analyze_obj,rationalBezierCurveArcLength,return )

::Array< ::Dynamic> Analyze_obj::Tvalues;

::Array< ::Dynamic> Analyze_obj::Cvalues;


Analyze_obj::Analyze_obj()
{
}

bool Analyze_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"Tvalues") ) { outValue = ( Tvalues ); return true; }
		if (HX_FIELD_EQ(inName,"Cvalues") ) { outValue = ( Cvalues ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"knotMultiplicities") ) { outValue = knotMultiplicities_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"rationalCurveArcLength") ) { outValue = rationalCurveArcLength_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"isRationalSurfaceClosed") ) { outValue = isRationalSurfaceClosed_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"rationalCurveClosestPoint") ) { outValue = rationalCurveClosestPoint_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rationalCurveClosestParam") ) { outValue = rationalCurveClosestParam_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"rationalSurfaceClosestPoint") ) { outValue = rationalSurfaceClosestPoint_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rationalSurfaceClosestParam") ) { outValue = rationalSurfaceClosestParam_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"rationalBezierCurveArcLength") ) { outValue = rationalBezierCurveArcLength_dyn(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"rationalCurveParamAtArcLength") ) { outValue = rationalCurveParamAtArcLength_dyn(); return true; }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"rationalBezierCurveParamAtArcLength") ) { outValue = rationalBezierCurveParamAtArcLength_dyn(); return true; }
	}
	return false;
}

bool Analyze_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"Tvalues") ) { Tvalues=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"Cvalues") ) { Cvalues=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Analyze_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Analyze_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Analyze_obj::Tvalues,HX_("Tvalues",36,fb,c1,f4)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Analyze_obj::Cvalues,HX_("Cvalues",65,18,d5,31)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Analyze_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Analyze_obj::Tvalues,"Tvalues");
	HX_MARK_MEMBER_NAME(Analyze_obj::Cvalues,"Cvalues");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Analyze_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Analyze_obj::Tvalues,"Tvalues");
	HX_VISIT_MEMBER_NAME(Analyze_obj::Cvalues,"Cvalues");
};

#endif

::hx::Class Analyze_obj::__mClass;

static ::String Analyze_obj_sStaticFields[] = {
	HX_("knotMultiplicities",85,ef,38,14),
	HX_("isRationalSurfaceClosed",e1,bd,49,22),
	HX_("rationalSurfaceClosestPoint",f6,34,c5,2c),
	HX_("rationalSurfaceClosestParam",33,01,8b,23),
	HX_("rationalCurveClosestPoint",f8,95,a5,2f),
	HX_("rationalCurveClosestParam",35,62,6b,26),
	HX_("rationalCurveParamAtArcLength",19,41,70,43),
	HX_("rationalBezierCurveParamAtArcLength",fa,53,f0,70),
	HX_("rationalCurveArcLength",77,cf,ed,95),
	HX_("rationalBezierCurveArcLength",76,aa,9c,28),
	HX_("Tvalues",36,fb,c1,f4),
	HX_("Cvalues",65,18,d5,31),
	::String(null())
};

void Analyze_obj::__register()
{
	Analyze_obj _hx_dummy;
	Analyze_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.eval.Analyze",89,ed,5e,7d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Analyze_obj::__GetStatic;
	__mClass->mSetStaticField = &Analyze_obj::__SetStatic;
	__mClass->mMarkFunc = Analyze_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Analyze_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Analyze_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Analyze_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Analyze_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Analyze_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Analyze_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ddc72136fb266ff3_610_boot)
HXDLIN( 610)		Tvalues = ::Array_obj< ::Dynamic>::__new(25)->init(0,::Array_obj< Float >::__new(0))->init(1,::Array_obj< Float >::__new(0))->init(2,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_25,2))->init(3,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_26,3))->init(4,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_27,4))->init(5,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_28,5))->init(6,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_29,6))->init(7,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_30,7))->init(8,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_31,8))->init(9,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_32,9))->init(10,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_33,10))->init(11,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_34,11))->init(12,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_35,12))->init(13,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_36,13))->init(14,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_37,14))->init(15,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_38,15))->init(16,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_39,16))->init(17,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_40,17))->init(18,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_41,18))->init(19,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_42,19))->init(20,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_43,20))->init(21,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_44,21))->init(22,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_45,22))->init(23,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_46,23))->init(24,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_47,24));
            	}
{
            	HX_STACKFRAME(&_hx_pos_ddc72136fb266ff3_638_boot)
HXDLIN( 638)		Cvalues = ::Array_obj< ::Dynamic>::__new(25)->init(0,::Array_obj< Float >::__new(0))->init(1,::Array_obj< Float >::__new(0))->init(2,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_49,2))->init(3,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_50,3))->init(4,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_51,4))->init(5,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_52,5))->init(6,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_53,6))->init(7,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_54,7))->init(8,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_55,8))->init(9,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_56,9))->init(10,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_57,10))->init(11,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_58,11))->init(12,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_59,12))->init(13,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_60,13))->init(14,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_61,14))->init(15,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_62,15))->init(16,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_63,16))->init(17,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_64,17))->init(18,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_65,18))->init(19,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_66,19))->init(20,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_67,20))->init(21,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_68,21))->init(22,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_69,22))->init(23,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_70,23))->init(24,::Array_obj< Float >::fromData( _hx_array_data_7d5eed89_71,24));
            	}
}

} // end namespace verb
} // end namespace eval
