// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_eval_AdaptiveRefinementOptions
#include <verb/eval/AdaptiveRefinementOptions.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_608da5d2149178df_359_new,"verb.eval.AdaptiveRefinementOptions","new",0x0aeb022c,"verb.eval.AdaptiveRefinementOptions.new","verb/eval/Tess.hx",359,0xdad164ea)
namespace verb{
namespace eval{

void AdaptiveRefinementOptions_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_608da5d2149178df_359_new)
HXLINE( 365)		this->minDivsV = 1;
HXLINE( 364)		this->minDivsU = 1;
HXLINE( 363)		this->refine = true;
HXLINE( 362)		this->maxDepth = 10;
HXLINE( 361)		this->minDepth = 0;
HXLINE( 360)		this->normTol = ((Float)2.5e-2);
            	}

Dynamic AdaptiveRefinementOptions_obj::__CreateEmpty() { return new AdaptiveRefinementOptions_obj; }

void *AdaptiveRefinementOptions_obj::_hx_vtable = 0;

Dynamic AdaptiveRefinementOptions_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AdaptiveRefinementOptions_obj > _hx_result = new AdaptiveRefinementOptions_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AdaptiveRefinementOptions_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7c0d4ac2;
}


AdaptiveRefinementOptions_obj::AdaptiveRefinementOptions_obj()
{
}

::hx::Val AdaptiveRefinementOptions_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"refine") ) { return ::hx::Val( refine ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"normTol") ) { return ::hx::Val( normTol ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"minDepth") ) { return ::hx::Val( minDepth ); }
		if (HX_FIELD_EQ(inName,"maxDepth") ) { return ::hx::Val( maxDepth ); }
		if (HX_FIELD_EQ(inName,"minDivsU") ) { return ::hx::Val( minDivsU ); }
		if (HX_FIELD_EQ(inName,"minDivsV") ) { return ::hx::Val( minDivsV ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AdaptiveRefinementOptions_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"refine") ) { refine=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"normTol") ) { normTol=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"minDepth") ) { minDepth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxDepth") ) { maxDepth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minDivsU") ) { minDivsU=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minDivsV") ) { minDivsV=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AdaptiveRefinementOptions_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("normTol",b5,95,d0,2b));
	outFields->push(HX_("minDepth",11,5e,61,ce));
	outFields->push(HX_("maxDepth",bf,43,47,81));
	outFields->push(HX_("refine",6d,89,e3,ff));
	outFields->push(HX_("minDivsU",21,c5,0a,d1));
	outFields->push(HX_("minDivsV",22,c5,0a,d1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AdaptiveRefinementOptions_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(AdaptiveRefinementOptions_obj,normTol),HX_("normTol",b5,95,d0,2b)},
	{::hx::fsInt,(int)offsetof(AdaptiveRefinementOptions_obj,minDepth),HX_("minDepth",11,5e,61,ce)},
	{::hx::fsInt,(int)offsetof(AdaptiveRefinementOptions_obj,maxDepth),HX_("maxDepth",bf,43,47,81)},
	{::hx::fsBool,(int)offsetof(AdaptiveRefinementOptions_obj,refine),HX_("refine",6d,89,e3,ff)},
	{::hx::fsInt,(int)offsetof(AdaptiveRefinementOptions_obj,minDivsU),HX_("minDivsU",21,c5,0a,d1)},
	{::hx::fsInt,(int)offsetof(AdaptiveRefinementOptions_obj,minDivsV),HX_("minDivsV",22,c5,0a,d1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AdaptiveRefinementOptions_obj_sStaticStorageInfo = 0;
#endif

static ::String AdaptiveRefinementOptions_obj_sMemberFields[] = {
	HX_("normTol",b5,95,d0,2b),
	HX_("minDepth",11,5e,61,ce),
	HX_("maxDepth",bf,43,47,81),
	HX_("refine",6d,89,e3,ff),
	HX_("minDivsU",21,c5,0a,d1),
	HX_("minDivsV",22,c5,0a,d1),
	::String(null()) };

::hx::Class AdaptiveRefinementOptions_obj::__mClass;

void AdaptiveRefinementOptions_obj::__register()
{
	AdaptiveRefinementOptions_obj _hx_dummy;
	AdaptiveRefinementOptions_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.eval.AdaptiveRefinementOptions",3a,bc,63,c4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AdaptiveRefinementOptions_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AdaptiveRefinementOptions_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AdaptiveRefinementOptions_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AdaptiveRefinementOptions_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace eval
