// Generated by Haxe 4.1.4
#include <hxcpp.h>

#ifndef INCLUDED_verb_eval_CurveLengthSample
#include <verb/eval/CurveLengthSample.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_265df29073ffffab_189_new,"verb.eval.CurveLengthSample","new",0xedd64c6e,"verb.eval.CurveLengthSample.new","verb/eval/Divide.hx",189,0x85f5d802)
namespace verb{
namespace eval{

void CurveLengthSample_obj::__construct(Float u,Float len){
            	HX_STACKFRAME(&_hx_pos_265df29073ffffab_189_new)
HXLINE( 190)		this->u = u;
HXLINE( 191)		this->len = len;
            	}

Dynamic CurveLengthSample_obj::__CreateEmpty() { return new CurveLengthSample_obj; }

void *CurveLengthSample_obj::_hx_vtable = 0;

Dynamic CurveLengthSample_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CurveLengthSample_obj > _hx_result = new CurveLengthSample_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CurveLengthSample_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x593c0404;
}


CurveLengthSample_obj::CurveLengthSample_obj()
{
}

::hx::Val CurveLengthSample_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"u") ) { return ::hx::Val( u ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"len") ) { return ::hx::Val( len ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CurveLengthSample_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"u") ) { u=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"len") ) { len=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CurveLengthSample_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("u",75,00,00,00));
	outFields->push(HX_("len",d5,4b,52,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CurveLengthSample_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(CurveLengthSample_obj,u),HX_("u",75,00,00,00)},
	{::hx::fsFloat,(int)offsetof(CurveLengthSample_obj,len),HX_("len",d5,4b,52,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CurveLengthSample_obj_sStaticStorageInfo = 0;
#endif

static ::String CurveLengthSample_obj_sMemberFields[] = {
	HX_("u",75,00,00,00),
	HX_("len",d5,4b,52,00),
	::String(null()) };

::hx::Class CurveLengthSample_obj::__mClass;

void CurveLengthSample_obj::__register()
{
	CurveLengthSample_obj _hx_dummy;
	CurveLengthSample_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("verb.eval.CurveLengthSample",7c,3d,08,54);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CurveLengthSample_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CurveLengthSample_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CurveLengthSample_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CurveLengthSample_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace verb
} // end namespace eval
