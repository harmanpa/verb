// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_eval_AdaptiveRefinementOptions
#define INCLUDED_verb_eval_AdaptiveRefinementOptions

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_608da5d2149178df_359_new)
HX_DECLARE_CLASS2(verb,eval,AdaptiveRefinementOptions)

namespace verb{
namespace eval{


class HXCPP_CLASS_ATTRIBUTES AdaptiveRefinementOptions_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef AdaptiveRefinementOptions_obj OBJ_;
		AdaptiveRefinementOptions_obj();

	public:
		enum { _hx_ClassId = 0x7c0d4ac2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="verb.eval.AdaptiveRefinementOptions")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"verb.eval.AdaptiveRefinementOptions"); }

		inline static ::hx::ObjectPtr< AdaptiveRefinementOptions_obj > __new() {
			::hx::ObjectPtr< AdaptiveRefinementOptions_obj > __this = new AdaptiveRefinementOptions_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< AdaptiveRefinementOptions_obj > __alloc(::hx::Ctx *_hx_ctx) {
			AdaptiveRefinementOptions_obj *__this = (AdaptiveRefinementOptions_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AdaptiveRefinementOptions_obj), false, "verb.eval.AdaptiveRefinementOptions"));
			*(void **)__this = AdaptiveRefinementOptions_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_608da5d2149178df_359_new)
HXLINE( 365)		( ( ::verb::eval::AdaptiveRefinementOptions)(__this) )->minDivsV = 1;
HXLINE( 364)		( ( ::verb::eval::AdaptiveRefinementOptions)(__this) )->minDivsU = 1;
HXLINE( 363)		( ( ::verb::eval::AdaptiveRefinementOptions)(__this) )->refine = true;
HXLINE( 362)		( ( ::verb::eval::AdaptiveRefinementOptions)(__this) )->maxDepth = 10;
HXLINE( 361)		( ( ::verb::eval::AdaptiveRefinementOptions)(__this) )->minDepth = 0;
HXLINE( 360)		( ( ::verb::eval::AdaptiveRefinementOptions)(__this) )->normTol = ((Float)2.5e-2);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~AdaptiveRefinementOptions_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AdaptiveRefinementOptions",9d,56,2c,bd); }

		Float normTol;
		int minDepth;
		int maxDepth;
		bool refine;
		int minDivsU;
		int minDivsV;
};

} // end namespace verb
} // end namespace eval

#endif /* INCLUDED_verb_eval_AdaptiveRefinementOptions */ 
