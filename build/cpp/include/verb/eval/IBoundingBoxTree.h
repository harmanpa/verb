// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_eval_IBoundingBoxTree
#define INCLUDED_verb_eval_IBoundingBoxTree

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(verb,core,BoundingBox)
HX_DECLARE_CLASS2(verb,core,Pair)
HX_DECLARE_CLASS2(verb,eval,IBoundingBoxTree)

namespace verb{
namespace eval{


class HXCPP_CLASS_ATTRIBUTES IBoundingBoxTree_obj {
	public:
		typedef ::hx::Object super;
		HX_DO_INTERFACE_RTTI;

		 ::verb::core::BoundingBox (::hx::Object :: *_hx_boundingBox)(); 
		static inline  ::verb::core::BoundingBox boundingBox( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::verb::eval::IBoundingBoxTree_obj *>(_hx_.mPtr->_hx_getInterface(0x9907fd77)))->_hx_boundingBox)();
		}
		 ::verb::core::Pair (::hx::Object :: *_hx_split)(); 
		static inline  ::verb::core::Pair split( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::verb::eval::IBoundingBoxTree_obj *>(_hx_.mPtr->_hx_getInterface(0x9907fd77)))->_hx_split)();
		}
		 ::Dynamic (::hx::Object :: *_hx_yield)(); 
		static inline  ::Dynamic yield( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::verb::eval::IBoundingBoxTree_obj *>(_hx_.mPtr->_hx_getInterface(0x9907fd77)))->_hx_yield)();
		}
		bool (::hx::Object :: *_hx_indivisible)(Float tolerance); 
		static inline bool indivisible( ::Dynamic _hx_,Float tolerance) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::verb::eval::IBoundingBoxTree_obj *>(_hx_.mPtr->_hx_getInterface(0x9907fd77)))->_hx_indivisible)(tolerance);
		}
		bool (::hx::Object :: *_hx_empty)(); 
		static inline bool empty( ::Dynamic _hx_) {
			return (_hx_.mPtr->*( ::hx::interface_cast< ::verb::eval::IBoundingBoxTree_obj *>(_hx_.mPtr->_hx_getInterface(0x9907fd77)))->_hx_empty)();
		}
};

} // end namespace verb
} // end namespace eval

#endif /* INCLUDED_verb_eval_IBoundingBoxTree */ 
