// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_eval_Tess
#define INCLUDED_verb_eval_Tess

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(verb,core,MeshData)
HX_DECLARE_CLASS2(verb,core,NurbsCurveData)
HX_DECLARE_CLASS2(verb,core,NurbsSurfaceData)
HX_DECLARE_CLASS2(verb,core,SerializableBase)
HX_DECLARE_CLASS2(verb,eval,AdaptiveRefinementNode)
HX_DECLARE_CLASS2(verb,eval,AdaptiveRefinementOptions)
HX_DECLARE_CLASS2(verb,eval,Tess)

namespace verb{
namespace eval{


class HXCPP_CLASS_ATTRIBUTES Tess_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Tess_obj OBJ_;
		Tess_obj();

	public:
		enum { _hx_ClassId = 0x07938c6c };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="verb.eval.Tess")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"verb.eval.Tess"); }

		inline static ::hx::ObjectPtr< Tess_obj > __new() {
			::hx::ObjectPtr< Tess_obj > __this = new Tess_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Tess_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Tess_obj *__this = (Tess_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Tess_obj), false, "verb.eval.Tess"));
			*(void **)__this = Tess_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Tess_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Tess",71,f4,d2,37); }

		static ::Array< ::Dynamic> rationalCurveRegularSample( ::verb::core::NurbsCurveData curve,int numSamples,bool includeU);
		static ::Dynamic rationalCurveRegularSample_dyn();

		static ::Array< ::Dynamic> rationalCurveRegularSampleRange( ::verb::core::NurbsCurveData curve,Float start,Float end,int numSamples,bool includeU);
		static ::Dynamic rationalCurveRegularSampleRange_dyn();

		static ::Array< ::Dynamic> rationalCurveAdaptiveSample( ::verb::core::NurbsCurveData curve,::hx::Null< Float >  tol,::hx::Null< bool >  includeU);
		static ::Dynamic rationalCurveAdaptiveSample_dyn();

		static ::Array< ::Dynamic> rationalCurveAdaptiveSampleRange( ::verb::core::NurbsCurveData curve,Float start,Float end,Float tol,bool includeU);
		static ::Dynamic rationalCurveAdaptiveSampleRange_dyn();

		static  ::verb::core::MeshData rationalSurfaceNaive( ::verb::core::NurbsSurfaceData surface,int divs_u,int divs_v);
		static ::Dynamic rationalSurfaceNaive_dyn();

		static ::Array< ::Dynamic> divideRationalSurfaceAdaptive( ::verb::core::NurbsSurfaceData surface, ::verb::eval::AdaptiveRefinementOptions options);
		static ::Dynamic divideRationalSurfaceAdaptive_dyn();

		static  ::verb::eval::AdaptiveRefinementNode north(int index,int i,int j,int divsU,int divsV,::Array< ::Dynamic> divs);
		static ::Dynamic north_dyn();

		static  ::verb::eval::AdaptiveRefinementNode south(int index,int i,int j,int divsU,int divsV,::Array< ::Dynamic> divs);
		static ::Dynamic south_dyn();

		static  ::verb::eval::AdaptiveRefinementNode east(int index,int i,int j,int divsU,int divsV,::Array< ::Dynamic> divs);
		static ::Dynamic east_dyn();

		static  ::verb::eval::AdaptiveRefinementNode west(int index,int i,int j,int divsU,int divsV,::Array< ::Dynamic> divs);
		static ::Dynamic west_dyn();

		static  ::verb::core::MeshData triangulateAdaptiveRefinementNodeTree(::Array< ::Dynamic> arrTree);
		static ::Dynamic triangulateAdaptiveRefinementNodeTree_dyn();

		static  ::verb::core::MeshData rationalSurfaceAdaptive( ::verb::core::NurbsSurfaceData surface, ::verb::eval::AdaptiveRefinementOptions options);
		static ::Dynamic rationalSurfaceAdaptive_dyn();

};

} // end namespace verb
} // end namespace eval

#endif /* INCLUDED_verb_eval_Tess */ 
