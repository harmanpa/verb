// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_eval_Divide
#define INCLUDED_verb_eval_Divide

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(verb,core,NurbsCurveData)
HX_DECLARE_CLASS2(verb,core,NurbsSurfaceData)
HX_DECLARE_CLASS2(verb,core,SerializableBase)
HX_DECLARE_CLASS2(verb,eval,CurveLengthSample)
HX_DECLARE_CLASS2(verb,eval,Divide)

namespace verb{
namespace eval{


class HXCPP_CLASS_ATTRIBUTES Divide_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Divide_obj OBJ_;
		Divide_obj();

	public:
		enum { _hx_ClassId = 0x0dad7ab8 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="verb.eval.Divide")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"verb.eval.Divide"); }

		inline static ::hx::ObjectPtr< Divide_obj > __new() {
			::hx::ObjectPtr< Divide_obj > __this = new Divide_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Divide_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Divide_obj *__this = (Divide_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Divide_obj), false, "verb.eval.Divide"));
			*(void **)__this = Divide_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Divide_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Divide",99,a3,a6,f3); }

		static ::Array< ::Dynamic> surfaceSplit( ::verb::core::NurbsSurfaceData surface,Float u,::hx::Null< bool >  useV);
		static ::Dynamic surfaceSplit_dyn();

		static ::Array< ::Dynamic> curveSplit( ::verb::core::NurbsCurveData curve,Float u);
		static ::Dynamic curveSplit_dyn();

		static ::Array< ::Dynamic> rationalCurveByEqualArcLength( ::verb::core::NurbsCurveData curve,int num);
		static ::Dynamic rationalCurveByEqualArcLength_dyn();

		static ::Array< ::Dynamic> rationalCurveByArcLength( ::verb::core::NurbsCurveData curve,Float l);
		static ::Dynamic rationalCurveByArcLength_dyn();

};

} // end namespace verb
} // end namespace eval

#endif /* INCLUDED_verb_eval_Divide */ 
