// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_eval_CurveLengthSample
#define INCLUDED_verb_eval_CurveLengthSample

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_265df29073ffffab_189_new)
HX_DECLARE_CLASS2(verb,eval,CurveLengthSample)

namespace verb{
namespace eval{


class HXCPP_CLASS_ATTRIBUTES CurveLengthSample_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef CurveLengthSample_obj OBJ_;
		CurveLengthSample_obj();

	public:
		enum { _hx_ClassId = 0x593c0404 };

		void __construct(Float u,Float len);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="verb.eval.CurveLengthSample")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"verb.eval.CurveLengthSample"); }

		inline static ::hx::ObjectPtr< CurveLengthSample_obj > __new(Float u,Float len) {
			::hx::ObjectPtr< CurveLengthSample_obj > __this = new CurveLengthSample_obj();
			__this->__construct(u,len);
			return __this;
		}

		inline static ::hx::ObjectPtr< CurveLengthSample_obj > __alloc(::hx::Ctx *_hx_ctx,Float u,Float len) {
			CurveLengthSample_obj *__this = (CurveLengthSample_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CurveLengthSample_obj), false, "verb.eval.CurveLengthSample"));
			*(void **)__this = CurveLengthSample_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_265df29073ffffab_189_new)
HXLINE( 190)		( ( ::verb::eval::CurveLengthSample)(__this) )->u = u;
HXLINE( 191)		( ( ::verb::eval::CurveLengthSample)(__this) )->len = len;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CurveLengthSample_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CurveLengthSample",df,3c,de,e4); }

		Float u;
		Float len;
};

} // end namespace verb
} // end namespace eval

#endif /* INCLUDED_verb_eval_CurveLengthSample */ 
