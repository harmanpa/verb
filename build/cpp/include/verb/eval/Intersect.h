// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_eval_Intersect
#define INCLUDED_verb_eval_Intersect

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(verb,core,CurveCurveIntersection)
HX_DECLARE_CLASS2(verb,core,CurveSurfaceIntersection)
HX_DECLARE_CLASS2(verb,core,Interval)
HX_DECLARE_CLASS2(verb,core,KdTree_verb_core_MeshIntersectionPoint)
HX_DECLARE_CLASS2(verb,core,MeshData)
HX_DECLARE_CLASS2(verb,core,MeshIntersectionPoint)
HX_DECLARE_CLASS2(verb,core,NurbsCurveData)
HX_DECLARE_CLASS2(verb,core,NurbsSurfaceData)
HX_DECLARE_CLASS2(verb,core,Pair)
HX_DECLARE_CLASS2(verb,core,PolylineData)
HX_DECLARE_CLASS2(verb,core,PolylineMeshIntersection)
HX_DECLARE_CLASS2(verb,core,Ray)
HX_DECLARE_CLASS2(verb,core,SerializableBase)
HX_DECLARE_CLASS2(verb,core,SurfaceSurfaceIntersectionPoint)
HX_DECLARE_CLASS2(verb,core,TriSegmentIntersection)
HX_DECLARE_CLASS2(verb,eval,IBoundingBoxTree)
HX_DECLARE_CLASS2(verb,eval,Intersect)

namespace verb{
namespace eval{


class HXCPP_CLASS_ATTRIBUTES Intersect_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Intersect_obj OBJ_;
		Intersect_obj();

	public:
		enum { _hx_ClassId = 0x3b977ae4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="verb.eval.Intersect")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"verb.eval.Intersect"); }

		inline static ::hx::ObjectPtr< Intersect_obj > __new() {
			::hx::ObjectPtr< Intersect_obj > __this = new Intersect_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Intersect_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Intersect_obj *__this = (Intersect_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Intersect_obj), false, "verb.eval.Intersect"));
			*(void **)__this = Intersect_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Intersect_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Intersect",bf,e0,47,e4); }

		static ::Array< ::Dynamic> surfaces( ::verb::core::NurbsSurfaceData surface0, ::verb::core::NurbsSurfaceData surface1,Float tol);
		static ::Dynamic surfaces_dyn();

		static  ::verb::core::SurfaceSurfaceIntersectionPoint surfacesAtPointWithEstimate( ::verb::core::NurbsSurfaceData surface0, ::verb::core::NurbsSurfaceData surface1,::Array< Float > uv1,::Array< Float > uv2,Float tol);
		static ::Dynamic surfacesAtPointWithEstimate_dyn();

		static ::Array< ::Dynamic> meshes( ::verb::core::MeshData mesh0, ::verb::core::MeshData mesh1,::Dynamic bbtree0,::Dynamic bbtree1);
		static ::Dynamic meshes_dyn();

		static ::Array< ::Dynamic> meshSlices( ::verb::core::MeshData mesh,Float min,Float max,Float step);
		static ::Dynamic meshSlices_dyn();

		static ::Array< ::Dynamic> makeMeshIntersectionPolylines(::Array< ::Dynamic> segments);
		static ::Dynamic makeMeshIntersectionPolylines_dyn();

		static  ::verb::core::KdTree_verb_core_MeshIntersectionPoint kdTreeFromSegments(::Array< ::Dynamic> segments);
		static ::Dynamic kdTreeFromSegments_dyn();

		static  ::verb::core::MeshIntersectionPoint lookupAdjacentSegment( ::verb::core::MeshIntersectionPoint segEnd, ::verb::core::KdTree_verb_core_MeshIntersectionPoint tree,int numResults);
		static ::Dynamic lookupAdjacentSegment_dyn();

		static ::Array< ::Dynamic> curveAndSurface( ::verb::core::NurbsCurveData curve, ::verb::core::NurbsSurfaceData surface,::hx::Null< Float >  tol,::Dynamic crvBbTree,::Dynamic srfBbTree);
		static ::Dynamic curveAndSurface_dyn();

		static  ::verb::core::CurveSurfaceIntersection curveAndSurfaceWithEstimate( ::verb::core::NurbsCurveData curve, ::verb::core::NurbsSurfaceData surface,::Array< Float > start_params,::hx::Null< Float >  tol);
		static ::Dynamic curveAndSurfaceWithEstimate_dyn();

		static ::Array< ::Dynamic> polylineAndMesh( ::verb::core::PolylineData polyline, ::verb::core::MeshData mesh,Float tol);
		static ::Dynamic polylineAndMesh_dyn();

		static ::Array< ::Dynamic> boundingBoxTrees(::Dynamic ai,::Dynamic bi,::hx::Null< Float >  tol);
		static ::Dynamic boundingBoxTrees_dyn();

		static ::Array< ::Dynamic> curves( ::verb::core::NurbsCurveData curve1, ::verb::core::NurbsCurveData curve2,Float tolerance);
		static ::Dynamic curves_dyn();

		static  ::verb::core::CurveCurveIntersection curvesWithEstimate( ::verb::core::NurbsCurveData curve0, ::verb::core::NurbsCurveData curve1,Float u0,Float u1,Float tolerance);
		static ::Dynamic curvesWithEstimate_dyn();

		static  ::verb::core::Interval triangles( ::verb::core::MeshData mesh0,int faceIndex0, ::verb::core::MeshData mesh1,int faceIndex1);
		static ::Dynamic triangles_dyn();

		static  ::verb::core::Interval clipRayInCoplanarTriangle( ::verb::core::Ray ray, ::verb::core::MeshData mesh,int faceIndex);
		static ::Dynamic clipRayInCoplanarTriangle_dyn();

		static  ::verb::core::Interval mergeTriangleClipIntervals( ::verb::core::Interval clip1, ::verb::core::Interval clip2, ::verb::core::MeshData mesh1,int faceIndex1, ::verb::core::MeshData mesh2,int faceIndex2);
		static ::Dynamic mergeTriangleClipIntervals_dyn();

		static  ::verb::core::Ray planes(::Array< Float > origin0,::Array< Float > normal0,::Array< Float > origin1,::Array< Float > normal1);
		static ::Dynamic planes_dyn();

		static ::Array< Float > threePlanes(::Array< Float > n0,Float d0,::Array< Float > n1,Float d1,::Array< Float > n2,Float d2);
		static ::Dynamic threePlanes_dyn();

		static ::Array< ::Dynamic> polylines( ::verb::core::PolylineData polyline0, ::verb::core::PolylineData polyline1,Float tol);
		static ::Dynamic polylines_dyn();

		static  ::verb::core::CurveCurveIntersection segments(::Array< Float > a0,::Array< Float > a1,::Array< Float > b0,::Array< Float > b1,Float tol);
		static ::Dynamic segments_dyn();

		static  ::verb::core::CurveCurveIntersection rays(::Array< Float > a0,::Array< Float > a,::Array< Float > b0,::Array< Float > b);
		static ::Dynamic rays_dyn();

		static  ::verb::core::TriSegmentIntersection segmentWithTriangle(::Array< Float > p0,::Array< Float > p1,::Array< ::Dynamic> points,::Array< int > tri);
		static ::Dynamic segmentWithTriangle_dyn();

		static  ::Dynamic segmentAndPlane(::Array< Float > p0,::Array< Float > p1,::Array< Float > v0,::Array< Float > n);
		static ::Dynamic segmentAndPlane_dyn();

};

} // end namespace verb
} // end namespace eval

#endif /* INCLUDED_verb_eval_Intersect */ 
