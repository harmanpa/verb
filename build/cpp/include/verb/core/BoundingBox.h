// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_core_BoundingBox
#define INCLUDED_verb_core_BoundingBox

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(verb,core,BoundingBox)

namespace verb{
namespace core{


class HXCPP_CLASS_ATTRIBUTES BoundingBox_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef BoundingBox_obj OBJ_;
		BoundingBox_obj();

	public:
		enum { _hx_ClassId = 0x019feaa9 };

		void __construct(::Array< ::Dynamic> pts);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="verb.core.BoundingBox")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"verb.core.BoundingBox"); }
		static ::hx::ObjectPtr< BoundingBox_obj > __new(::Array< ::Dynamic> pts);
		static ::hx::ObjectPtr< BoundingBox_obj > __alloc(::hx::Ctx *_hx_ctx,::Array< ::Dynamic> pts);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BoundingBox_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BoundingBox",e7,2c,da,69); }

		static bool intervalsOverlap(Float a1,Float a2,Float b1,Float b2,::hx::Null< Float >  tol);
		static ::Dynamic intervalsOverlap_dyn();

		bool initialized;
		int dim;
		::Array< Float > min;
		::Array< Float > max;
		 ::verb::core::BoundingBox fromPoint(::Array< Float > pt);
		::Dynamic fromPoint_dyn();

		 ::verb::core::BoundingBox add(::Array< Float > point);
		::Dynamic add_dyn();

		 ::verb::core::BoundingBox addRange(::Array< ::Dynamic> points);
		::Dynamic addRange_dyn();

		bool contains(::Array< Float > point,::hx::Null< Float >  tol);
		::Dynamic contains_dyn();

		bool intersects( ::verb::core::BoundingBox bb,::hx::Null< Float >  tol);
		::Dynamic intersects_dyn();

		 ::verb::core::BoundingBox clear();
		::Dynamic clear_dyn();

		int getLongestAxis();
		::Dynamic getLongestAxis_dyn();

		Float getAxisLength(int i);
		::Dynamic getAxisLength_dyn();

		 ::verb::core::BoundingBox intersect( ::verb::core::BoundingBox bb,Float tol);
		::Dynamic intersect_dyn();

};

} // end namespace verb
} // end namespace core

#endif /* INCLUDED_verb_core_BoundingBox */ 
