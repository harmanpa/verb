// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_core_Constants
#define INCLUDED_verb_core_Constants

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(verb,core,Constants)

namespace verb{
namespace core{


class HXCPP_CLASS_ATTRIBUTES Constants_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Constants_obj OBJ_;
		Constants_obj();

	public:
		enum { _hx_ClassId = 0x25f4d7e9 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="verb.core.Constants")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"verb.core.Constants"); }

		inline static ::hx::ObjectPtr< Constants_obj > __new() {
			::hx::ObjectPtr< Constants_obj > __this = new Constants_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Constants_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Constants_obj *__this = (Constants_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Constants_obj), false, "verb.core.Constants"));
			*(void **)__this = Constants_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Constants_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Constants",6f,56,3e,e6); }

		static void __boot();
		static Float TOLERANCE;
		static Float EPSILON;
		static ::String VERSION;
};

} // end namespace verb
} // end namespace core

#endif /* INCLUDED_verb_core_Constants */ 
