// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_core_Binomial
#define INCLUDED_verb_core_Binomial

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(verb,core,Binomial)

namespace verb{
namespace core{


class HXCPP_CLASS_ATTRIBUTES Binomial_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Binomial_obj OBJ_;
		Binomial_obj();

	public:
		enum { _hx_ClassId = 0x1b566e2d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="verb.core.Binomial")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"verb.core.Binomial"); }

		inline static ::hx::ObjectPtr< Binomial_obj > __new() {
			::hx::ObjectPtr< Binomial_obj > __this = new Binomial_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Binomial_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Binomial_obj *__this = (Binomial_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Binomial_obj), false, "verb.core.Binomial"));
			*(void **)__this = Binomial_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Binomial_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Binomial",2f,79,67,fa); }

		static void __boot();
		static  ::haxe::ds::IntMap memo;
		static Float get(int n,int k);
		static ::Dynamic get_dyn();

		static Float get_no_memo(int n,int k);
		static ::Dynamic get_no_memo_dyn();

		static bool memo_exists(int n,int k);
		static ::Dynamic memo_exists_dyn();

		static Float get_memo(int n,int k);
		static ::Dynamic get_memo_dyn();

		static void memoize(int n,int k,Float val);
		static ::Dynamic memoize_dyn();

};

} // end namespace verb
} // end namespace core

#endif /* INCLUDED_verb_core_Binomial */ 
