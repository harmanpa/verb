// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_core_CurveCurveIntersection
#define INCLUDED_verb_core_CurveCurveIntersection

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_d852e69e0d0028f2_20_new)
HX_DECLARE_CLASS2(verb,core,CurveCurveIntersection)

namespace verb{
namespace core{


class HXCPP_CLASS_ATTRIBUTES CurveCurveIntersection_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef CurveCurveIntersection_obj OBJ_;
		CurveCurveIntersection_obj();

	public:
		enum { _hx_ClassId = 0x459d6d87 };

		void __construct(::Array< Float > point0,::Array< Float > point1,Float u0,Float u1);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="verb.core.CurveCurveIntersection")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"verb.core.CurveCurveIntersection"); }

		inline static ::hx::ObjectPtr< CurveCurveIntersection_obj > __new(::Array< Float > point0,::Array< Float > point1,Float u0,Float u1) {
			::hx::ObjectPtr< CurveCurveIntersection_obj > __this = new CurveCurveIntersection_obj();
			__this->__construct(point0,point1,u0,u1);
			return __this;
		}

		inline static ::hx::ObjectPtr< CurveCurveIntersection_obj > __alloc(::hx::Ctx *_hx_ctx,::Array< Float > point0,::Array< Float > point1,Float u0,Float u1) {
			CurveCurveIntersection_obj *__this = (CurveCurveIntersection_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CurveCurveIntersection_obj), true, "verb.core.CurveCurveIntersection"));
			*(void **)__this = CurveCurveIntersection_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_d852e69e0d0028f2_20_new)
HXLINE(  21)		( ( ::verb::core::CurveCurveIntersection)(__this) )->point0 = point0;
HXLINE(  22)		( ( ::verb::core::CurveCurveIntersection)(__this) )->point1 = point1;
HXLINE(  23)		( ( ::verb::core::CurveCurveIntersection)(__this) )->u0 = u0;
HXLINE(  24)		( ( ::verb::core::CurveCurveIntersection)(__this) )->u1 = u1;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CurveCurveIntersection_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CurveCurveIntersection",09,f8,42,fa); }

		::Array< Float > point0;
		::Array< Float > point1;
		Float u0;
		Float u1;
};

} // end namespace verb
} // end namespace core

#endif /* INCLUDED_verb_core_CurveCurveIntersection */ 
