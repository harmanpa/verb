// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_core_SurfacePoint
#define INCLUDED_verb_core_SurfacePoint

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_959611cb896c5e6e_146_new)
HX_DECLARE_CLASS2(verb,core,SurfacePoint)

namespace verb{
namespace core{


class HXCPP_CLASS_ATTRIBUTES SurfacePoint_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef SurfacePoint_obj OBJ_;
		SurfacePoint_obj();

	public:
		enum { _hx_ClassId = 0x16f19b2d };

		void __construct(::Array< Float > point,::Array< Float > normal,::Array< Float > uv,::hx::Null< int >  __o_id,::hx::Null< bool >  __o_degen);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="verb.core.SurfacePoint")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"verb.core.SurfacePoint"); }

		inline static ::hx::ObjectPtr< SurfacePoint_obj > __new(::Array< Float > point,::Array< Float > normal,::Array< Float > uv,::hx::Null< int >  __o_id,::hx::Null< bool >  __o_degen) {
			::hx::ObjectPtr< SurfacePoint_obj > __this = new SurfacePoint_obj();
			__this->__construct(point,normal,uv,__o_id,__o_degen);
			return __this;
		}

		inline static ::hx::ObjectPtr< SurfacePoint_obj > __alloc(::hx::Ctx *_hx_ctx,::Array< Float > point,::Array< Float > normal,::Array< Float > uv,::hx::Null< int >  __o_id,::hx::Null< bool >  __o_degen) {
			SurfacePoint_obj *__this = (SurfacePoint_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SurfacePoint_obj), true, "verb.core.SurfacePoint"));
			*(void **)__this = SurfacePoint_obj::_hx_vtable;
{
            		int id = __o_id.Default(-1);
            		bool degen = __o_degen.Default(false);
            	HX_STACKFRAME(&_hx_pos_959611cb896c5e6e_146_new)
HXLINE( 147)		( ( ::verb::core::SurfacePoint)(__this) )->uv = uv;
HXLINE( 148)		( ( ::verb::core::SurfacePoint)(__this) )->point = point;
HXLINE( 149)		( ( ::verb::core::SurfacePoint)(__this) )->normal = normal;
HXLINE( 150)		( ( ::verb::core::SurfacePoint)(__this) )->id = id;
HXLINE( 151)		( ( ::verb::core::SurfacePoint)(__this) )->degen = degen;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~SurfacePoint_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SurfacePoint",03,87,c3,60); }

		static  ::verb::core::SurfacePoint fromUv(Float u,Float v);
		static ::Dynamic fromUv_dyn();

		::Array< Float > uv;
		::Array< Float > point;
		::Array< Float > normal;
		int id;
		bool degen;
};

} // end namespace verb
} // end namespace core

#endif /* INCLUDED_verb_core_SurfacePoint */ 
