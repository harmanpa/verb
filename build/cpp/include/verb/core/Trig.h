// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_core_Trig
#define INCLUDED_verb_core_Trig

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(verb,core,Plane)
HX_DECLARE_CLASS2(verb,core,SerializableBase)
HX_DECLARE_CLASS2(verb,core,Trig)

namespace verb{
namespace core{


class HXCPP_CLASS_ATTRIBUTES Trig_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Trig_obj OBJ_;
		Trig_obj();

	public:
		enum { _hx_ClassId = 0x6bb1e6fa };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="verb.core.Trig")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"verb.core.Trig"); }

		inline static ::hx::ObjectPtr< Trig_obj > __new() {
			::hx::ObjectPtr< Trig_obj > __this = new Trig_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Trig_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Trig_obj *__this = (Trig_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Trig_obj), false, "verb.core.Trig"));
			*(void **)__this = Trig_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Trig_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Trig",fc,c8,dc,37); }

		static bool isPointInPlane(::Array< Float > pt, ::verb::core::Plane p,Float tol);
		static ::Dynamic isPointInPlane_dyn();

		static Float distToSegment(::Array< Float > a,::Array< Float > b,::Array< Float > c);
		static ::Dynamic distToSegment_dyn();

		static ::Array< Float > rayClosestPoint(::Array< Float > pt,::Array< Float > o,::Array< Float > r);
		static ::Dynamic rayClosestPoint_dyn();

		static Float distToRay(::Array< Float > pt,::Array< Float > o,::Array< Float > r);
		static ::Dynamic distToRay_dyn();

		static bool threePointsAreFlat(::Array< Float > p1,::Array< Float > p2,::Array< Float > p3,Float tol);
		static ::Dynamic threePointsAreFlat_dyn();

		static  ::Dynamic segmentClosestPoint(::Array< Float > pt,::Array< Float > segpt0,::Array< Float > segpt1,Float u0,Float u1);
		static ::Dynamic segmentClosestPoint_dyn();

};

} // end namespace verb
} // end namespace core

#endif /* INCLUDED_verb_core_Trig */ 
