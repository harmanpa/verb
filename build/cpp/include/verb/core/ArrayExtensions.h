// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_core_ArrayExtensions
#define INCLUDED_verb_core_ArrayExtensions

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(verb,core,ArrayExtensions)

namespace verb{
namespace core{


class HXCPP_CLASS_ATTRIBUTES ArrayExtensions_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ArrayExtensions_obj OBJ_;
		ArrayExtensions_obj();

	public:
		enum { _hx_ClassId = 0x162eb103 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="verb.core.ArrayExtensions")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"verb.core.ArrayExtensions"); }

		inline static ::hx::ObjectPtr< ArrayExtensions_obj > __new() {
			::hx::ObjectPtr< ArrayExtensions_obj > __this = new ArrayExtensions_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< ArrayExtensions_obj > __alloc(::hx::Ctx *_hx_ctx) {
			ArrayExtensions_obj *__this = (ArrayExtensions_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ArrayExtensions_obj), false, "verb.core.ArrayExtensions"));
			*(void **)__this = ArrayExtensions_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ArrayExtensions_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ArrayExtensions",ed,4e,95,e7); }

		static void alloc(::cpp::VirtualArray a,int n);
		static ::Dynamic alloc_dyn();

		static ::cpp::VirtualArray reversed(::cpp::VirtualArray a);
		static ::Dynamic reversed_dyn();

		static  ::Dynamic last(::cpp::VirtualArray a);
		static ::Dynamic last_dyn();

		static  ::Dynamic first(::cpp::VirtualArray a);
		static ::Dynamic first_dyn();

		static void spliceAndInsert(::cpp::VirtualArray a,int start,int end, ::Dynamic ele);
		static ::Dynamic spliceAndInsert_dyn();

		static ::cpp::VirtualArray left(::cpp::VirtualArray arr);
		static ::Dynamic left_dyn();

		static ::cpp::VirtualArray right(::cpp::VirtualArray arr);
		static ::Dynamic right_dyn();

		static ::cpp::VirtualArray rightWithPivot(::cpp::VirtualArray arr);
		static ::Dynamic rightWithPivot_dyn();

		static ::cpp::VirtualArray unique(::cpp::VirtualArray arr, ::Dynamic comp);
		static ::Dynamic unique_dyn();

};

} // end namespace verb
} // end namespace core

#endif /* INCLUDED_verb_core_ArrayExtensions */ 
