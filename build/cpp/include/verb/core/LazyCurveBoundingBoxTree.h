// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_core_LazyCurveBoundingBoxTree
#define INCLUDED_verb_core_LazyCurveBoundingBoxTree

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_verb_eval_IBoundingBoxTree
#include <verb/eval/IBoundingBoxTree.h>
#endif
HX_DECLARE_CLASS2(verb,core,BoundingBox)
HX_DECLARE_CLASS2(verb,core,LazyCurveBoundingBoxTree)
HX_DECLARE_CLASS2(verb,core,NurbsCurveData)
HX_DECLARE_CLASS2(verb,core,Pair)
HX_DECLARE_CLASS2(verb,core,SerializableBase)
HX_DECLARE_CLASS2(verb,eval,IBoundingBoxTree)

namespace verb{
namespace core{


class HXCPP_CLASS_ATTRIBUTES LazyCurveBoundingBoxTree_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef LazyCurveBoundingBoxTree_obj OBJ_;
		LazyCurveBoundingBoxTree_obj();

	public:
		enum { _hx_ClassId = 0x435b6490 };

		void __construct( ::verb::core::NurbsCurveData curve, ::Dynamic knotTol);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="verb.core.LazyCurveBoundingBoxTree")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"verb.core.LazyCurveBoundingBoxTree"); }
		static ::hx::ObjectPtr< LazyCurveBoundingBoxTree_obj > __new( ::verb::core::NurbsCurveData curve, ::Dynamic knotTol);
		static ::hx::ObjectPtr< LazyCurveBoundingBoxTree_obj > __alloc(::hx::Ctx *_hx_ctx, ::verb::core::NurbsCurveData curve, ::Dynamic knotTol);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~LazyCurveBoundingBoxTree_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		 ::Dynamic yield_2aa2127b();
		::String __ToString() const { return HX_("LazyCurveBoundingBoxTree",ca,2c,a5,34); }

		 ::verb::core::NurbsCurveData _curve;
		 ::verb::core::BoundingBox _boundingBox;
		Float _knotTol;
		 ::verb::core::Pair split();
		::Dynamic split_dyn();

		 ::verb::core::BoundingBox boundingBox();
		::Dynamic boundingBox_dyn();

		 ::verb::core::NurbsCurveData yield();
		::Dynamic yield_dyn();

		bool indivisible(Float tolerance);
		::Dynamic indivisible_dyn();

		bool empty();
		::Dynamic empty_dyn();

};

} // end namespace verb
} // end namespace core

#endif /* INCLUDED_verb_core_LazyCurveBoundingBoxTree */ 
