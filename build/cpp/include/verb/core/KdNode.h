// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_core_KdNode
#define INCLUDED_verb_core_KdNode

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(verb,core,KdNode)
HX_DECLARE_CLASS2(verb,core,KdPoint)

namespace verb{
namespace core{


class HXCPP_CLASS_ATTRIBUTES KdNode_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef KdNode_obj OBJ_;
		KdNode_obj();

	public:
		enum { _hx_ClassId = 0x6e9061d9 };

		void __construct( ::verb::core::KdPoint kdPoint,int dimension, ::verb::core::KdNode parent);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="verb.core.KdNode")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"verb.core.KdNode"); }
		static ::hx::ObjectPtr< KdNode_obj > __new( ::verb::core::KdPoint kdPoint,int dimension, ::verb::core::KdNode parent);
		static ::hx::ObjectPtr< KdNode_obj > __alloc(::hx::Ctx *_hx_ctx, ::verb::core::KdPoint kdPoint,int dimension, ::verb::core::KdNode parent);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~KdNode_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("KdNode",5b,48,b9,c4); }

		 ::verb::core::KdPoint kdPoint;
		 ::verb::core::KdNode left;
		 ::verb::core::KdNode right;
		 ::verb::core::KdNode parent;
		int dimension;
};

} // end namespace verb
} // end namespace core

#endif /* INCLUDED_verb_core_KdNode */ 
