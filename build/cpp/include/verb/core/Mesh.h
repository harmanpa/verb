// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_core_Mesh
#define INCLUDED_verb_core_Mesh

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(verb,core,BoundingBox)
HX_DECLARE_CLASS2(verb,core,Mesh)
HX_DECLARE_CLASS2(verb,core,MeshData)
HX_DECLARE_CLASS2(verb,core,SerializableBase)

namespace verb{
namespace core{


class HXCPP_CLASS_ATTRIBUTES Mesh_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Mesh_obj OBJ_;
		Mesh_obj();

	public:
		enum { _hx_ClassId = 0x6707940b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="verb.core.Mesh")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"verb.core.Mesh"); }

		inline static ::hx::ObjectPtr< Mesh_obj > __new() {
			::hx::ObjectPtr< Mesh_obj > __this = new Mesh_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Mesh_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Mesh_obj *__this = (Mesh_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Mesh_obj), false, "verb.core.Mesh"));
			*(void **)__this = Mesh_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Mesh_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Mesh",0d,76,32,33); }

		static ::Array< Float > getTriangleNorm(::Array< ::Dynamic> points,::Array< int > tri);
		static ::Dynamic getTriangleNorm_dyn();

		static  ::verb::core::BoundingBox makeMeshAabb( ::verb::core::MeshData mesh,::Array< int > faceIndices);
		static ::Dynamic makeMeshAabb_dyn();

		static ::Array< int > sortTrianglesOnLongestAxis( ::verb::core::BoundingBox bb, ::verb::core::MeshData mesh,::Array< int > faceIndices);
		static ::Dynamic sortTrianglesOnLongestAxis_dyn();

		static Float getMinCoordOnAxis(::Array< ::Dynamic> points,::Array< int > tri,int axis);
		static ::Dynamic getMinCoordOnAxis_dyn();

		static ::Array< Float > getTriangleCentroid(::Array< ::Dynamic> points,::Array< int > tri);
		static ::Dynamic getTriangleCentroid_dyn();

		static ::Array< Float > triangleUVFromPoint( ::verb::core::MeshData mesh,int faceIndex,::Array< Float > f);
		static ::Dynamic triangleUVFromPoint_dyn();

};

} // end namespace verb
} // end namespace core

#endif /* INCLUDED_verb_core_Mesh */ 
