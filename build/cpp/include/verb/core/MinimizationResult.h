// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_core_MinimizationResult
#define INCLUDED_verb_core_MinimizationResult

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_7da8099096ccb318_160_new)
HX_DECLARE_CLASS2(verb,core,MinimizationResult)

namespace verb{
namespace core{


class HXCPP_CLASS_ATTRIBUTES MinimizationResult_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef MinimizationResult_obj OBJ_;
		MinimizationResult_obj();

	public:
		enum { _hx_ClassId = 0x6b9948d1 };

		void __construct(::Array< Float > solution,Float value,::Array< Float > gradient,::Array< ::Dynamic> invHessian,int iterations,::String message);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="verb.core.MinimizationResult")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"verb.core.MinimizationResult"); }

		inline static ::hx::ObjectPtr< MinimizationResult_obj > __new(::Array< Float > solution,Float value,::Array< Float > gradient,::Array< ::Dynamic> invHessian,int iterations,::String message) {
			::hx::ObjectPtr< MinimizationResult_obj > __this = new MinimizationResult_obj();
			__this->__construct(solution,value,gradient,invHessian,iterations,message);
			return __this;
		}

		inline static ::hx::ObjectPtr< MinimizationResult_obj > __alloc(::hx::Ctx *_hx_ctx,::Array< Float > solution,Float value,::Array< Float > gradient,::Array< ::Dynamic> invHessian,int iterations,::String message) {
			MinimizationResult_obj *__this = (MinimizationResult_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MinimizationResult_obj), true, "verb.core.MinimizationResult"));
			*(void **)__this = MinimizationResult_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_7da8099096ccb318_160_new)
HXLINE( 161)		( ( ::verb::core::MinimizationResult)(__this) )->solution = solution;
HXLINE( 162)		( ( ::verb::core::MinimizationResult)(__this) )->value = value;
HXLINE( 163)		( ( ::verb::core::MinimizationResult)(__this) )->gradient = gradient;
HXLINE( 164)		( ( ::verb::core::MinimizationResult)(__this) )->invHessian = invHessian;
HXLINE( 165)		( ( ::verb::core::MinimizationResult)(__this) )->iterations = iterations;
HXLINE( 166)		( ( ::verb::core::MinimizationResult)(__this) )->message = message;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MinimizationResult_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MinimizationResult",8b,c9,2a,28); }

		::Array< Float > solution;
		Float value;
		::Array< Float > gradient;
		::Array< ::Dynamic> invHessian;
		int iterations;
		::String message;
};

} // end namespace verb
} // end namespace core

#endif /* INCLUDED_verb_core_MinimizationResult */ 
