// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_geom_NurbsCurve
#define INCLUDED_verb_geom_NurbsCurve

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_verb_core_SerializableBase
#include <verb/core/SerializableBase.h>
#endif
#ifndef INCLUDED_verb_geom_ICurve
#include <verb/geom/ICurve.h>
#endif
HX_DECLARE_CLASS2(verb,core,ISerializable)
HX_DECLARE_CLASS2(verb,core,Interval)
HX_DECLARE_CLASS2(verb,core,NurbsCurveData)
HX_DECLARE_CLASS2(verb,core,SerializableBase)
HX_DECLARE_CLASS2(verb,eval,CurveLengthSample)
HX_DECLARE_CLASS2(verb,geom,ICurve)
HX_DECLARE_CLASS2(verb,geom,NurbsCurve)

namespace verb{
namespace geom{


class HXCPP_CLASS_ATTRIBUTES NurbsCurve_obj : public  ::verb::core::SerializableBase_obj
{
	public:
		typedef  ::verb::core::SerializableBase_obj super;
		typedef NurbsCurve_obj OBJ_;
		NurbsCurve_obj();

	public:
		enum { _hx_ClassId = 0x69541c12 };

		void __construct( ::verb::core::NurbsCurveData data);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="verb.geom.NurbsCurve")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"verb.geom.NurbsCurve"); }
		static ::hx::ObjectPtr< NurbsCurve_obj > __new( ::verb::core::NurbsCurveData data);
		static ::hx::ObjectPtr< NurbsCurve_obj > __alloc(::hx::Ctx *_hx_ctx, ::verb::core::NurbsCurveData data);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~NurbsCurve_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("NurbsCurve",53,06,44,3f); }

		static  ::verb::geom::NurbsCurve byKnotsControlPointsWeights(int degree,::Array< Float > knots,::Array< ::Dynamic> controlPoints,::Array< Float > weights);
		static ::Dynamic byKnotsControlPointsWeights_dyn();

		static  ::verb::geom::NurbsCurve byPoints(::Array< ::Dynamic> points,::hx::Null< int >  degree);
		static ::Dynamic byPoints_dyn();

		 ::verb::core::NurbsCurveData _data;
		int degree();
		::Dynamic degree_dyn();

		::Array< Float > knots();
		::Dynamic knots_dyn();

		::Array< ::Dynamic> controlPoints();
		::Dynamic controlPoints_dyn();

		::Array< Float > weights();
		::Dynamic weights_dyn();

		 ::verb::core::NurbsCurveData asNurbs();
		::Dynamic asNurbs_dyn();

		 ::verb::geom::NurbsCurve clone();
		::Dynamic clone_dyn();

		 ::verb::core::Interval domain();
		::Dynamic domain_dyn();

		 ::verb::geom::NurbsCurve transform(::Array< ::Dynamic> mat);
		::Dynamic transform_dyn();

		::Array< Float > point(Float u);
		::Dynamic point_dyn();

		::Array< Float > tangent(Float u);
		::Dynamic tangent_dyn();

		::Array< ::Dynamic> derivatives(Float u,::hx::Null< int >  numDerivs);
		::Dynamic derivatives_dyn();

		::Array< Float > closestPoint(::Array< Float > pt);
		::Dynamic closestPoint_dyn();

		Float closestParam(::Array< Float > pt);
		::Dynamic closestParam_dyn();

		Float length();
		::Dynamic length_dyn();

		Float lengthAtParam(Float u);
		::Dynamic lengthAtParam_dyn();

		Float paramAtLength(Float len, ::Dynamic tolerance);
		::Dynamic paramAtLength_dyn();

		::Array< ::Dynamic> divideByEqualArcLength(int divisions);
		::Dynamic divideByEqualArcLength_dyn();

		::Array< ::Dynamic> divideByArcLength(Float arcLength);
		::Dynamic divideByArcLength_dyn();

		::Array< ::Dynamic> split(Float u);
		::Dynamic split_dyn();

		 ::verb::geom::NurbsCurve reverse();
		::Dynamic reverse_dyn();

		::Array< ::Dynamic> tessellate( ::Dynamic tolerance);
		::Dynamic tessellate_dyn();

};

} // end namespace verb
} // end namespace geom

#endif /* INCLUDED_verb_geom_NurbsCurve */ 
