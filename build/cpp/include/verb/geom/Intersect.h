// Generated by Haxe 4.1.4
#ifndef INCLUDED_verb_geom_Intersect
#define INCLUDED_verb_geom_Intersect

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(verb,core,CurveCurveIntersection)
HX_DECLARE_CLASS2(verb,core,CurveSurfaceIntersection)
HX_DECLARE_CLASS2(verb,core,ISerializable)
HX_DECLARE_CLASS2(verb,core,SerializableBase)
HX_DECLARE_CLASS2(verb,geom,ICurve)
HX_DECLARE_CLASS2(verb,geom,ISurface)
HX_DECLARE_CLASS2(verb,geom,Intersect)
HX_DECLARE_CLASS2(verb,geom,NurbsCurve)

namespace verb{
namespace geom{


class HXCPP_CLASS_ATTRIBUTES Intersect_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Intersect_obj OBJ_;
		Intersect_obj();

	public:
		enum { _hx_ClassId = 0x19e193fc };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="verb.geom.Intersect")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"verb.geom.Intersect"); }

		inline static ::hx::ObjectPtr< Intersect_obj > __new() {
			::hx::ObjectPtr< Intersect_obj > __this = new Intersect_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Intersect_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Intersect_obj *__this = (Intersect_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Intersect_obj), false, "verb.geom.Intersect"));
			*(void **)__this = Intersect_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Intersect_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Intersect",bf,e0,47,e4); }

		static ::Array< ::Dynamic> curves(::Dynamic first,::Dynamic second,::hx::Null< Float >  tol);
		static ::Dynamic curves_dyn();

		static ::Array< ::Dynamic> curveAndSurface(::Dynamic curve,::Dynamic surface,::hx::Null< Float >  tol);
		static ::Dynamic curveAndSurface_dyn();

		static ::Array< ::Dynamic> surfaces(::Dynamic first,::Dynamic second,::hx::Null< Float >  tol);
		static ::Dynamic surfaces_dyn();

};

} // end namespace verb
} // end namespace geom

#endif /* INCLUDED_verb_geom_Intersect */ 
