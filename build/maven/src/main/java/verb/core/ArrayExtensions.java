// Generated by Haxe 4.1.4
package verb.core;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class ArrayExtensions extends haxe.lang.HxObject
{
	public ArrayExtensions(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public ArrayExtensions()
	{
		//line 3 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		verb.core.ArrayExtensions.__hx_ctor_verb_core_ArrayExtensions(this);
	}
	
	
	protected static void __hx_ctor_verb_core_ArrayExtensions(verb.core.ArrayExtensions __hx_this)
	{
	}
	
	
	public static <T> void alloc(haxe.root.Array<T> a, int n)
	{
		//line 17 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		if (( n < 0 )) 
		{
			//line 17 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
			return ;
		}
		
		//line 18 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		while (( a.length < n ))
		{
			//line 19 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
			a.push(null);
		}
		
	}
	
	
	public static <T> haxe.root.Array<T> reversed(haxe.root.Array<T> a)
	{
		//line 34 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		haxe.root.Array<T> ac = a.copy();
		//line 35 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		ac.reverse();
		//line 36 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		return ac;
	}
	
	
	public static <T> T last(haxe.root.Array<T> a)
	{
		//line 50 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		return a.__get(( a.length - 1 ));
	}
	
	
	public static <T> T first(haxe.root.Array<T> a)
	{
		//line 64 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		return a.__get(0);
	}
	
	
	public static <T> void spliceAndInsert(haxe.root.Array<T> a, int start, int end, T ele)
	{
		//line 68 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		a.spliceVoid(start, end);
		//line 69 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		a.insert(start, ele);
	}
	
	
	public static <T> haxe.root.Array<T> left(haxe.root.Array<T> arr)
	{
		//line 83 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		if (( arr.length == 0 )) 
		{
			//line 83 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
			return new haxe.root.Array<T>(( (T[]) (new java.lang.Object[] {}) ));
		}
		
		//line 84 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		int len = ((int) (java.lang.Math.ceil(( ((double) (arr.length) ) / 2 ))) );
		//line 85 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		return arr.slice(0, len);
	}
	
	
	public static <T> haxe.root.Array<T> right(haxe.root.Array<T> arr)
	{
		//line 99 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		if (( arr.length == 0 )) 
		{
			//line 99 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
			return new haxe.root.Array<T>(( (T[]) (new java.lang.Object[] {}) ));
		}
		
		//line 100 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		int len = ((int) (java.lang.Math.ceil(( ((double) (arr.length) ) / 2 ))) );
		//line 101 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		return arr.slice(len, null);
	}
	
	
	public static <T> haxe.root.Array<T> rightWithPivot(haxe.root.Array<T> arr)
	{
		//line 115 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		if (( arr.length == 0 )) 
		{
			//line 115 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
			return new haxe.root.Array<T>(( (T[]) (new java.lang.Object[] {}) ));
		}
		
		//line 116 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		int len = ((int) (java.lang.Math.ceil(( ((double) (arr.length) ) / 2 ))) );
		//line 117 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		return arr.slice(( len - 1 ), null);
	}
	
	
	public static <T> haxe.root.Array<T> unique(haxe.root.Array<T> arr, haxe.lang.Function comp)
	{
		//line 134 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		haxe.root.Array<T> uniques = new haxe.root.Array<T>(( (T[]) (new java.lang.Object[] {}) ));
		//line 136 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		if (( arr.length == 0 )) 
		{
			//line 136 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
			return uniques;
		}
		
		//line 138 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		uniques.push(((T) (arr.pop()) ));
		//line 140 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		while (( arr.length > 0 ))
		{
			//line 142 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
			java.lang.Object ele = arr.pop();
			//line 143 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
			boolean isUnique = true;
			//line 145 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
			{
				//line 145 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
				int _g = 0;
				//line 145 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
				while (( _g < uniques.length ))
				{
					//line 145 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
					T unique = uniques.__get(_g);
					//line 145 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
					 ++ _g;
					//line 146 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
					if (haxe.lang.Runtime.toBool(((java.lang.Boolean) (comp.__hx_invoke2_o(0.0, ele, 0.0, unique)) ))) 
					{
						//line 147 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
						isUnique = false;
						//line 148 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
						break;
					}
					
				}
				
			}
			
			//line 152 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
			if (isUnique) 
			{
				//line 153 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
				uniques.push(((T) (ele) ));
			}
			
		}
		
		//line 157 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\ArrayExtensions.hx"
		return uniques;
	}
	
	
}


