// Generated by Haxe 4.1.4
package verb.core;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Minimizer extends haxe.lang.HxObject
{
	public Minimizer(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Minimizer()
	{
		//line 8 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
		verb.core.Minimizer.__hx_ctor_verb_core_Minimizer(this);
	}
	
	
	protected static void __hx_ctor_verb_core_Minimizer(verb.core.Minimizer __hx_this)
	{
	}
	
	
	public static verb.core.MinimizationResult uncmin(haxe.lang.Function f, org.apache.commons.math3.linear.ArrayRealVector x0, java.lang.Object tol, haxe.lang.Function gradient, java.lang.Object maxit)
	{
		//line 10 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
		try 
		{
			//line 12 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			if (haxe.lang.Runtime.eq(tol, null)) 
			{
				//line 12 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				tol = 1e-8;
			}
			
			//line 13 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			if (( gradient == null )) 
			{
				//line 13 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				gradient = new verb.core.Minimizer_uncmin_13__Fun(f);
			}
			
			//line 14 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			if (haxe.lang.Runtime.eq(maxit, null)) 
			{
				//line 14 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				maxit = 1000;
			}
			
			//line 16 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			java.lang.Object end = null;
			//line 16 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			if (haxe.lang.Runtime.eq(end, null)) 
			{
				//line 16 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				end = ((org.apache.commons.math3.linear.ArrayRealVector) (x0) ).getDimension();
			}
			
			//line 16 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			x0 = verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.RealVector) (((org.apache.commons.math3.linear.ArrayRealVector) (x0) ).getSubVector(((int) (0) ), ((int) (haxe.lang.Runtime.toInt(end)) ))) )));
			//line 17 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			int n = verb.core._Data.Vector_Impl_.get_length(x0);
			//line 18 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			double f0 = ((double) (f.__hx_invoke1_f(0.0, x0)) );
			//line 18 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			double f1 = f0;
			//line 18 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			double df0 = 0.0;
			//line 20 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			if (java.lang.Double.isNaN(f0)) 
			{
				//line 20 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown("uncmin: f(x0) is a NaN!")) );
			}
			
			//line 22 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			tol = java.lang.Math.max(((double) (haxe.lang.Runtime.toDouble(tol)) ), verb.core.Constants.EPSILON);
			//line 23 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			org.apache.commons.math3.linear.ArrayRealVector step = null;
			//line 25 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			org.apache.commons.math3.linear.ArrayRealVector g1 = null;
			//line 26 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> H1 = verb.core.Mat.identity(n);
			//line 27 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			int it = 0;
			//line 27 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			java.lang.Object i = null;
			//line 27 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			org.apache.commons.math3.linear.ArrayRealVector x1 = null;
			//line 27 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			org.apache.commons.math3.linear.ArrayRealVector y = null;
			//line 27 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			org.apache.commons.math3.linear.ArrayRealVector Hy = null;
			//line 27 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			java.lang.Object Hs = null;
			//line 27 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			double ys = 0.0;
			//line 27 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			java.lang.Object i0 = null;
			//line 27 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			double t = 0.0;
			//line 27 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			double nstep = 0.0;
			//line 27 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			java.lang.Object t1 = null;
			//line 27 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			java.lang.Object t2 = null;
			//line 28 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			org.apache.commons.math3.linear.ArrayRealVector s = verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{}));
			//line 29 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			java.lang.String msg = "";
			//line 24 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			org.apache.commons.math3.linear.ArrayRealVector g0 = ((org.apache.commons.math3.linear.ArrayRealVector) (((haxe.lang.Function) (gradient) ).__hx_invoke1_o(0.0, x0)) );
			//line 32 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			while (( it < ((int) (haxe.lang.Runtime.toInt(maxit)) ) ))
			{
				//line 34 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				if ( ! (verb.core.Vec.all(verb.core.Vec.finite(g0))) ) 
				{
					//line 34 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					msg = "Gradient has Infinity or NaN";
					//line 34 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					break;
				}
				
				//line 35 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				step = verb.core.Vec.neg(verb.core.Mat.dot(H1, g0));
				//line 37 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				if ( ! (verb.core.Vec.all(verb.core.Vec.finite(step))) ) 
				{
					//line 37 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					msg = "Search direction has Infinity or NaN";
					//line 37 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					break;
				}
				
				//line 39 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				nstep = verb.core.Vec.norm(step);
				//line 40 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				if (( nstep < ((double) (haxe.lang.Runtime.toDouble(tol)) ) )) 
				{
					//line 40 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					msg = "Newton step smaller than tol";
					//line 40 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					break;
				}
				
				//line 42 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				t = 1.0;
				//line 43 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				df0 = verb.core.Vec.dot(g0, step);
				//line 46 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				x1 = x0;
				//line 47 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				while (( it < ((int) (haxe.lang.Runtime.toInt(maxit)) ) ))
				{
					//line 48 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					if (( ( t * nstep ) < ((double) (haxe.lang.Runtime.toDouble(tol)) ) )) 
					{
						//line 48 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						break;
					}
					
					//line 49 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					s = verb.core.Vec.mul(t, step);
					//line 50 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					x1 = verb.core.Vec.add(x0, s);
					//line 51 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					f1 = ((double) (f.__hx_invoke1_f(0.0, x1)) );
					//line 52 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					if (( ( ( f1 - f0 ) >= ( ( 0.1 * t ) * df0 ) ) || java.lang.Double.isNaN(f1) )) 
					{
						//line 53 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						t *= 0.5;
						//line 54 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						 ++ it;
						//line 55 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						continue;
					}
					
					//line 57 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					break;
				}
				
				//line 60 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				if (( ( t * nstep ) < ((double) (haxe.lang.Runtime.toDouble(tol)) ) )) 
				{
					//line 60 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					msg = "Line search step size smaller than tol";
					//line 60 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					break;
				}
				
				//line 61 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				if (haxe.lang.Runtime.eq(it, maxit)) 
				{
					//line 61 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					msg = "maxit reached during line search";
					//line 61 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					break;
				}
				
				//line 63 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				g1 = ((org.apache.commons.math3.linear.ArrayRealVector) (((haxe.lang.Function) (gradient) ).__hx_invoke1_o(0.0, x1)) );
				//line 64 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				y = verb.core.Vec.sub(g1, g0);
				//line 65 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				ys = verb.core.Vec.dot(y, s);
				//line 66 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				Hy = verb.core.Mat.dot(H1, y);
				//line 67 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				H1 = verb.core.Mat.sub(verb.core.Mat.add(H1, verb.core.Mat.mul(( (( ys + verb.core.Vec.dot(y, Hy) )) / (( ys * ys )) ), verb.core.Minimizer.tensor(s, s))), verb.core.Mat.div(verb.core.Mat.add(verb.core.Minimizer.tensor(Hy, s), verb.core.Minimizer.tensor(s, Hy)), ys));
				//line 70 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				x0 = x1;
				//line 71 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				f0 = f1;
				//line 72 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				g0 = g1;
				//line 73 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				 ++ it;
			}
			
			//line 76 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			return new verb.core.MinimizationResult(x0, f0, g0, H1, it, msg);
		}
		catch (java.lang.Throwable typedException)
		{
			//line 10 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector numericalGradient(haxe.lang.Function f, org.apache.commons.math3.linear.ArrayRealVector x)
	{
		//line 79 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
		try 
		{
			//line 81 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			int n = verb.core._Data.Vector_Impl_.get_length(x);
			//line 82 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			double f0 = ((double) (f.__hx_invoke1_f(0.0, x)) );
			//line 84 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			if (( f0 == java.lang.Double.NaN )) 
			{
				//line 84 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				throw ((java.lang.RuntimeException) (haxe.Exception.thrown("gradient: f(x) is a NaN!")) );
			}
			
			//line 86 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			java.lang.Object i = null;
			//line 86 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			java.lang.Object end = null;
			//line 86 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			if (haxe.lang.Runtime.eq(end, null)) 
			{
				//line 86 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				end = ((org.apache.commons.math3.linear.ArrayRealVector) (x) ).getDimension();
			}
			
			//line 86 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			org.apache.commons.math3.linear.ArrayRealVector x0 = verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.RealVector) (((org.apache.commons.math3.linear.ArrayRealVector) (x) ).getSubVector(((int) (0) ), ((int) (haxe.lang.Runtime.toInt(end)) ))) )));
			//line 86 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			double f1 = 0.0;
			//line 86 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			double f2 = 0.0;
			//line 86 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			haxe.root.Array<java.lang.Object> J = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
			//line 88 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			double errest = 0.0;
			//line 88 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			java.lang.Object roundoff = null;
			//line 88 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			double eps = 1e-3;
			//line 89 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			double t0 = 0.0;
			//line 89 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			double t1 = 0.0;
			//line 89 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			double t2 = 0.0;
			//line 89 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			int it = 0;
			//line 89 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			double d1 = 0.0;
			//line 89 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			double d2 = 0.0;
			//line 89 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			double N = 0.0;
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			{
				//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				int _g = 0;
				//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				int _g1 = n;
				//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				while (( _g < _g1 ))
				{
					//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					int i1 = _g++;
					//line 93 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					double h = java.lang.Math.max(( 1e-6 * f0 ), 1e-8);
					//line 95 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					while (true)
					{
						//line 96 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						 ++ it;
						//line 97 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						if (( it > 20 )) 
						{
							//line 97 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
							throw ((java.lang.RuntimeException) (haxe.Exception.thrown("Numerical gradient fails")) );
						}
						
						//line 98 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						{
							//line 98 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
							double v = ( ((org.apache.commons.math3.linear.ArrayRealVector) (x) ).getEntry(((int) (i1) )) + h );
							//line 98 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
							((org.apache.commons.math3.linear.ArrayRealVector) (x0) ).setEntry(((int) (i1) ), ((double) (v) ));
						}
						
						//line 99 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						f1 = ((double) (f.__hx_invoke1_f(0.0, x0)) );
						//line 100 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						{
							//line 100 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
							double v1 = ( ((org.apache.commons.math3.linear.ArrayRealVector) (x) ).getEntry(((int) (i1) )) - h );
							//line 100 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
							((org.apache.commons.math3.linear.ArrayRealVector) (x0) ).setEntry(((int) (i1) ), ((double) (v1) ));
						}
						
						//line 101 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						f2 = ((double) (f.__hx_invoke1_f(0.0, x0)) );
						//line 102 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						{
							//line 102 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
							double v2 = ((org.apache.commons.math3.linear.ArrayRealVector) (x) ).getEntry(((int) (i1) ));
							//line 102 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
							((org.apache.commons.math3.linear.ArrayRealVector) (x0) ).setEntry(((int) (i1) ), ((double) (v2) ));
						}
						
						//line 104 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						if (( java.lang.Double.isNaN(f1) || java.lang.Double.isNaN(f2) )) 
						{
							//line 104 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
							h /= ((double) (16) );
							//line 104 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
							continue;
						}
						
						//line 106 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						double __temp_expr1 = ((double) (haxe.lang.Runtime.toDouble(J.__set(i1, ( (( f1 - f2 )) / (( 2 * h )) )))) );
						//line 107 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						t0 = ( ((org.apache.commons.math3.linear.ArrayRealVector) (x) ).getEntry(((int) (i1) )) - h );
						//line 108 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						t1 = ((org.apache.commons.math3.linear.ArrayRealVector) (x) ).getEntry(((int) (i1) ));
						//line 109 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						t2 = ( ((org.apache.commons.math3.linear.ArrayRealVector) (x) ).getEntry(((int) (i1) )) + h );
						//line 110 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						d1 = ( (( f1 - f0 )) / h );
						//line 111 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						d2 = ( (( f0 - f2 )) / h );
						//line 112 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						N = verb.core.Vec.max(verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (java.lang.Math.abs(((double) (haxe.lang.Runtime.toDouble(J.__get(i1))) ))) ), ((java.lang.Object) (java.lang.Math.abs(f0)) ), ((java.lang.Object) (java.lang.Math.abs(f1)) ), ((java.lang.Object) (java.lang.Math.abs(f2)) ), ((java.lang.Object) (java.lang.Math.abs(t0)) ), ((java.lang.Object) (java.lang.Math.abs(t1)) ), ((java.lang.Object) (java.lang.Math.abs(t2)) ), ((java.lang.Object) (1e-8) )})));
						//line 114 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						errest = java.lang.Math.min(( verb.core.Vec.max(verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (java.lang.Math.abs(( d1 - ((double) (haxe.lang.Runtime.toDouble(J.__get(i1))) ) ))) ), ((java.lang.Object) (java.lang.Math.abs(( d2 - ((double) (haxe.lang.Runtime.toDouble(J.__get(i1))) ) ))) ), ((java.lang.Object) (java.lang.Math.abs(( d1 - d2 ))) )}))) / N ), ( h / N ));
						//line 116 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
						if (( errest > eps )) 
						{
							//line 116 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
							h /= ((double) (16) );
						}
						else
						{
							//line 116 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
							break;
						}
						
					}
					
				}
				
			}
			
			//line 120 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			return verb.core._Data.Vector_Impl_.fromArray(J);
		}
		catch (java.lang.Throwable typedException)
		{
			//line 79 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> tensor(org.apache.commons.math3.linear.ArrayRealVector x, org.apache.commons.math3.linear.ArrayRealVector y)
	{
		//line 123 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
		try 
		{
			//line 125 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			int m = verb.core._Data.Vector_Impl_.get_length(x);
			//line 125 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			int n = verb.core._Data.Vector_Impl_.get_length(y);
			//line 125 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			haxe.root.Array<java.lang.Object> Ai = null;
			//line 125 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			double xi = 0.0;
			//line 126 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> A = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>();
			//line 127 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			int i = ( m - 1 );
			//line 128 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			while (( i >= 0 ))
			{
				//line 129 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				Ai = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
				//line 130 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				xi = ((org.apache.commons.math3.linear.ArrayRealVector) (x) ).getEntry(((int) (i) ));
				//line 131 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				int j = ( n - 1 );
				//line 132 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				while (( j >= 3 ))
				{
					//line 133 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					double __temp_expr1 = ((double) (haxe.lang.Runtime.toDouble(Ai.__set(j, ( xi * ((org.apache.commons.math3.linear.ArrayRealVector) (y) ).getEntry(((int) (j) )) )))) );
					//line 134 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					 -- j;
					//line 135 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					double __temp_expr2 = ((double) (haxe.lang.Runtime.toDouble(Ai.__set(j, ( xi * ((org.apache.commons.math3.linear.ArrayRealVector) (y) ).getEntry(((int) (j) )) )))) );
					//line 136 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					 -- j;
					//line 137 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					double __temp_expr3 = ((double) (haxe.lang.Runtime.toDouble(Ai.__set(j, ( xi * ((org.apache.commons.math3.linear.ArrayRealVector) (y) ).getEntry(((int) (j) )) )))) );
					//line 138 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					 -- j;
					//line 139 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					double __temp_expr4 = ((double) (haxe.lang.Runtime.toDouble(Ai.__set(j, ( xi * ((org.apache.commons.math3.linear.ArrayRealVector) (y) ).getEntry(((int) (j) )) )))) );
					//line 140 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					 -- j;
				}
				
				//line 142 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				while (( j >= 0 ))
				{
					//line 142 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					double __temp_expr5 = ((double) (haxe.lang.Runtime.toDouble(Ai.__set(j, ( xi * ((org.apache.commons.math3.linear.ArrayRealVector) (y) ).getEntry(((int) (j) )) )))) );
					//line 142 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
					 -- j;
				}
				
				//line 143 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				A.__set(i, verb.core._Data.Vector_Impl_.fromArray(Ai));
				//line 144 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
				 -- i;
			}
			
			//line 146 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			return A;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 123 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\Minimizer.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
}


