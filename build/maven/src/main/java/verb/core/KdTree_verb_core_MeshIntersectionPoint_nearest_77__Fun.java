// Generated by Haxe 4.1.4
package verb.core;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class KdTree_verb_core_MeshIntersectionPoint_nearest_77__Fun extends haxe.lang.Function
{
	public KdTree_verb_core_MeshIntersectionPoint_nearest_77__Fun(int maxNodes, verb.core.BinaryHeap_verb_core_KdNode_verb_core_MeshIntersectionPoint bestNodes)
	{
		//line 77 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\KdTree.hx"
		super(2, 0);
		//line 77 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\KdTree.hx"
		this.maxNodes = maxNodes;
		//line 77 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\KdTree.hx"
		this.bestNodes = bestNodes;
	}
	
	
	@Override public java.lang.Object __hx_invoke2_o(double __fn_float1, java.lang.Object __fn_dyn1, double __fn_float2, java.lang.Object __fn_dyn2)
	{
		//line 77 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\KdTree.hx"
		double distance = ( (( __fn_dyn2 == haxe.lang.Runtime.undefined )) ? (((double) (__fn_float2) )) : (((double) (haxe.lang.Runtime.toDouble(__fn_dyn2)) )) );
		//line 77 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\KdTree.hx"
		verb.core.KdNode_verb_core_MeshIntersectionPoint node = ( (( __fn_dyn1 == haxe.lang.Runtime.undefined )) ? (((verb.core.KdNode_verb_core_MeshIntersectionPoint) (((java.lang.Object) (__fn_float1) )) )) : (((verb.core.KdNode_verb_core_MeshIntersectionPoint) (__fn_dyn1) )) );
		//line 78 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\KdTree.hx"
		this.bestNodes.push(new verb.core.HeapElement_verb_core_KdNode_verb_core_MeshIntersectionPoint(node, distance));
		//line 79 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\KdTree.hx"
		if (( this.bestNodes.size() > this.maxNodes )) 
		{
			//line 80 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\KdTree.hx"
			this.bestNodes.pop();
		}
		
		//line 77 "C:\\Users\\peter\\Development\\verb\\src\\verb\\core\\KdTree.hx"
		return null;
	}
	
	
	public int maxNodes;
	
	public verb.core.BinaryHeap_verb_core_KdNode_verb_core_MeshIntersectionPoint bestNodes;
	
}


