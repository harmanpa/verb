// Generated by Haxe 4.1.4
package verb.eval;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class AdaptiveRefinementNode_getAllCorners_531__Fun extends haxe.lang.Function
{
	public AdaptiveRefinementNode_getAllCorners_531__Fun(verb.eval.AdaptiveRefinementNode that, double e)
	{
		//line 531 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		super(1, 0);
		//line 531 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		this.that = that;
		//line 531 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		this.e = e;
	}
	
	
	@Override public java.lang.Object __hx_invoke1_o(double __fn_float1, java.lang.Object __fn_dyn1)
	{
		//line 531 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
		try 
		{
			//line 531 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			verb.core.SurfacePoint c = ( (( __fn_dyn1 == haxe.lang.Runtime.undefined )) ? (((verb.core.SurfacePoint) (((java.lang.Object) (__fn_float1) )) )) : (((verb.core.SurfacePoint) (__fn_dyn1) )) );
			//line 531 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			if (( ((org.apache.commons.math3.linear.ArrayRealVector) (c.uv) ).getEntry(((int) (0) )) > ( ((org.apache.commons.math3.linear.ArrayRealVector) (this.that.corners.__get(0).uv) ).getEntry(((int) (0) )) + this.e ) )) 
			{
				//line 531 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				return ( ((org.apache.commons.math3.linear.ArrayRealVector) (c.uv) ).getEntry(((int) (0) )) < ( ((org.apache.commons.math3.linear.ArrayRealVector) (this.that.corners.__get(2).uv) ).getEntry(((int) (0) )) - this.e ) );
			}
			else
			{
				//line 531 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
				return false;
			}
			
		}
		catch (java.lang.Throwable typedException)
		{
			//line 531 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Tess.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public verb.eval.AdaptiveRefinementNode that;
	
	public double e;
	
}


