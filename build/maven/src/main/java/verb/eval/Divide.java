// Generated by Haxe 4.1.4
package verb.eval;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Divide extends haxe.lang.HxObject
{
	public Divide(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Divide()
	{
		//line 13 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
		verb.eval.Divide.__hx_ctor_verb_eval_Divide(this);
	}
	
	
	protected static void __hx_ctor_verb_eval_Divide(verb.eval.Divide __hx_this)
	{
	}
	
	
	public static haxe.root.Array<verb.core.NurbsSurfaceData> surfaceSplit(verb.core.NurbsSurfaceData surface, double u, java.lang.Object useV)
	{
		//line 27 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
		try 
		{
			//line 27 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			boolean useV1 = ( (haxe.lang.Runtime.eq(useV, null)) ? (false) : (haxe.lang.Runtime.toBool(((java.lang.Boolean) (useV) ))) );
			//line 29 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			org.apache.commons.math3.linear.ArrayRealVector knots = null;
			//line 29 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			int degree = 0;
			//line 29 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> controlPoints = null;
			//line 33 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			if ( ! (useV1) ) 
			{
				//line 34 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				controlPoints = ((haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>) (verb.core.Mat.transposeN(((haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>) (surface.controlPoints) ))) );
				//line 35 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				knots = surface.knotsU;
				//line 36 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				degree = surface.degreeU;
			}
			else
			{
				//line 38 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				controlPoints = surface.controlPoints;
				//line 39 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				knots = surface.knotsV;
				//line 40 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				degree = surface.degreeV;
			}
			
			//line 43 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			haxe.root.Array<java.lang.Object> _g = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
			//line 43 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			{
				//line 43 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				int _g1 = 0;
				//line 43 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				int _g2 = ( degree + 1 );
				//line 43 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				while (( _g1 < _g2 ))
				{
					//line 43 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
					int i = _g1++;
					//line 43 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
					_g.push(u);
				}
				
			}
			
			//line 43 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			haxe.root.Array<java.lang.Object> knots_to_insert = _g;
			//line 45 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> newpts0 = new haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>();
			//line 45 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> newpts1 = new haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>();
			//line 48 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			int s = verb.eval.Eval.knotSpan(degree, u, knots);
			//line 49 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			verb.core.NurbsCurveData res = null;
			//line 51 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			{
				//line 51 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				int _g3 = 0;
				//line 51 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				while (( _g3 < controlPoints.length ))
				{
					//line 51 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
					haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> cps = controlPoints.__get(_g3);
					//line 51 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
					 ++ _g3;
					//line 52 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
					res = verb.eval.Modify.curveKnotRefine(new verb.core.NurbsCurveData(degree, knots, cps), verb.core._Data.Vector_Impl_.fromArray(knots_to_insert));
					//line 54 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
					newpts0.push(res.controlPoints.slice(0, ( s + 1 )));
					//line 55 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
					newpts1.push(res.controlPoints.slice(( s + 1 ), null));
				}
				
			}
			
			//line 58 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			org.apache.commons.math3.linear.ArrayRealVector this1 = res.knots;
			//line 58 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			java.lang.Object end = ( ( s + degree ) + 2 );
			//line 58 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			if (haxe.lang.Runtime.eq(end, null)) 
			{
				//line 58 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				end = this1.getDimension();
			}
			
			//line 58 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			org.apache.commons.math3.linear.ArrayRealVector knots0 = verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.RealVector) (this1.getSubVector(((int) (0) ), ((int) (haxe.lang.Runtime.toInt(end)) ))) )));
			//line 59 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			org.apache.commons.math3.linear.ArrayRealVector this2 = res.knots;
			//line 59 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			int start = ( s + 1 );
			//line 59 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			java.lang.Object end1 = null;
			//line 59 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			if (haxe.lang.Runtime.eq(end1, null)) 
			{
				//line 59 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				end1 = ( this2.getDimension() - start );
			}
			
			//line 59 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			org.apache.commons.math3.linear.ArrayRealVector knots1 = verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.RealVector) (this2.getSubVector(((int) (start) ), ((int) (haxe.lang.Runtime.toInt(end1)) ))) )));
			//line 61 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			if ( ! (useV1) ) 
			{
				//line 62 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				newpts0 = ((haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>) (verb.core.Mat.transposeN(((haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>) (newpts0) ))) );
				//line 63 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				newpts1 = ((haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>) (verb.core.Mat.transposeN(((haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>) (newpts1) ))) );
				//line 65 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				return new haxe.root.Array<verb.core.NurbsSurfaceData>(new verb.core.NurbsSurfaceData[]{new verb.core.NurbsSurfaceData(degree, surface.degreeV, knots0, verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.ArrayRealVector) (surface.knotsV) ))), newpts0), new verb.core.NurbsSurfaceData(degree, surface.degreeV, knots1, verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.ArrayRealVector) (surface.knotsV) ))), newpts1)});
			}
			
			//line 70 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			return new haxe.root.Array<verb.core.NurbsSurfaceData>(new verb.core.NurbsSurfaceData[]{new verb.core.NurbsSurfaceData(surface.degreeU, degree, verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.ArrayRealVector) (surface.knotsU) ))), knots0, newpts0), new verb.core.NurbsSurfaceData(surface.degreeU, degree, verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.ArrayRealVector) (surface.knotsU) ))), knots1, newpts1)});
		}
		catch (java.lang.Throwable typedException)
		{
			//line 27 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<verb.core.NurbsCurveData> curveSplit(verb.core.NurbsCurveData curve, double u)
	{
		//line 85 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
		try 
		{
			//line 87 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			int degree = curve.degree;
			//line 87 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> controlPoints = curve.controlPoints;
			//line 87 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			org.apache.commons.math3.linear.ArrayRealVector knots = curve.knots;
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			haxe.root.Array<java.lang.Object> _g = new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{});
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			{
				//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				int _g1 = 0;
				//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				int _g2 = ( degree + 1 );
				//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				while (( _g1 < _g2 ))
				{
					//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
					int i = _g1++;
					//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
					_g.push(u);
				}
				
			}
			
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			org.apache.commons.math3.linear.ArrayRealVector knots_to_insert = verb.core._Data.Vector_Impl_.fromArray(_g);
			//line 92 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			verb.core.NurbsCurveData res = verb.eval.Modify.curveKnotRefine(curve, knots_to_insert);
			//line 94 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			int s = verb.eval.Eval.knotSpan(degree, u, knots);
			//line 96 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			org.apache.commons.math3.linear.ArrayRealVector this1 = res.knots;
			//line 96 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			java.lang.Object end = ( ( s + degree ) + 2 );
			//line 96 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			if (haxe.lang.Runtime.eq(end, null)) 
			{
				//line 96 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				end = this1.getDimension();
			}
			
			//line 96 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			org.apache.commons.math3.linear.ArrayRealVector knots0 = verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.RealVector) (this1.getSubVector(((int) (0) ), ((int) (haxe.lang.Runtime.toInt(end)) ))) )));
			//line 97 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			org.apache.commons.math3.linear.ArrayRealVector this2 = res.knots;
			//line 97 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			int start = ( s + 1 );
			//line 97 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			java.lang.Object end1 = null;
			//line 97 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			if (haxe.lang.Runtime.eq(end1, null)) 
			{
				//line 97 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				end1 = ( this2.getDimension() - start );
			}
			
			//line 97 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			org.apache.commons.math3.linear.ArrayRealVector knots1 = verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.RealVector) (this2.getSubVector(((int) (start) ), ((int) (haxe.lang.Runtime.toInt(end1)) ))) )));
			//line 99 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> cpts0 = res.controlPoints.slice(0, ( s + 1 ));
			//line 100 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> cpts1 = res.controlPoints.slice(( s + 1 ), null);
			//line 102 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			return new haxe.root.Array<verb.core.NurbsCurveData>(new verb.core.NurbsCurveData[]{new verb.core.NurbsCurveData(degree, knots0, cpts0), new verb.core.NurbsCurveData(degree, knots1, cpts1)});
		}
		catch (java.lang.Throwable typedException)
		{
			//line 85 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<verb.eval.CurveLengthSample> rationalCurveByEqualArcLength(verb.core.NurbsCurveData curve, int num)
	{
		//line 124 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
		double tlen = verb.eval.Analyze.rationalCurveArcLength(curve, null, null);
		//line 125 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
		double inc = ( tlen / num );
		//line 127 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
		return verb.eval.Divide.rationalCurveByArcLength(curve, inc);
	}
	
	
	public static haxe.root.Array<verb.eval.CurveLengthSample> rationalCurveByArcLength(verb.core.NurbsCurveData curve, double l)
	{
		//line 142 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
		try 
		{
			//line 144 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			haxe.root.Array<verb.core.NurbsCurveData> crvs = verb.eval.Modify.decomposeCurveIntoBeziers(curve);
			//line 145 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			haxe.root.Array<java.lang.Object> ret = ((haxe.root.Array<java.lang.Object>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (crvs.length) ))) )) );
			//line 145 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			{
				//line 145 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				int _g = 0;
				//line 145 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				int _g1 = crvs.length;
				//line 145 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				while (( _g < _g1 ))
				{
					//line 145 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
					int i = _g++;
					//line 145 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
					double __temp_expr1 = ((double) (haxe.lang.Runtime.toDouble(ret.__set(i, verb.eval.Analyze.rationalBezierCurveArcLength(crvs.__get(i), null, null)))) );
				}
				
			}
			
			//line 144 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			haxe.root.Array<java.lang.Object> crvlens = ret;
			//line 144 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			double totlen = verb.core.Vec.sum(verb.core._Data.Vector_Impl_.fromArray(crvlens));
			//line 144 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			haxe.root.Array<verb.eval.CurveLengthSample> pts = new haxe.root.Array<verb.eval.CurveLengthSample>(new verb.eval.CurveLengthSample[]{new verb.eval.CurveLengthSample(((org.apache.commons.math3.linear.ArrayRealVector) (curve.knots) ).getEntry(((int) (0) )), 0.0)});
			//line 149 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			if (( l > totlen )) 
			{
				//line 149 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				return pts;
			}
			
			//line 151 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			double inc = l;
			//line 151 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			int i1 = 0;
			//line 151 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			double lc = inc;
			//line 151 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			double runsum = 0.0;
			//line 151 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			double runsum1 = 0.0;
			//line 151 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			double u = 0.0;
			//line 158 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			while (( i1 < crvs.length ))
			{
				//line 160 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				runsum += ((double) (haxe.lang.Runtime.toDouble(crvlens.__get(i1))) );
				//line 162 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				while (( lc < ( runsum + verb.core.Constants.EPSILON ) ))
				{
					//line 164 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
					u = verb.eval.Analyze.rationalBezierCurveParamAtArcLength(crvs.__get(i1), ( lc - runsum1 ), verb.core.Constants.TOLERANCE, ((double) (haxe.lang.Runtime.toDouble(crvlens.__get(i1))) ));
					//line 166 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
					pts.push(new verb.eval.CurveLengthSample(u, lc));
					//line 167 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
					lc += inc;
				}
				
				//line 171 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				runsum1 += ((double) (haxe.lang.Runtime.toDouble(crvlens.__get(i1))) );
				//line 173 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
				 ++ i1;
			}
			
			//line 177 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			return pts;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 142 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Divide.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
}


