// Generated by Haxe 4.1.4
package verb.eval;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Analyze extends haxe.lang.HxObject
{
	static
	{
		//line 610 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
		verb.eval.Analyze.Tvalues = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (-0.5773502691896257645091487805019574556476) ), ((java.lang.Object) (0.5773502691896257645091487805019574556476) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (-0.7745966692414833770358530799564799221665) ), ((java.lang.Object) (0.7745966692414833770358530799564799221665) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (-0.3399810435848562648026657591032446872005) ), ((java.lang.Object) (0.3399810435848562648026657591032446872005) ), ((java.lang.Object) (-0.8611363115940525752239464888928095050957) ), ((java.lang.Object) (0.8611363115940525752239464888928095050957) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (-0.5384693101056830910363144207002088049672) ), ((java.lang.Object) (0.5384693101056830910363144207002088049672) ), ((java.lang.Object) (-0.9061798459386639927976268782993929651256) ), ((java.lang.Object) (0.9061798459386639927976268782993929651256) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.6612093864662645136613995950199053470064) ), ((java.lang.Object) (-0.6612093864662645136613995950199053470064) ), ((java.lang.Object) (-0.2386191860831969086305017216807119354186) ), ((java.lang.Object) (0.2386191860831969086305017216807119354186) ), ((java.lang.Object) (-0.9324695142031520278123015544939946091347) ), ((java.lang.Object) (0.9324695142031520278123015544939946091347) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (0.4058451513773971669066064120769614633473) ), ((java.lang.Object) (-0.4058451513773971669066064120769614633473) ), ((java.lang.Object) (-0.7415311855993944398638647732807884070741) ), ((java.lang.Object) (0.7415311855993944398638647732807884070741) ), ((java.lang.Object) (-0.9491079123427585245261896840478512624007) ), ((java.lang.Object) (0.9491079123427585245261896840478512624007) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (-0.1834346424956498049394761423601839806667) ), ((java.lang.Object) (0.1834346424956498049394761423601839806667) ), ((java.lang.Object) (-0.5255324099163289858177390491892463490419) ), ((java.lang.Object) (0.5255324099163289858177390491892463490419) ), ((java.lang.Object) (-0.7966664774136267395915539364758304368371) ), ((java.lang.Object) (0.7966664774136267395915539364758304368371) ), ((java.lang.Object) (-0.9602898564975362316835608685694729904282) ), ((java.lang.Object) (0.9602898564975362316835608685694729904282) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (-0.8360311073266357942994297880697348765441) ), ((java.lang.Object) (0.8360311073266357942994297880697348765441) ), ((java.lang.Object) (-0.9681602395076260898355762029036728700494) ), ((java.lang.Object) (0.9681602395076260898355762029036728700494) ), ((java.lang.Object) (-0.3242534234038089290385380146433366085719) ), ((java.lang.Object) (0.3242534234038089290385380146433366085719) ), ((java.lang.Object) (-0.6133714327005903973087020393414741847857) ), ((java.lang.Object) (0.6133714327005903973087020393414741847857) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (-0.1488743389816312108848260011297199846175) ), ((java.lang.Object) (0.1488743389816312108848260011297199846175) ), ((java.lang.Object) (-0.4333953941292471907992659431657841622000) ), ((java.lang.Object) (0.4333953941292471907992659431657841622000) ), ((java.lang.Object) (-0.6794095682990244062343273651148735757692) ), ((java.lang.Object) (0.6794095682990244062343273651148735757692) ), ((java.lang.Object) (-0.8650633666889845107320966884234930485275) ), ((java.lang.Object) (0.8650633666889845107320966884234930485275) ), ((java.lang.Object) (-0.9739065285171717200779640120844520534282) ), ((java.lang.Object) (0.9739065285171717200779640120844520534282) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (-0.2695431559523449723315319854008615246796) ), ((java.lang.Object) (0.2695431559523449723315319854008615246796) ), ((java.lang.Object) (-0.5190961292068118159257256694586095544802) ), ((java.lang.Object) (0.5190961292068118159257256694586095544802) ), ((java.lang.Object) (-0.7301520055740493240934162520311534580496) ), ((java.lang.Object) (0.7301520055740493240934162520311534580496) ), ((java.lang.Object) (-0.8870625997680952990751577693039272666316) ), ((java.lang.Object) (0.8870625997680952990751577693039272666316) ), ((java.lang.Object) (-0.9782286581460569928039380011228573907714) ), ((java.lang.Object) (0.9782286581460569928039380011228573907714) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (-0.1252334085114689154724413694638531299833) ), ((java.lang.Object) (0.1252334085114689154724413694638531299833) ), ((java.lang.Object) (-0.3678314989981801937526915366437175612563) ), ((java.lang.Object) (0.3678314989981801937526915366437175612563) ), ((java.lang.Object) (-0.5873179542866174472967024189405342803690) ), ((java.lang.Object) (0.5873179542866174472967024189405342803690) ), ((java.lang.Object) (-0.7699026741943046870368938332128180759849) ), ((java.lang.Object) (0.7699026741943046870368938332128180759849) ), ((java.lang.Object) (-0.9041172563704748566784658661190961925375) ), ((java.lang.Object) (0.9041172563704748566784658661190961925375) ), ((java.lang.Object) (-0.9815606342467192506905490901492808229601) ), ((java.lang.Object) (0.9815606342467192506905490901492808229601) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (-0.2304583159551347940655281210979888352115) ), ((java.lang.Object) (0.2304583159551347940655281210979888352115) ), ((java.lang.Object) (-0.4484927510364468528779128521276398678019) ), ((java.lang.Object) (0.4484927510364468528779128521276398678019) ), ((java.lang.Object) (-0.6423493394403402206439846069955156500716) ), ((java.lang.Object) (0.6423493394403402206439846069955156500716) ), ((java.lang.Object) (-0.8015780907333099127942064895828598903056) ), ((java.lang.Object) (0.8015780907333099127942064895828598903056) ), ((java.lang.Object) (-0.9175983992229779652065478365007195123904) ), ((java.lang.Object) (0.9175983992229779652065478365007195123904) ), ((java.lang.Object) (-0.9841830547185881494728294488071096110649) ), ((java.lang.Object) (0.9841830547185881494728294488071096110649) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (-0.1080549487073436620662446502198347476119) ), ((java.lang.Object) (0.1080549487073436620662446502198347476119) ), ((java.lang.Object) (-0.3191123689278897604356718241684754668342) ), ((java.lang.Object) (0.3191123689278897604356718241684754668342) ), ((java.lang.Object) (-0.5152486363581540919652907185511886623088) ), ((java.lang.Object) (0.5152486363581540919652907185511886623088) ), ((java.lang.Object) (-0.6872929048116854701480198030193341375384) ), ((java.lang.Object) (0.6872929048116854701480198030193341375384) ), ((java.lang.Object) (-0.8272013150697649931897947426503949610397) ), ((java.lang.Object) (0.8272013150697649931897947426503949610397) ), ((java.lang.Object) (-0.9284348836635735173363911393778742644770) ), ((java.lang.Object) (0.9284348836635735173363911393778742644770) ), ((java.lang.Object) (-0.9862838086968123388415972667040528016760) ), ((java.lang.Object) (0.9862838086968123388415972667040528016760) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (-0.2011940939974345223006283033945962078128) ), ((java.lang.Object) (0.2011940939974345223006283033945962078128) ), ((java.lang.Object) (-0.3941513470775633698972073709810454683627) ), ((java.lang.Object) (0.3941513470775633698972073709810454683627) ), ((java.lang.Object) (-0.5709721726085388475372267372539106412383) ), ((java.lang.Object) (0.5709721726085388475372267372539106412383) ), ((java.lang.Object) (-0.7244177313601700474161860546139380096308) ), ((java.lang.Object) (0.7244177313601700474161860546139380096308) ), ((java.lang.Object) (-0.8482065834104272162006483207742168513662) ), ((java.lang.Object) (0.8482065834104272162006483207742168513662) ), ((java.lang.Object) (-0.9372733924007059043077589477102094712439) ), ((java.lang.Object) (0.9372733924007059043077589477102094712439) ), ((java.lang.Object) (-0.9879925180204854284895657185866125811469) ), ((java.lang.Object) (0.9879925180204854284895657185866125811469) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (-0.0950125098376374401853193354249580631303) ), ((java.lang.Object) (0.0950125098376374401853193354249580631303) ), ((java.lang.Object) (-0.2816035507792589132304605014604961064860) ), ((java.lang.Object) (0.2816035507792589132304605014604961064860) ), ((java.lang.Object) (-0.4580167776572273863424194429835775735400) ), ((java.lang.Object) (0.4580167776572273863424194429835775735400) ), ((java.lang.Object) (-0.6178762444026437484466717640487910189918) ), ((java.lang.Object) (0.6178762444026437484466717640487910189918) ), ((java.lang.Object) (-0.7554044083550030338951011948474422683538) ), ((java.lang.Object) (0.7554044083550030338951011948474422683538) ), ((java.lang.Object) (-0.8656312023878317438804678977123931323873) ), ((java.lang.Object) (0.8656312023878317438804678977123931323873) ), ((java.lang.Object) (-0.9445750230732325760779884155346083450911) ), ((java.lang.Object) (0.9445750230732325760779884155346083450911) ), ((java.lang.Object) (-0.9894009349916499325961541734503326274262) ), ((java.lang.Object) (0.9894009349916499325961541734503326274262) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (-0.1784841814958478558506774936540655574754) ), ((java.lang.Object) (0.1784841814958478558506774936540655574754) ), ((java.lang.Object) (-0.3512317634538763152971855170953460050405) ), ((java.lang.Object) (0.3512317634538763152971855170953460050405) ), ((java.lang.Object) (-0.5126905370864769678862465686295518745829) ), ((java.lang.Object) (0.5126905370864769678862465686295518745829) ), ((java.lang.Object) (-0.6576711592166907658503022166430023351478) ), ((java.lang.Object) (0.6576711592166907658503022166430023351478) ), ((java.lang.Object) (-0.7815140038968014069252300555204760502239) ), ((java.lang.Object) (0.7815140038968014069252300555204760502239) ), ((java.lang.Object) (-0.8802391537269859021229556944881556926234) ), ((java.lang.Object) (0.8802391537269859021229556944881556926234) ), ((java.lang.Object) (-0.9506755217687677612227169578958030214433) ), ((java.lang.Object) (0.9506755217687677612227169578958030214433) ), ((java.lang.Object) (-0.9905754753144173356754340199406652765077) ), ((java.lang.Object) (0.9905754753144173356754340199406652765077) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (-0.0847750130417353012422618529357838117333) ), ((java.lang.Object) (0.0847750130417353012422618529357838117333) ), ((java.lang.Object) (-0.2518862256915055095889728548779112301628) ), ((java.lang.Object) (0.2518862256915055095889728548779112301628) ), ((java.lang.Object) (-0.4117511614628426460359317938330516370789) ), ((java.lang.Object) (0.4117511614628426460359317938330516370789) ), ((java.lang.Object) (-0.5597708310739475346078715485253291369276) ), ((java.lang.Object) (0.5597708310739475346078715485253291369276) ), ((java.lang.Object) (-0.6916870430603532078748910812888483894522) ), ((java.lang.Object) (0.6916870430603532078748910812888483894522) ), ((java.lang.Object) (-0.8037049589725231156824174550145907971032) ), ((java.lang.Object) (0.8037049589725231156824174550145907971032) ), ((java.lang.Object) (-0.8926024664975557392060605911271455154078) ), ((java.lang.Object) (0.8926024664975557392060605911271455154078) ), ((java.lang.Object) (-0.9558239495713977551811958929297763099728) ), ((java.lang.Object) (0.9558239495713977551811958929297763099728) ), ((java.lang.Object) (-0.9915651684209309467300160047061507702525) ), ((java.lang.Object) (0.9915651684209309467300160047061507702525) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (-0.1603586456402253758680961157407435495048) ), ((java.lang.Object) (0.1603586456402253758680961157407435495048) ), ((java.lang.Object) (-0.3165640999636298319901173288498449178922) ), ((java.lang.Object) (0.3165640999636298319901173288498449178922) ), ((java.lang.Object) (-0.4645707413759609457172671481041023679762) ), ((java.lang.Object) (0.4645707413759609457172671481041023679762) ), ((java.lang.Object) (-0.6005453046616810234696381649462392798683) ), ((java.lang.Object) (0.6005453046616810234696381649462392798683) ), ((java.lang.Object) (-0.7209661773352293786170958608237816296571) ), ((java.lang.Object) (0.7209661773352293786170958608237816296571) ), ((java.lang.Object) (-0.8227146565371428249789224867127139017745) ), ((java.lang.Object) (0.8227146565371428249789224867127139017745) ), ((java.lang.Object) (-0.9031559036148179016426609285323124878093) ), ((java.lang.Object) (0.9031559036148179016426609285323124878093) ), ((java.lang.Object) (-0.9602081521348300308527788406876515266150) ), ((java.lang.Object) (0.9602081521348300308527788406876515266150) ), ((java.lang.Object) (-0.9924068438435844031890176702532604935893) ), ((java.lang.Object) (0.9924068438435844031890176702532604935893) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (-0.0765265211334973337546404093988382110047) ), ((java.lang.Object) (0.0765265211334973337546404093988382110047) ), ((java.lang.Object) (-0.2277858511416450780804961953685746247430) ), ((java.lang.Object) (0.2277858511416450780804961953685746247430) ), ((java.lang.Object) (-0.3737060887154195606725481770249272373957) ), ((java.lang.Object) (0.3737060887154195606725481770249272373957) ), ((java.lang.Object) (-0.5108670019508270980043640509552509984254) ), ((java.lang.Object) (0.5108670019508270980043640509552509984254) ), ((java.lang.Object) (-0.6360536807265150254528366962262859367433) ), ((java.lang.Object) (0.6360536807265150254528366962262859367433) ), ((java.lang.Object) (-0.7463319064601507926143050703556415903107) ), ((java.lang.Object) (0.7463319064601507926143050703556415903107) ), ((java.lang.Object) (-0.8391169718222188233945290617015206853296) ), ((java.lang.Object) (0.8391169718222188233945290617015206853296) ), ((java.lang.Object) (-0.9122344282513259058677524412032981130491) ), ((java.lang.Object) (0.9122344282513259058677524412032981130491) ), ((java.lang.Object) (-0.9639719272779137912676661311972772219120) ), ((java.lang.Object) (0.9639719272779137912676661311972772219120) ), ((java.lang.Object) (-0.9931285991850949247861223884713202782226) ), ((java.lang.Object) (0.9931285991850949247861223884713202782226) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (-0.1455618541608950909370309823386863301163) ), ((java.lang.Object) (0.1455618541608950909370309823386863301163) ), ((java.lang.Object) (-0.2880213168024010966007925160646003199090) ), ((java.lang.Object) (0.2880213168024010966007925160646003199090) ), ((java.lang.Object) (-0.4243421202074387835736688885437880520964) ), ((java.lang.Object) (0.4243421202074387835736688885437880520964) ), ((java.lang.Object) (-0.5516188358872198070590187967243132866220) ), ((java.lang.Object) (0.5516188358872198070590187967243132866220) ), ((java.lang.Object) (-0.6671388041974123193059666699903391625970) ), ((java.lang.Object) (0.6671388041974123193059666699903391625970) ), ((java.lang.Object) (-0.7684399634756779086158778513062280348209) ), ((java.lang.Object) (0.7684399634756779086158778513062280348209) ), ((java.lang.Object) (-0.8533633645833172836472506385875676702761) ), ((java.lang.Object) (0.8533633645833172836472506385875676702761) ), ((java.lang.Object) (-0.9200993341504008287901871337149688941591) ), ((java.lang.Object) (0.9200993341504008287901871337149688941591) ), ((java.lang.Object) (-0.9672268385663062943166222149076951614246) ), ((java.lang.Object) (0.9672268385663062943166222149076951614246) ), ((java.lang.Object) (-0.9937521706203895002602420359379409291933) ), ((java.lang.Object) (0.9937521706203895002602420359379409291933) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (-0.0697392733197222212138417961186280818222) ), ((java.lang.Object) (0.0697392733197222212138417961186280818222) ), ((java.lang.Object) (-0.2078604266882212854788465339195457342156) ), ((java.lang.Object) (0.2078604266882212854788465339195457342156) ), ((java.lang.Object) (-0.3419358208920842251581474204273796195591) ), ((java.lang.Object) (0.3419358208920842251581474204273796195591) ), ((java.lang.Object) (-0.4693558379867570264063307109664063460953) ), ((java.lang.Object) (0.4693558379867570264063307109664063460953) ), ((java.lang.Object) (-0.5876404035069115929588769276386473488776) ), ((java.lang.Object) (0.5876404035069115929588769276386473488776) ), ((java.lang.Object) (-0.6944872631866827800506898357622567712673) ), ((java.lang.Object) (0.6944872631866827800506898357622567712673) ), ((java.lang.Object) (-0.7878168059792081620042779554083515213881) ), ((java.lang.Object) (0.7878168059792081620042779554083515213881) ), ((java.lang.Object) (-0.8658125777203001365364256370193787290847) ), ((java.lang.Object) (0.8658125777203001365364256370193787290847) ), ((java.lang.Object) (-0.9269567721871740005206929392590531966353) ), ((java.lang.Object) (0.9269567721871740005206929392590531966353) ), ((java.lang.Object) (-0.9700604978354287271239509867652687108059) ), ((java.lang.Object) (0.9700604978354287271239509867652687108059) ), ((java.lang.Object) (-0.9942945854823992920730314211612989803930) ), ((java.lang.Object) (0.9942945854823992920730314211612989803930) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0) ), ((java.lang.Object) (-0.1332568242984661109317426822417661370104) ), ((java.lang.Object) (0.1332568242984661109317426822417661370104) ), ((java.lang.Object) (-0.2641356809703449305338695382833096029790) ), ((java.lang.Object) (0.2641356809703449305338695382833096029790) ), ((java.lang.Object) (-0.3903010380302908314214888728806054585780) ), ((java.lang.Object) (0.3903010380302908314214888728806054585780) ), ((java.lang.Object) (-0.5095014778460075496897930478668464305448) ), ((java.lang.Object) (0.5095014778460075496897930478668464305448) ), ((java.lang.Object) (-0.6196098757636461563850973116495956533871) ), ((java.lang.Object) (0.6196098757636461563850973116495956533871) ), ((java.lang.Object) (-0.7186613631319501944616244837486188483299) ), ((java.lang.Object) (0.7186613631319501944616244837486188483299) ), ((java.lang.Object) (-0.8048884016188398921511184069967785579414) ), ((java.lang.Object) (0.8048884016188398921511184069967785579414) ), ((java.lang.Object) (-0.8767523582704416673781568859341456716389) ), ((java.lang.Object) (0.8767523582704416673781568859341456716389) ), ((java.lang.Object) (-0.9329710868260161023491969890384229782357) ), ((java.lang.Object) (0.9329710868260161023491969890384229782357) ), ((java.lang.Object) (-0.9725424712181152319560240768207773751816) ), ((java.lang.Object) (0.9725424712181152319560240768207773751816) ), ((java.lang.Object) (-0.9947693349975521235239257154455743605736) ), ((java.lang.Object) (0.9947693349975521235239257154455743605736) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (-0.0640568928626056260850430826247450385909) ), ((java.lang.Object) (0.0640568928626056260850430826247450385909) ), ((java.lang.Object) (-0.1911188674736163091586398207570696318404) ), ((java.lang.Object) (0.1911188674736163091586398207570696318404) ), ((java.lang.Object) (-0.3150426796961633743867932913198102407864) ), ((java.lang.Object) (0.3150426796961633743867932913198102407864) ), ((java.lang.Object) (-0.4337935076260451384870842319133497124524) ), ((java.lang.Object) (0.4337935076260451384870842319133497124524) ), ((java.lang.Object) (-0.5454214713888395356583756172183723700107) ), ((java.lang.Object) (0.5454214713888395356583756172183723700107) ), ((java.lang.Object) (-0.6480936519369755692524957869107476266696) ), ((java.lang.Object) (0.6480936519369755692524957869107476266696) ), ((java.lang.Object) (-0.7401241915785543642438281030999784255232) ), ((java.lang.Object) (0.7401241915785543642438281030999784255232) ), ((java.lang.Object) (-0.8200019859739029219539498726697452080761) ), ((java.lang.Object) (0.8200019859739029219539498726697452080761) ), ((java.lang.Object) (-0.8864155270044010342131543419821967550873) ), ((java.lang.Object) (0.8864155270044010342131543419821967550873) ), ((java.lang.Object) (-0.9382745520027327585236490017087214496548) ), ((java.lang.Object) (0.9382745520027327585236490017087214496548) ), ((java.lang.Object) (-0.9747285559713094981983919930081690617411) ), ((java.lang.Object) (0.9747285559713094981983919930081690617411) ), ((java.lang.Object) (-0.9951872199970213601799974097007368118745) ), ((java.lang.Object) (0.9951872199970213601799974097007368118745) )}))});
		//line 638 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
		verb.eval.Analyze.Cvalues = new haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>(new org.apache.commons.math3.linear.ArrayRealVector[]{verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (1.0) ), ((java.lang.Object) (1.0) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.8888888888888888888888888888888888888888) ), ((java.lang.Object) (0.5555555555555555555555555555555555555555) ), ((java.lang.Object) (0.5555555555555555555555555555555555555555) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.6521451548625461426269360507780005927646) ), ((java.lang.Object) (0.6521451548625461426269360507780005927646) ), ((java.lang.Object) (0.3478548451374538573730639492219994072353) ), ((java.lang.Object) (0.3478548451374538573730639492219994072353) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.5688888888888888888888888888888888888888) ), ((java.lang.Object) (0.4786286704993664680412915148356381929122) ), ((java.lang.Object) (0.4786286704993664680412915148356381929122) ), ((java.lang.Object) (0.2369268850561890875142640407199173626432) ), ((java.lang.Object) (0.2369268850561890875142640407199173626432) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.3607615730481386075698335138377161116615) ), ((java.lang.Object) (0.3607615730481386075698335138377161116615) ), ((java.lang.Object) (0.4679139345726910473898703439895509948116) ), ((java.lang.Object) (0.4679139345726910473898703439895509948116) ), ((java.lang.Object) (0.1713244923791703450402961421727328935268) ), ((java.lang.Object) (0.1713244923791703450402961421727328935268) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.4179591836734693877551020408163265306122) ), ((java.lang.Object) (0.3818300505051189449503697754889751338783) ), ((java.lang.Object) (0.3818300505051189449503697754889751338783) ), ((java.lang.Object) (0.2797053914892766679014677714237795824869) ), ((java.lang.Object) (0.2797053914892766679014677714237795824869) ), ((java.lang.Object) (0.1294849661688696932706114326790820183285) ), ((java.lang.Object) (0.1294849661688696932706114326790820183285) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.3626837833783619829651504492771956121941) ), ((java.lang.Object) (0.3626837833783619829651504492771956121941) ), ((java.lang.Object) (0.3137066458778872873379622019866013132603) ), ((java.lang.Object) (0.3137066458778872873379622019866013132603) ), ((java.lang.Object) (0.2223810344533744705443559944262408844301) ), ((java.lang.Object) (0.2223810344533744705443559944262408844301) ), ((java.lang.Object) (0.1012285362903762591525313543099621901153) ), ((java.lang.Object) (0.1012285362903762591525313543099621901153) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.3302393550012597631645250692869740488788) ), ((java.lang.Object) (0.1806481606948574040584720312429128095143) ), ((java.lang.Object) (0.1806481606948574040584720312429128095143) ), ((java.lang.Object) (0.0812743883615744119718921581105236506756) ), ((java.lang.Object) (0.0812743883615744119718921581105236506756) ), ((java.lang.Object) (0.3123470770400028400686304065844436655987) ), ((java.lang.Object) (0.3123470770400028400686304065844436655987) ), ((java.lang.Object) (0.2606106964029354623187428694186328497718) ), ((java.lang.Object) (0.2606106964029354623187428694186328497718) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.2955242247147528701738929946513383294210) ), ((java.lang.Object) (0.2955242247147528701738929946513383294210) ), ((java.lang.Object) (0.2692667193099963550912269215694693528597) ), ((java.lang.Object) (0.2692667193099963550912269215694693528597) ), ((java.lang.Object) (0.2190863625159820439955349342281631924587) ), ((java.lang.Object) (0.2190863625159820439955349342281631924587) ), ((java.lang.Object) (0.1494513491505805931457763396576973324025) ), ((java.lang.Object) (0.1494513491505805931457763396576973324025) ), ((java.lang.Object) (0.0666713443086881375935688098933317928578) ), ((java.lang.Object) (0.0666713443086881375935688098933317928578) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.2729250867779006307144835283363421891560) ), ((java.lang.Object) (0.2628045445102466621806888698905091953727) ), ((java.lang.Object) (0.2628045445102466621806888698905091953727) ), ((java.lang.Object) (0.2331937645919904799185237048431751394317) ), ((java.lang.Object) (0.2331937645919904799185237048431751394317) ), ((java.lang.Object) (0.1862902109277342514260976414316558916912) ), ((java.lang.Object) (0.1862902109277342514260976414316558916912) ), ((java.lang.Object) (0.1255803694649046246346942992239401001976) ), ((java.lang.Object) (0.1255803694649046246346942992239401001976) ), ((java.lang.Object) (0.0556685671161736664827537204425485787285) ), ((java.lang.Object) (0.0556685671161736664827537204425485787285) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.2491470458134027850005624360429512108304) ), ((java.lang.Object) (0.2491470458134027850005624360429512108304) ), ((java.lang.Object) (0.2334925365383548087608498989248780562594) ), ((java.lang.Object) (0.2334925365383548087608498989248780562594) ), ((java.lang.Object) (0.2031674267230659217490644558097983765065) ), ((java.lang.Object) (0.2031674267230659217490644558097983765065) ), ((java.lang.Object) (0.1600783285433462263346525295433590718720) ), ((java.lang.Object) (0.1600783285433462263346525295433590718720) ), ((java.lang.Object) (0.1069393259953184309602547181939962242145) ), ((java.lang.Object) (0.1069393259953184309602547181939962242145) ), ((java.lang.Object) (0.0471753363865118271946159614850170603170) ), ((java.lang.Object) (0.0471753363865118271946159614850170603170) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.2325515532308739101945895152688359481566) ), ((java.lang.Object) (0.2262831802628972384120901860397766184347) ), ((java.lang.Object) (0.2262831802628972384120901860397766184347) ), ((java.lang.Object) (0.2078160475368885023125232193060527633865) ), ((java.lang.Object) (0.2078160475368885023125232193060527633865) ), ((java.lang.Object) (0.1781459807619457382800466919960979955128) ), ((java.lang.Object) (0.1781459807619457382800466919960979955128) ), ((java.lang.Object) (0.1388735102197872384636017768688714676218) ), ((java.lang.Object) (0.1388735102197872384636017768688714676218) ), ((java.lang.Object) (0.0921214998377284479144217759537971209236) ), ((java.lang.Object) (0.0921214998377284479144217759537971209236) ), ((java.lang.Object) (0.0404840047653158795200215922009860600419) ), ((java.lang.Object) (0.0404840047653158795200215922009860600419) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.2152638534631577901958764433162600352749) ), ((java.lang.Object) (0.2152638534631577901958764433162600352749) ), ((java.lang.Object) (0.2051984637212956039659240656612180557103) ), ((java.lang.Object) (0.2051984637212956039659240656612180557103) ), ((java.lang.Object) (0.1855383974779378137417165901251570362489) ), ((java.lang.Object) (0.1855383974779378137417165901251570362489) ), ((java.lang.Object) (0.1572031671581935345696019386238421566056) ), ((java.lang.Object) (0.1572031671581935345696019386238421566056) ), ((java.lang.Object) (0.1215185706879031846894148090724766259566) ), ((java.lang.Object) (0.1215185706879031846894148090724766259566) ), ((java.lang.Object) (0.0801580871597602098056332770628543095836) ), ((java.lang.Object) (0.0801580871597602098056332770628543095836) ), ((java.lang.Object) (0.0351194603317518630318328761381917806197) ), ((java.lang.Object) (0.0351194603317518630318328761381917806197) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.2025782419255612728806201999675193148386) ), ((java.lang.Object) (0.1984314853271115764561183264438393248186) ), ((java.lang.Object) (0.1984314853271115764561183264438393248186) ), ((java.lang.Object) (0.1861610000155622110268005618664228245062) ), ((java.lang.Object) (0.1861610000155622110268005618664228245062) ), ((java.lang.Object) (0.1662692058169939335532008604812088111309) ), ((java.lang.Object) (0.1662692058169939335532008604812088111309) ), ((java.lang.Object) (0.1395706779261543144478047945110283225208) ), ((java.lang.Object) (0.1395706779261543144478047945110283225208) ), ((java.lang.Object) (0.1071592204671719350118695466858693034155) ), ((java.lang.Object) (0.1071592204671719350118695466858693034155) ), ((java.lang.Object) (0.0703660474881081247092674164506673384667) ), ((java.lang.Object) (0.0703660474881081247092674164506673384667) ), ((java.lang.Object) (0.0307532419961172683546283935772044177217) ), ((java.lang.Object) (0.0307532419961172683546283935772044177217) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.1894506104550684962853967232082831051469) ), ((java.lang.Object) (0.1894506104550684962853967232082831051469) ), ((java.lang.Object) (0.1826034150449235888667636679692199393835) ), ((java.lang.Object) (0.1826034150449235888667636679692199393835) ), ((java.lang.Object) (0.1691565193950025381893120790303599622116) ), ((java.lang.Object) (0.1691565193950025381893120790303599622116) ), ((java.lang.Object) (0.1495959888165767320815017305474785489704) ), ((java.lang.Object) (0.1495959888165767320815017305474785489704) ), ((java.lang.Object) (0.1246289712555338720524762821920164201448) ), ((java.lang.Object) (0.1246289712555338720524762821920164201448) ), ((java.lang.Object) (0.0951585116824927848099251076022462263552) ), ((java.lang.Object) (0.0951585116824927848099251076022462263552) ), ((java.lang.Object) (0.0622535239386478928628438369943776942749) ), ((java.lang.Object) (0.0622535239386478928628438369943776942749) ), ((java.lang.Object) (0.0271524594117540948517805724560181035122) ), ((java.lang.Object) (0.0271524594117540948517805724560181035122) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.1794464703562065254582656442618856214487) ), ((java.lang.Object) (0.1765627053669926463252709901131972391509) ), ((java.lang.Object) (0.1765627053669926463252709901131972391509) ), ((java.lang.Object) (0.1680041021564500445099706637883231550211) ), ((java.lang.Object) (0.1680041021564500445099706637883231550211) ), ((java.lang.Object) (0.1540457610768102880814315948019586119404) ), ((java.lang.Object) (0.1540457610768102880814315948019586119404) ), ((java.lang.Object) (0.1351363684685254732863199817023501973721) ), ((java.lang.Object) (0.1351363684685254732863199817023501973721) ), ((java.lang.Object) (0.1118838471934039710947883856263559267358) ), ((java.lang.Object) (0.1118838471934039710947883856263559267358) ), ((java.lang.Object) (0.0850361483171791808835353701910620738504) ), ((java.lang.Object) (0.0850361483171791808835353701910620738504) ), ((java.lang.Object) (0.0554595293739872011294401653582446605128) ), ((java.lang.Object) (0.0554595293739872011294401653582446605128) ), ((java.lang.Object) (0.0241483028685479319601100262875653246916) ), ((java.lang.Object) (0.0241483028685479319601100262875653246916) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.1691423829631435918406564701349866103341) ), ((java.lang.Object) (0.1691423829631435918406564701349866103341) ), ((java.lang.Object) (0.1642764837458327229860537764659275904123) ), ((java.lang.Object) (0.1642764837458327229860537764659275904123) ), ((java.lang.Object) (0.1546846751262652449254180038363747721932) ), ((java.lang.Object) (0.1546846751262652449254180038363747721932) ), ((java.lang.Object) (0.1406429146706506512047313037519472280955) ), ((java.lang.Object) (0.1406429146706506512047313037519472280955) ), ((java.lang.Object) (0.1225552067114784601845191268002015552281) ), ((java.lang.Object) (0.1225552067114784601845191268002015552281) ), ((java.lang.Object) (0.1009420441062871655628139849248346070628) ), ((java.lang.Object) (0.1009420441062871655628139849248346070628) ), ((java.lang.Object) (0.0764257302548890565291296776166365256053) ), ((java.lang.Object) (0.0764257302548890565291296776166365256053) ), ((java.lang.Object) (0.0497145488949697964533349462026386416808) ), ((java.lang.Object) (0.0497145488949697964533349462026386416808) ), ((java.lang.Object) (0.0216160135264833103133427102664524693876) ), ((java.lang.Object) (0.0216160135264833103133427102664524693876) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.1610544498487836959791636253209167350399) ), ((java.lang.Object) (0.1589688433939543476499564394650472016787) ), ((java.lang.Object) (0.1589688433939543476499564394650472016787) ), ((java.lang.Object) (0.1527660420658596667788554008976629984610) ), ((java.lang.Object) (0.1527660420658596667788554008976629984610) ), ((java.lang.Object) (0.1426067021736066117757461094419029724756) ), ((java.lang.Object) (0.1426067021736066117757461094419029724756) ), ((java.lang.Object) (0.1287539625393362276755157848568771170558) ), ((java.lang.Object) (0.1287539625393362276755157848568771170558) ), ((java.lang.Object) (0.1115666455473339947160239016817659974813) ), ((java.lang.Object) (0.1115666455473339947160239016817659974813) ), ((java.lang.Object) (0.0914900216224499994644620941238396526609) ), ((java.lang.Object) (0.0914900216224499994644620941238396526609) ), ((java.lang.Object) (0.0690445427376412265807082580060130449618) ), ((java.lang.Object) (0.0690445427376412265807082580060130449618) ), ((java.lang.Object) (0.0448142267656996003328381574019942119517) ), ((java.lang.Object) (0.0448142267656996003328381574019942119517) ), ((java.lang.Object) (0.0194617882297264770363120414644384357529) ), ((java.lang.Object) (0.0194617882297264770363120414644384357529) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.1527533871307258506980843319550975934919) ), ((java.lang.Object) (0.1527533871307258506980843319550975934919) ), ((java.lang.Object) (0.1491729864726037467878287370019694366926) ), ((java.lang.Object) (0.1491729864726037467878287370019694366926) ), ((java.lang.Object) (0.1420961093183820513292983250671649330345) ), ((java.lang.Object) (0.1420961093183820513292983250671649330345) ), ((java.lang.Object) (0.1316886384491766268984944997481631349161) ), ((java.lang.Object) (0.1316886384491766268984944997481631349161) ), ((java.lang.Object) (0.1181945319615184173123773777113822870050) ), ((java.lang.Object) (0.1181945319615184173123773777113822870050) ), ((java.lang.Object) (0.1019301198172404350367501354803498761666) ), ((java.lang.Object) (0.1019301198172404350367501354803498761666) ), ((java.lang.Object) (0.0832767415767047487247581432220462061001) ), ((java.lang.Object) (0.0832767415767047487247581432220462061001) ), ((java.lang.Object) (0.0626720483341090635695065351870416063516) ), ((java.lang.Object) (0.0626720483341090635695065351870416063516) ), ((java.lang.Object) (0.0406014298003869413310399522749321098790) ), ((java.lang.Object) (0.0406014298003869413310399522749321098790) ), ((java.lang.Object) (0.0176140071391521183118619623518528163621) ), ((java.lang.Object) (0.0176140071391521183118619623518528163621) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.1460811336496904271919851476833711882448) ), ((java.lang.Object) (0.1445244039899700590638271665537525436099) ), ((java.lang.Object) (0.1445244039899700590638271665537525436099) ), ((java.lang.Object) (0.1398873947910731547221334238675831108927) ), ((java.lang.Object) (0.1398873947910731547221334238675831108927) ), ((java.lang.Object) (0.1322689386333374617810525744967756043290) ), ((java.lang.Object) (0.1322689386333374617810525744967756043290) ), ((java.lang.Object) (0.1218314160537285341953671771257335983563) ), ((java.lang.Object) (0.1218314160537285341953671771257335983563) ), ((java.lang.Object) (0.1087972991671483776634745780701056420336) ), ((java.lang.Object) (0.1087972991671483776634745780701056420336) ), ((java.lang.Object) (0.0934444234560338615532897411139320884835) ), ((java.lang.Object) (0.0934444234560338615532897411139320884835) ), ((java.lang.Object) (0.0761001136283793020170516533001831792261) ), ((java.lang.Object) (0.0761001136283793020170516533001831792261) ), ((java.lang.Object) (0.0571344254268572082836358264724479574912) ), ((java.lang.Object) (0.0571344254268572082836358264724479574912) ), ((java.lang.Object) (0.0369537897708524937999506682993296661889) ), ((java.lang.Object) (0.0369537897708524937999506682993296661889) ), ((java.lang.Object) (0.0160172282577743333242246168584710152658) ), ((java.lang.Object) (0.0160172282577743333242246168584710152658) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.1392518728556319933754102483418099578739) ), ((java.lang.Object) (0.1392518728556319933754102483418099578739) ), ((java.lang.Object) (0.1365414983460151713525738312315173965863) ), ((java.lang.Object) (0.1365414983460151713525738312315173965863) ), ((java.lang.Object) (0.1311735047870623707329649925303074458757) ), ((java.lang.Object) (0.1311735047870623707329649925303074458757) ), ((java.lang.Object) (0.1232523768105124242855609861548144719594) ), ((java.lang.Object) (0.1232523768105124242855609861548144719594) ), ((java.lang.Object) (0.1129322960805392183934006074217843191142) ), ((java.lang.Object) (0.1129322960805392183934006074217843191142) ), ((java.lang.Object) (0.1004141444428809649320788378305362823508) ), ((java.lang.Object) (0.1004141444428809649320788378305362823508) ), ((java.lang.Object) (0.0859416062170677274144436813727028661891) ), ((java.lang.Object) (0.0859416062170677274144436813727028661891) ), ((java.lang.Object) (0.0697964684245204880949614189302176573987) ), ((java.lang.Object) (0.0697964684245204880949614189302176573987) ), ((java.lang.Object) (0.0522933351526832859403120512732112561121) ), ((java.lang.Object) (0.0522933351526832859403120512732112561121) ), ((java.lang.Object) (0.0337749015848141547933022468659129013491) ), ((java.lang.Object) (0.0337749015848141547933022468659129013491) ), ((java.lang.Object) (0.0146279952982722006849910980471854451902) ), ((java.lang.Object) (0.0146279952982722006849910980471854451902) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.1336545721861061753514571105458443385831) ), ((java.lang.Object) (0.1324620394046966173716424647033169258050) ), ((java.lang.Object) (0.1324620394046966173716424647033169258050) ), ((java.lang.Object) (0.1289057221880821499785953393997936532597) ), ((java.lang.Object) (0.1289057221880821499785953393997936532597) ), ((java.lang.Object) (0.1230490843067295304675784006720096548158) ), ((java.lang.Object) (0.1230490843067295304675784006720096548158) ), ((java.lang.Object) (0.1149966402224113649416435129339613014914) ), ((java.lang.Object) (0.1149966402224113649416435129339613014914) ), ((java.lang.Object) (0.1048920914645414100740861850147438548584) ), ((java.lang.Object) (0.1048920914645414100740861850147438548584) ), ((java.lang.Object) (0.0929157660600351474770186173697646486034) ), ((java.lang.Object) (0.0929157660600351474770186173697646486034) ), ((java.lang.Object) (0.0792814117767189549228925247420432269137) ), ((java.lang.Object) (0.0792814117767189549228925247420432269137) ), ((java.lang.Object) (0.0642324214085258521271696151589109980391) ), ((java.lang.Object) (0.0642324214085258521271696151589109980391) ), ((java.lang.Object) (0.0480376717310846685716410716320339965612) ), ((java.lang.Object) (0.0480376717310846685716410716320339965612) ), ((java.lang.Object) (0.0309880058569794443106942196418845053837) ), ((java.lang.Object) (0.0309880058569794443106942196418845053837) ), ((java.lang.Object) (0.0134118594871417720813094934586150649766) ), ((java.lang.Object) (0.0134118594871417720813094934586150649766) )})), verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (0.1279381953467521569740561652246953718517) ), ((java.lang.Object) (0.1279381953467521569740561652246953718517) ), ((java.lang.Object) (0.1258374563468282961213753825111836887264) ), ((java.lang.Object) (0.1258374563468282961213753825111836887264) ), ((java.lang.Object) (0.1216704729278033912044631534762624256070) ), ((java.lang.Object) (0.1216704729278033912044631534762624256070) ), ((java.lang.Object) (0.1155056680537256013533444839067835598622) ), ((java.lang.Object) (0.1155056680537256013533444839067835598622) ), ((java.lang.Object) (0.1074442701159656347825773424466062227946) ), ((java.lang.Object) (0.1074442701159656347825773424466062227946) ), ((java.lang.Object) (0.0976186521041138882698806644642471544279) ), ((java.lang.Object) (0.0976186521041138882698806644642471544279) ), ((java.lang.Object) (0.0861901615319532759171852029837426671850) ), ((java.lang.Object) (0.0861901615319532759171852029837426671850) ), ((java.lang.Object) (0.0733464814110803057340336152531165181193) ), ((java.lang.Object) (0.0733464814110803057340336152531165181193) ), ((java.lang.Object) (0.0592985849154367807463677585001085845412) ), ((java.lang.Object) (0.0592985849154367807463677585001085845412) ), ((java.lang.Object) (0.0442774388174198061686027482113382288593) ), ((java.lang.Object) (0.0442774388174198061686027482113382288593) ), ((java.lang.Object) (0.0285313886289336631813078159518782864491) ), ((java.lang.Object) (0.0285313886289336631813078159518782864491) ), ((java.lang.Object) (0.0123412297999871995468056670700372915759) ), ((java.lang.Object) (0.0123412297999871995468056670700372915759) )}))});
	}
	
	public Analyze(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Analyze()
	{
		//line 27 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
		verb.eval.Analyze.__hx_ctor_verb_eval_Analyze(this);
	}
	
	
	protected static void __hx_ctor_verb_eval_Analyze(verb.eval.Analyze __hx_this)
	{
	}
	
	
	public static haxe.root.Array<verb.eval.KnotMultiplicity> knotMultiplicities(org.apache.commons.math3.linear.ArrayRealVector knots)
	{
		//line 39 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
		try 
		{
			//line 41 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			haxe.root.Array<verb.eval.KnotMultiplicity> mults = new haxe.root.Array<verb.eval.KnotMultiplicity>(new verb.eval.KnotMultiplicity[]{new verb.eval.KnotMultiplicity(((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (0) )), 0)});
			//line 42 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			verb.eval.KnotMultiplicity curr = mults.__get(0);
			//line 44 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			{
				//line 44 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				int _g = 0;
				//line 44 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				while (( _g < verb.core._Data.Vector_Impl_.get_length(knots) ))
				{
					//line 44 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					double knot = ((org.apache.commons.math3.linear.ArrayRealVector) (knots) ).getEntry(((int) (_g) ));
					//line 44 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					 ++ _g;
					//line 45 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					if (( java.lang.Math.abs(( knot - curr.knot )) > verb.core.Constants.EPSILON )) 
					{
						//line 46 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
						curr = new verb.eval.KnotMultiplicity(knot, 0);
						//line 47 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
						mults.push(curr);
					}
					
					//line 50 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					curr.inc();
				}
				
			}
			
			//line 53 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			return mults;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 39 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static boolean isRationalSurfaceClosed(verb.core.NurbsSurfaceData surface, java.lang.Object uDir)
	{
		//line 68 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
		boolean uDir1 = ( (haxe.lang.Runtime.eq(uDir, null)) ? (true) : (haxe.lang.Runtime.toBool(((java.lang.Boolean) (uDir) ))) );
		//line 70 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
		haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> cpts = ( (uDir1) ? (surface.controlPoints) : (((haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>) (verb.core.Mat.transposeN(((haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>) (surface.controlPoints) ))) )) );
		//line 72 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
		{
			//line 72 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			int _g = 0;
			//line 72 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			int _g1 = cpts.__get(0).length;
			//line 72 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			while (( _g < _g1 ))
			{
				//line 72 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				int i = _g++;
				//line 73 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				boolean test = ( verb.core.Vec.dist(((haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>) (verb.core.ArrayExtensions.first(((haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>) (cpts) ))) ).__get(i), ((haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>) (verb.core.ArrayExtensions.last(((haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>) (cpts) ))) ).__get(i)) < verb.core.Constants.EPSILON );
				//line 74 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				if ( ! (test) ) 
				{
					//line 74 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					return false;
				}
				
			}
			
		}
		
		//line 77 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
		return true;
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector rationalSurfaceClosestPoint(verb.core.NurbsSurfaceData surface, org.apache.commons.math3.linear.ArrayRealVector p)
	{
		//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
		try 
		{
			//line 92 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			org.apache.commons.math3.linear.ArrayRealVector uv = verb.eval.Analyze.rationalSurfaceClosestParam(surface, p);
			//line 93 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			return verb.eval.Eval.rationalSurfacePoint(surface, ((org.apache.commons.math3.linear.ArrayRealVector) (uv) ).getEntry(((int) (0) )), ((org.apache.commons.math3.linear.ArrayRealVector) (uv) ).getEntry(((int) (1) )));
		}
		catch (java.lang.Throwable typedException)
		{
			//line 91 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector rationalSurfaceClosestParam(verb.core.NurbsSurfaceData surface, org.apache.commons.math3.linear.ArrayRealVector p)
	{
		//line 107 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
		try 
		{
			//line 151 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			int maxits = 5;
			//line 152 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			int i = 0;
			//line 152 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>> e = null;
			//line 152 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double eps1 = 0.0001;
			//line 152 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double eps2 = 0.0005;
			//line 152 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			org.apache.commons.math3.linear.ArrayRealVector dif = null;
			//line 152 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double minu = ((org.apache.commons.math3.linear.ArrayRealVector) (surface.knotsU) ).getEntry(((int) (0) ));
			//line 158 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			org.apache.commons.math3.linear.ArrayRealVector this1 = surface.knotsU;
			//line 152 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double maxu = this1.getEntry(((int) (( this1.getDimension() - 1 )) ));
			//line 152 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double minv = ((org.apache.commons.math3.linear.ArrayRealVector) (surface.knotsV) ).getEntry(((int) (0) ));
			//line 160 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			org.apache.commons.math3.linear.ArrayRealVector this2 = surface.knotsV;
			//line 152 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double maxv = this2.getEntry(((int) (( this2.getDimension() - 1 )) ));
			//line 152 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			boolean closedu = verb.eval.Analyze.isRationalSurfaceClosed(surface, null);
			//line 152 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			boolean closedv = verb.eval.Analyze.isRationalSurfaceClosed(surface, false);
			//line 152 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			org.apache.commons.math3.linear.ArrayRealVector cuv = null;
			//line 168 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			verb.core.MeshData tess = verb.eval.Tess.rationalSurfaceAdaptive(surface, new verb.eval.AdaptiveRefinementOptions());
			//line 170 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double dmin = java.lang.Double.POSITIVE_INFINITY;
			//line 172 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			{
				//line 172 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				int _g = 0;
				//line 172 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				int _g1 = tess.points.length;
				//line 172 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				while (( _g < _g1 ))
				{
					//line 172 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					int i1 = _g++;
					//line 173 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					org.apache.commons.math3.linear.ArrayRealVector x = tess.points.__get(i1);
					//line 174 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					double d = verb.core.Vec.normSquared(verb.core.Vec.sub(p, x));
					//line 176 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					if (( d < dmin )) 
					{
						//line 177 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
						dmin = d;
						//line 178 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
						cuv = tess.uvs.__get(i1);
					}
					
				}
				
			}
			
			//line 182 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			haxe.lang.Function f = new verb.eval.Analyze_rationalSurfaceClosestParam_182__Fun(surface);
			//line 186 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			haxe.lang.Function n = ( (( verb.eval.Analyze_rationalSurfaceClosestParam_186__Fun.__hx_current != null )) ? (verb.eval.Analyze_rationalSurfaceClosestParam_186__Fun.__hx_current) : (verb.eval.Analyze_rationalSurfaceClosestParam_186__Fun.__hx_current = ((verb.eval.Analyze_rationalSurfaceClosestParam_186__Fun) (new verb.eval.Analyze_rationalSurfaceClosestParam_186__Fun()) )) );
			//line 225 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			while (( i < maxits ))
			{
				//line 227 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				e = ((haxe.root.Array<haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>>) (f.__hx_invoke1_o(0.0, cuv)) );
				//line 228 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				dif = verb.core.Vec.sub(e.__get(0).__get(0), p);
				//line 233 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				double c1v = verb.core.Vec.norm(dif);
				//line 246 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				double c2an = verb.core.Vec.dot(e.__get(1).__get(0), dif);
				//line 247 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				double c2ad = ( verb.core.Vec.norm(e.__get(1).__get(0)) * c1v );
				//line 249 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				double c2bn = verb.core.Vec.dot(e.__get(0).__get(1), dif);
				//line 250 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				double c2bd = ( verb.core.Vec.norm(e.__get(0).__get(1)) * c1v );
				//line 252 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				double c2av = ( c2an / c2ad );
				//line 253 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				double c2bv = ( c2bn / c2bd );
				//line 255 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				boolean c1 = ( c1v < eps1 );
				//line 256 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				boolean c2a = ( c2av < eps2 );
				//line 257 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				boolean c2b = ( c2bv < eps2 );
				//line 260 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				if (( ( c1 && c2a ) && c2b )) 
				{
					//line 261 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					return cuv;
				}
				
				//line 265 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				org.apache.commons.math3.linear.ArrayRealVector ct = ((org.apache.commons.math3.linear.ArrayRealVector) (n.__hx_invoke3_o(0.0, cuv, 0.0, e, 0.0, dif)) );
				//line 268 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				if (( ((org.apache.commons.math3.linear.ArrayRealVector) (ct) ).getEntry(((int) (0) )) < minu )) 
				{
					//line 269 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					ct = ( (closedu) ? (verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (( maxu - (( ((org.apache.commons.math3.linear.ArrayRealVector) (ct) ).getEntry(((int) (0) )) - minu )) )) ), ((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (ct) ).getEntry(((int) (1) ))) )}))) : (verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (( minu + verb.core.Constants.EPSILON )) ), ((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (ct) ).getEntry(((int) (1) ))) )}))) );
				}
				else
				{
					//line 270 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					if (( ((org.apache.commons.math3.linear.ArrayRealVector) (ct) ).getEntry(((int) (0) )) > maxu )) 
					{
						//line 271 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
						ct = ( (closedu) ? (verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (( minu + (( ((org.apache.commons.math3.linear.ArrayRealVector) (ct) ).getEntry(((int) (0) )) - maxu )) )) ), ((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (ct) ).getEntry(((int) (1) ))) )}))) : (verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (( maxu - verb.core.Constants.EPSILON )) ), ((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (ct) ).getEntry(((int) (1) ))) )}))) );
					}
					
				}
				
				//line 274 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				if (( ((org.apache.commons.math3.linear.ArrayRealVector) (ct) ).getEntry(((int) (1) )) < minv )) 
				{
					//line 275 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					ct = ( (closedv) ? (verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (ct) ).getEntry(((int) (0) ))) ), ((java.lang.Object) (( maxv - (( ((org.apache.commons.math3.linear.ArrayRealVector) (ct) ).getEntry(((int) (1) )) - minv )) )) )}))) : (verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (ct) ).getEntry(((int) (0) ))) ), ((java.lang.Object) (( minv + verb.core.Constants.EPSILON )) )}))) );
				}
				else
				{
					//line 276 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					if (( ((org.apache.commons.math3.linear.ArrayRealVector) (ct) ).getEntry(((int) (1) )) > maxv )) 
					{
						//line 277 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
						ct = ( (closedv) ? (verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (ct) ).getEntry(((int) (0) ))) ), ((java.lang.Object) (( minv + (( ((org.apache.commons.math3.linear.ArrayRealVector) (ct) ).getEntry(((int) (0) )) - maxv )) )) )}))) : (verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{((java.lang.Object) (((org.apache.commons.math3.linear.ArrayRealVector) (ct) ).getEntry(((int) (0) ))) ), ((java.lang.Object) (( maxv - verb.core.Constants.EPSILON )) )}))) );
					}
					
				}
				
				//line 281 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				double c3v0 = verb.core.Vec.norm(verb.core.Vec.mul(( ((org.apache.commons.math3.linear.ArrayRealVector) (ct) ).getEntry(((int) (0) )) - ((org.apache.commons.math3.linear.ArrayRealVector) (cuv) ).getEntry(((int) (0) )) ), e.__get(1).__get(0)));
				//line 282 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				double c3v1 = verb.core.Vec.norm(verb.core.Vec.mul(( ((org.apache.commons.math3.linear.ArrayRealVector) (ct) ).getEntry(((int) (1) )) - ((org.apache.commons.math3.linear.ArrayRealVector) (cuv) ).getEntry(((int) (1) )) ), e.__get(0).__get(1)));
				//line 284 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				if (( ( c3v0 + c3v1 ) < eps1 )) 
				{
					//line 285 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					return cuv;
				}
				
				//line 288 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				cuv = ct;
				//line 289 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				 ++ i;
			}
			
			//line 293 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			return cuv;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 107 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static org.apache.commons.math3.linear.ArrayRealVector rationalCurveClosestPoint(verb.core.NurbsCurveData curve, org.apache.commons.math3.linear.ArrayRealVector p)
	{
		//line 309 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
		return verb.eval.Eval.rationalCurvePoint(curve, verb.eval.Analyze.rationalCurveClosestParam(curve, p));
	}
	
	
	public static double rationalCurveClosestParam(verb.core.NurbsCurveData curve, org.apache.commons.math3.linear.ArrayRealVector p)
	{
		//line 323 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
		try 
		{
			//line 355 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double min = java.lang.Double.POSITIVE_INFINITY;
			//line 356 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double u = 0.0;
			//line 358 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> pts = verb.eval.Tess.rationalCurveRegularSample(curve, ( curve.controlPoints.length * curve.degree ), true);
			//line 360 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			{
				//line 360 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				int _g = 0;
				//line 360 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				int _g1 = ( pts.length - 1 );
				//line 360 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				while (( _g < _g1 ))
				{
					//line 360 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					int i = _g++;
					//line 362 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					double u0 = ((org.apache.commons.math3.linear.ArrayRealVector) (pts.__get(i)) ).getEntry(((int) (0) ));
					//line 363 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					double u1 = ((org.apache.commons.math3.linear.ArrayRealVector) (pts.__get(( i + 1 ))) ).getEntry(((int) (0) ));
					//line 365 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					org.apache.commons.math3.linear.ArrayRealVector this1 = pts.__get(i);
					//line 365 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					java.lang.Object end = null;
					//line 365 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					if (haxe.lang.Runtime.eq(end, null)) 
					{
						//line 365 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
						end = ( this1.getDimension() - 1 );
					}
					
					//line 365 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					org.apache.commons.math3.linear.ArrayRealVector p0 = verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.RealVector) (this1.getSubVector(((int) (1) ), ((int) (haxe.lang.Runtime.toInt(end)) ))) )));
					//line 366 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					org.apache.commons.math3.linear.ArrayRealVector this2 = pts.__get(( i + 1 ));
					//line 366 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					java.lang.Object end1 = null;
					//line 366 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					if (haxe.lang.Runtime.eq(end1, null)) 
					{
						//line 366 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
						end1 = ( this2.getDimension() - 1 );
					}
					
					//line 366 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					org.apache.commons.math3.linear.ArrayRealVector p1 = verb.core._Data.Vector_Impl_._new(new org.apache.commons.math3.linear.ArrayRealVector(((org.apache.commons.math3.linear.RealVector) (this2.getSubVector(((int) (1) ), ((int) (haxe.lang.Runtime.toInt(end1)) ))) )));
					//line 368 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					java.lang.Object proj = verb.core.Trig.segmentClosestPoint(p, p0, p1, u0, u1);
					//line 369 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					double d = verb.core.Vec.norm(verb.core.Vec.sub(p, ((org.apache.commons.math3.linear.ArrayRealVector) (haxe.lang.Runtime.getField(proj, "pt", true)) )));
					//line 371 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					if (( d < min )) 
					{
						//line 372 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
						min = d;
						//line 373 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
						u = haxe.lang.Runtime.getField_f(proj, "u", true);
					}
					
				}
				
			}
			
			//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			int maxits = 5;
			//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			int i1 = 0;
			//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> e = null;
			//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double eps1 = 0.0001;
			//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double eps2 = 0.0005;
			//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			org.apache.commons.math3.linear.ArrayRealVector dif = null;
			//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double minu = ((org.apache.commons.math3.linear.ArrayRealVector) (curve.knots) ).getEntry(((int) (0) ));
			//line 384 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			org.apache.commons.math3.linear.ArrayRealVector this3 = curve.knots;
			//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double maxu = this3.getEntry(((int) (( this3.getDimension() - 1 )) ));
			//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			boolean closed = ( verb.core.Vec.normSquared(verb.core.Vec.sub(curve.controlPoints.__get(0), ((org.apache.commons.math3.linear.ArrayRealVector) (verb.core.ArrayExtensions.last(((haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>) (curve.controlPoints) ))) ))) < verb.core.Constants.EPSILON );
			//line 377 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double cu = u;
			//line 388 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			haxe.lang.Function f = new verb.eval.Analyze_rationalCurveClosestParam_388__Fun(curve);
			//line 392 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			haxe.lang.Function n = ( (( verb.eval.Analyze_rationalCurveClosestParam_392__Fun.__hx_current != null )) ? (verb.eval.Analyze_rationalCurveClosestParam_392__Fun.__hx_current) : (verb.eval.Analyze_rationalCurveClosestParam_392__Fun.__hx_current = ((verb.eval.Analyze_rationalCurveClosestParam_392__Fun) (new verb.eval.Analyze_rationalCurveClosestParam_392__Fun()) )) );
			//line 404 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			while (( i1 < maxits ))
			{
				//line 406 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				e = ((haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector>) (f.__hx_invoke1_o(cu, haxe.lang.Runtime.undefined)) );
				//line 407 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				dif = verb.core.Vec.sub(e.__get(0), p);
				//line 410 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				double c1v = verb.core.Vec.norm(dif);
				//line 415 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				double c2n = verb.core.Vec.dot(e.__get(1), dif);
				//line 416 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				double c2d = ( verb.core.Vec.norm(e.__get(1)) * c1v );
				//line 418 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				double c2v = ( c2n / c2d );
				//line 420 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				boolean c1 = ( c1v < eps1 );
				//line 421 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				boolean c2 = ( java.lang.Math.abs(c2v) < eps2 );
				//line 424 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				if (( c1 && c2 )) 
				{
					//line 425 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					return cu;
				}
				
				//line 428 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				double ct = ((double) (n.__hx_invoke3_f(cu, haxe.lang.Runtime.undefined, 0.0, e, 0.0, dif)) );
				//line 431 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				if (( ct < minu )) 
				{
					//line 432 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					ct = ( (closed) ? (( maxu - (( ct - minu )) )) : (minu) );
				}
				else
				{
					//line 433 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					if (( ct > maxu )) 
					{
						//line 434 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
						ct = ( (closed) ? (( minu + (( ct - maxu )) )) : (maxu) );
					}
					
				}
				
				//line 438 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				double c3v = verb.core.Vec.norm(verb.core.Vec.mul(( ct - cu ), e.__get(1)));
				//line 440 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				if (( c3v < eps1 )) 
				{
					//line 441 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					return cu;
				}
				
				//line 444 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				cu = ct;
				//line 445 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				 ++ i1;
			}
			
			//line 449 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			return cu;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 323 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static double rationalCurveParamAtArcLength(verb.core.NurbsCurveData curve, double len, java.lang.Object tol, haxe.root.Array<verb.core.NurbsCurveData> beziers, org.apache.commons.math3.linear.ArrayRealVector bezierLengths)
	{
		//line 471 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
		try 
		{
			//line 471 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double tol1 = ( (haxe.lang.Runtime.eq(tol, null)) ? (1e-3) : (((double) (haxe.lang.Runtime.toDouble(tol)) )) );
			//line 473 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			if (( len < verb.core.Constants.EPSILON )) 
			{
				//line 473 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				return ((org.apache.commons.math3.linear.ArrayRealVector) (curve.knots) ).getEntry(((int) (0) ));
			}
			
			//line 475 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			haxe.root.Array<verb.core.NurbsCurveData> crvs = ( (( beziers != null )) ? (beziers) : (verb.eval.Modify.decomposeCurveIntoBeziers(curve)) );
			//line 475 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			int i = 0;
			//line 475 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			verb.core.NurbsCurveData cc = crvs.__get(i);
			//line 475 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double cl =  - (verb.core.Constants.EPSILON) ;
			//line 475 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			org.apache.commons.math3.linear.ArrayRealVector bezier_lengths = ( (( bezierLengths != null )) ? (bezierLengths) : (verb.core._Data.Vector_Impl_.fromArray(new haxe.root.Array<java.lang.Object>(new java.lang.Object[]{}))) );
			//line 482 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			while (( ( cl < len ) && ( i < crvs.length ) ))
			{
				//line 484 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				{
					//line 484 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					double v = ( (( i < verb.core._Data.Vector_Impl_.get_length(bezier_lengths) )) ? (((org.apache.commons.math3.linear.ArrayRealVector) (bezier_lengths) ).getEntry(((int) (i) ))) : (verb.eval.Analyze.rationalBezierCurveArcLength(curve, null, null)) );
					//line 484 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					((org.apache.commons.math3.linear.ArrayRealVector) (bezier_lengths) ).setEntry(((int) (i) ), ((double) (v) ));
				}
				
				//line 486 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				cl += ((org.apache.commons.math3.linear.ArrayRealVector) (bezier_lengths) ).getEntry(((int) (i) ));
				//line 488 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				if (( len < ( cl + verb.core.Constants.EPSILON ) )) 
				{
					//line 489 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					return verb.eval.Analyze.rationalBezierCurveParamAtArcLength(curve, len, tol1, ((org.apache.commons.math3.linear.ArrayRealVector) (bezier_lengths) ).getEntry(((int) (i) )));
				}
				
				//line 492 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				 ++ i;
			}
			
			//line 495 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			return ((double) (-1) );
		}
		catch (java.lang.Throwable typedException)
		{
			//line 467 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static double rationalBezierCurveParamAtArcLength(verb.core.NurbsCurveData curve, double len, java.lang.Object tol, java.lang.Object totalLength)
	{
		//line 514 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
		try 
		{
			//line 515 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			if (( len < 0 )) 
			{
				//line 515 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				return ((org.apache.commons.math3.linear.ArrayRealVector) (curve.knots) ).getEntry(((int) (0) ));
			}
			
			//line 518 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			java.lang.Object totalLen = ( (( ! (haxe.lang.Runtime.eq(totalLength, null)) )) ? (totalLength) : (verb.eval.Analyze.rationalBezierCurveArcLength(curve, null, null)) );
			//line 520 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			if (( len > ((double) (haxe.lang.Runtime.toDouble(totalLen)) ) )) 
			{
				//line 520 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				org.apache.commons.math3.linear.ArrayRealVector this1 = curve.knots;
				//line 520 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				return this1.getEntry(((int) (( this1.getDimension() - 1 )) ));
			}
			
			//line 524 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double start_p = ((org.apache.commons.math3.linear.ArrayRealVector) (curve.knots) ).getEntry(((int) (0) ));
			//line 524 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double start_l = 0.0;
			//line 525 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			org.apache.commons.math3.linear.ArrayRealVector this2 = curve.knots;
			//line 525 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double end_p = this2.getEntry(((int) (( this2.getDimension() - 1 )) ));
			//line 525 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			java.lang.Object end_l = totalLen;
			//line 526 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double mid_p = 0.0;
			//line 526 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double mid_l = 0.0;
			//line 524 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			java.lang.Object tol1 = ( (( ! (haxe.lang.Runtime.eq(tol, null)) )) ? (tol) : (( verb.core.Constants.TOLERANCE * 2 )) );
			//line 529 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			while (( ( ((double) (haxe.lang.Runtime.toDouble(end_l)) ) - ((double) (start_l) ) ) > ((double) (haxe.lang.Runtime.toDouble(tol1)) ) ))
			{
				//line 531 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				mid_p = ( (( start_p + end_p )) / 2 );
				//line 532 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				mid_l = verb.eval.Analyze.rationalBezierCurveArcLength(curve, mid_p, null);
				//line 534 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				if (( mid_l > len )) 
				{
					//line 535 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					end_p = mid_p;
					//line 536 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					end_l = mid_l;
				}
				else
				{
					//line 538 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					start_p = mid_p;
					//line 539 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					start_l = mid_l;
				}
				
			}
			
			//line 544 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			return ( (( start_p + end_p )) / 2 );
		}
		catch (java.lang.Throwable typedException)
		{
			//line 511 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static double rationalCurveArcLength(verb.core.NurbsCurveData curve, java.lang.Object u, java.lang.Object gaussDegIncrease)
	{
		//line 559 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
		try 
		{
			//line 559 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			int gaussDegIncrease1 = ( (haxe.lang.Runtime.eq(gaussDegIncrease, null)) ? (16) : (((int) (haxe.lang.Runtime.toInt(gaussDegIncrease)) )) );
			//line 560 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			if (haxe.lang.Runtime.eq(u, null)) 
			{
				//line 560 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				org.apache.commons.math3.linear.ArrayRealVector this1 = curve.knots;
				//line 560 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				u = this1.getEntry(((int) (( this1.getDimension() - 1 )) ));
			}
			
			//line 562 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			haxe.root.Array<verb.core.NurbsCurveData> crvs = verb.eval.Modify.decomposeCurveIntoBeziers(curve);
			//line 562 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			int i = 0;
			//line 562 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			verb.core.NurbsCurveData cc = crvs.__get(0);
			//line 562 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double sum = 0.0;
			//line 567 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			while (( ( i < crvs.length ) && ( ( ((org.apache.commons.math3.linear.ArrayRealVector) (cc.knots) ).getEntry(((int) (0) )) + verb.core.Constants.EPSILON ) < ((double) (haxe.lang.Runtime.toDouble(u)) ) ) ))
			{
				//line 568 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				org.apache.commons.math3.linear.ArrayRealVector this2 = cc.knots;
				//line 568 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				double param = java.lang.Math.min(this2.getEntry(((int) (( this2.getDimension() - 1 )) )), ((double) (haxe.lang.Runtime.toDouble(u)) ));
				//line 569 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				sum += verb.eval.Analyze.rationalBezierCurveArcLength(cc, param, gaussDegIncrease1);
				//line 570 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				cc = crvs.__get( ++ i);
			}
			
			//line 573 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			return sum;
		}
		catch (java.lang.Throwable typedException)
		{
			//line 559 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static double rationalBezierCurveArcLength(verb.core.NurbsCurveData curve, java.lang.Object u, java.lang.Object gaussDegIncrease)
	{
		//line 588 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
		try 
		{
			//line 588 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			int gaussDegIncrease1 = ( (haxe.lang.Runtime.eq(gaussDegIncrease, null)) ? (16) : (((int) (haxe.lang.Runtime.toInt(gaussDegIncrease)) )) );
			//line 590 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			java.lang.Object u1 = null;
			//line 590 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			if (haxe.lang.Runtime.eq(u, null)) 
			{
				//line 590 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				org.apache.commons.math3.linear.ArrayRealVector this1 = curve.knots;
				//line 590 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				u1 = this1.getEntry(((int) (( this1.getDimension() - 1 )) ));
			}
			else
			{
				//line 590 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				u1 = u;
			}
			
			//line 590 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double z = ( (( ((double) (haxe.lang.Runtime.toDouble(u1)) ) - ((double) (((org.apache.commons.math3.linear.ArrayRealVector) (curve.knots) ).getEntry(((int) (0) ))) ) )) / 2 );
			//line 590 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double sum = 0.0;
			//line 590 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			int gaussDeg = ( curve.degree + gaussDegIncrease1 );
			//line 590 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			double cu = 0.0;
			//line 590 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> tan = null;
			//line 597 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			{
				//line 597 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				int _g = 0;
				//line 597 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				int _g1 = gaussDeg;
				//line 597 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
				while (( _g < _g1 ))
				{
					//line 597 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					int i = _g++;
					//line 599 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					cu = ( ( ( z * ((org.apache.commons.math3.linear.ArrayRealVector) (verb.eval.Analyze.Tvalues.__get(gaussDeg)) ).getEntry(((int) (i) )) ) + z ) + ((org.apache.commons.math3.linear.ArrayRealVector) (curve.knots) ).getEntry(((int) (0) )) );
					//line 600 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					tan = verb.eval.Eval.rationalCurveDerivatives(curve, cu, 1);
					//line 602 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
					sum += ( ((org.apache.commons.math3.linear.ArrayRealVector) (verb.eval.Analyze.Cvalues.__get(gaussDeg)) ).getEntry(((int) (i) )) * verb.core.Vec.norm(tan.__get(1)) );
				}
				
			}
			
			//line 606 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			return ( z * sum );
		}
		catch (java.lang.Throwable typedException)
		{
			//line 588 "C:\\Users\\peter\\Development\\verb\\src\\verb\\eval\\Analyze.hx"
			throw ((java.lang.RuntimeException) (haxe.Exception.thrown(typedException)) );
		}
		
		
	}
	
	
	public static haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> Tvalues;
	
	public static haxe.root.Array<org.apache.commons.math3.linear.ArrayRealVector> Cvalues;
	
}


