// Generated by Haxe 4.1.4
package verb.geom;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Intersect extends haxe.lang.HxObject
{
	public Intersect(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Intersect()
	{
		//line 14 "C:\\Users\\peter\\Development\\verb\\src\\verb\\geom\\Intersect.hx"
		verb.geom.Intersect.__hx_ctor_verb_geom_Intersect(this);
	}
	
	
	protected static void __hx_ctor_verb_geom_Intersect(verb.geom.Intersect __hx_this)
	{
	}
	
	
	public static haxe.root.Array<verb.core.CurveCurveIntersection> curves(verb.geom.ICurve first, verb.geom.ICurve second, java.lang.Object tol)
	{
		//line 29 "C:\\Users\\peter\\Development\\verb\\src\\verb\\geom\\Intersect.hx"
		double tol1 = ( (haxe.lang.Runtime.eq(tol, null)) ? (1e-3) : (((double) (haxe.lang.Runtime.toDouble(tol)) )) );
		//line 29 "C:\\Users\\peter\\Development\\verb\\src\\verb\\geom\\Intersect.hx"
		return verb.eval.Intersect.curves(first.asNurbs(), second.asNurbs(), tol1);
	}
	
	
	public static haxe.root.Array<verb.core.CurveSurfaceIntersection> curveAndSurface(verb.geom.ICurve curve, verb.geom.ISurface surface, java.lang.Object tol)
	{
		//line 46 "C:\\Users\\peter\\Development\\verb\\src\\verb\\geom\\Intersect.hx"
		double tol1 = ( (haxe.lang.Runtime.eq(tol, null)) ? (1e-3) : (((double) (haxe.lang.Runtime.toDouble(tol)) )) );
		//line 46 "C:\\Users\\peter\\Development\\verb\\src\\verb\\geom\\Intersect.hx"
		return verb.eval.Intersect.curveAndSurface(curve.asNurbs(), surface.asNurbs(), tol1, null, null);
	}
	
	
	public static haxe.root.Array<verb.geom.NurbsCurve> surfaces(verb.geom.ISurface first, verb.geom.ISurface second, java.lang.Object tol)
	{
		//line 61 "C:\\Users\\peter\\Development\\verb\\src\\verb\\geom\\Intersect.hx"
		double tol1 = ( (haxe.lang.Runtime.eq(tol, null)) ? (1e-3) : (((double) (haxe.lang.Runtime.toDouble(tol)) )) );
		//line 61 "C:\\Users\\peter\\Development\\verb\\src\\verb\\geom\\Intersect.hx"
		haxe.root.Array<verb.core.NurbsCurveData> _this = verb.eval.Intersect.surfaces(first.asNurbs(), second.asNurbs(), tol1);
		//line 61 "C:\\Users\\peter\\Development\\verb\\src\\verb\\geom\\Intersect.hx"
		haxe.root.Array<verb.geom.NurbsCurve> ret = ((haxe.root.Array<verb.geom.NurbsCurve>) (((haxe.root.Array) (haxe.root.Array.alloc(((int) (_this.length) ))) )) );
		//line 61 "C:\\Users\\peter\\Development\\verb\\src\\verb\\geom\\Intersect.hx"
		{
			//line 61 "C:\\Users\\peter\\Development\\verb\\src\\verb\\geom\\Intersect.hx"
			int _g = 0;
			//line 61 "C:\\Users\\peter\\Development\\verb\\src\\verb\\geom\\Intersect.hx"
			int _g1 = _this.length;
			//line 61 "C:\\Users\\peter\\Development\\verb\\src\\verb\\geom\\Intersect.hx"
			while (( _g < _g1 ))
			{
				//line 61 "C:\\Users\\peter\\Development\\verb\\src\\verb\\geom\\Intersect.hx"
				int i = _g++;
				//line 61 "C:\\Users\\peter\\Development\\verb\\src\\verb\\geom\\Intersect.hx"
				ret.__set(i, new verb.geom.NurbsCurve(((verb.core.NurbsCurveData) (_this.__get(i)) )));
			}
			
		}
		
		//line 61 "C:\\Users\\peter\\Development\\verb\\src\\verb\\geom\\Intersect.hx"
		return ret;
	}
	
	
}


